Escaped mutants:
================

1) /var/www/app/Models/Company.php:76    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(CompanySetting::class);
     }
-    public function recurringInvoices()
+    protected function recurringInvoices()
     {
         return $this->hasMany(RecurringInvoice::class);
     }


2) /var/www/app/Models/Company.php:126    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(TaxType::class);
     }
-    public function items()
+    protected function items()
     {
         return $this->hasMany(Item::class);
     }


3) /var/www/app/Models/Company.php:387    [M] LogicalOr

--- Original
+++ New
@@ @@
     }
     public function hasTransactions()
     {
-        if ($this->customers()->exists() || $this->items()->exists() || $this->invoices()->exists() || $this->estimates()->exists() || $this->expenses()->exists() || $this->payments()->exists() || $this->recurringInvoices()->exists()) {
+        if ($this->customers()->exists() && $this->items()->exists() || $this->invoices()->exists() || $this->estimates()->exists() || $this->expenses()->exists() || $this->payments()->exists() || $this->recurringInvoices()->exists()) {
             return true;
         }
         return false;
     }
 }


4) /var/www/app/Models/Company.php:387    [M] LogicalOr

--- Original
+++ New
@@ @@
     }
     public function hasTransactions()
     {
-        if ($this->customers()->exists() || $this->items()->exists() || $this->invoices()->exists() || $this->estimates()->exists() || $this->expenses()->exists() || $this->payments()->exists() || $this->recurringInvoices()->exists()) {
+        if (($this->customers()->exists() || $this->items()->exists()) && $this->invoices()->exists() || $this->estimates()->exists() || $this->expenses()->exists() || $this->payments()->exists() || $this->recurringInvoices()->exists()) {
             return true;
         }
         return false;
     }
 }


5) /var/www/app/Models/Company.php:387    [M] LogicalOr

--- Original
+++ New
@@ @@
     }
     public function hasTransactions()
     {
-        if ($this->customers()->exists() || $this->items()->exists() || $this->invoices()->exists() || $this->estimates()->exists() || $this->expenses()->exists() || $this->payments()->exists() || $this->recurringInvoices()->exists()) {
+        if (($this->customers()->exists() || $this->items()->exists() || $this->invoices()->exists()) && $this->estimates()->exists() || $this->expenses()->exists() || $this->payments()->exists() || $this->recurringInvoices()->exists()) {
             return true;
         }
         return false;
     }
 }


6) /var/www/app/Models/Company.php:387    [M] LogicalOr

--- Original
+++ New
@@ @@
     }
     public function hasTransactions()
     {
-        if ($this->customers()->exists() || $this->items()->exists() || $this->invoices()->exists() || $this->estimates()->exists() || $this->expenses()->exists() || $this->payments()->exists() || $this->recurringInvoices()->exists()) {
+        if (($this->customers()->exists() || $this->items()->exists() || $this->invoices()->exists() || $this->estimates()->exists()) && $this->expenses()->exists() || $this->payments()->exists() || $this->recurringInvoices()->exists()) {
             return true;
         }
         return false;
     }
 }


7) /var/www/app/Models/Company.php:387    [M] LogicalOr

--- Original
+++ New
@@ @@
     }
     public function hasTransactions()
     {
-        if ($this->customers()->exists() || $this->items()->exists() || $this->invoices()->exists() || $this->estimates()->exists() || $this->expenses()->exists() || $this->payments()->exists() || $this->recurringInvoices()->exists()) {
+        if (($this->customers()->exists() || $this->items()->exists() || $this->invoices()->exists() || $this->estimates()->exists() || $this->expenses()->exists()) && $this->payments()->exists() || $this->recurringInvoices()->exists()) {
             return true;
         }
         return false;
     }
 }


8) /var/www/app/Models/Company.php:387    [M] LogicalOr

--- Original
+++ New
@@ @@
     }
     public function hasTransactions()
     {
-        if ($this->customers()->exists() || $this->items()->exists() || $this->invoices()->exists() || $this->estimates()->exists() || $this->expenses()->exists() || $this->payments()->exists() || $this->recurringInvoices()->exists()) {
+        if (($this->customers()->exists() || $this->items()->exists() || $this->invoices()->exists() || $this->estimates()->exists() || $this->expenses()->exists() || $this->payments()->exists()) && $this->recurringInvoices()->exists()) {
             return true;
         }
         return false;
     }
 }


9) /var/www/app/Models/CompanySetting.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
             return [$item['option'] => $item['value']];
         });
     }
-    public static function getSettings($settings, $company_id)
+    protected static function getSettings($settings, $company_id)
     {
         return static::whereIn('option', $settings)->whereCompany($company_id)->get()->mapWithKeys(function ($item) {
             return [$item['option'] => $item['value']];


10) /var/www/app/Models/CustomField.php:41    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->attributes['options'] = json_encode($value);
     }
-    public function getDefaultAnswerAttribute()
+    protected function getDefaultAnswerAttribute()
     {
         $value_type = getCustomFieldValueKey($this->type);
         return $this->{$value_type};


11) /var/www/app/Models/CustomField.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $value_type = getCustomFieldValueKey($this->type);
         return $this->{$value_type};
     }
-    public function getInUseAttribute()
+    protected function getInUseAttribute()
     {
         return $this->customFieldValues()->exists();
     }


12) /var/www/app/Models/CustomField.php:63    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(CustomFieldValue::class);
     }
-    public function scopeWhereCompany($query)
+    protected function scopeWhereCompany($query)
     {
         return $query->where('custom_fields.company_id', request()->header('company'));
     }


13) /var/www/app/Models/CustomField.php:76    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
         });
     }
-    public function scopePaginateData($query, $limit)
+    protected function scopePaginateData($query, $limit)
     {
         if ($limit == 'all') {
             return $query->get();


14) /var/www/app/Models/CustomField.php:78    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit = 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


15) /var/www/app/Models/CustomField.php:78    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit != 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


16) /var/www/app/Models/CustomField.php:85    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $query->paginate($limit);
     }
-    public function scopeApplyFilters($query, array $filters)
+    protected function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('type')) {


17) /var/www/app/Models/CustomField.php:103    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('custom_fields.model_type', $type);
     }
-    public static function createCustomField($request)
+    protected static function createCustomField($request)
     {
         $data = $request->validated();
         $data[getCustomFieldValueKey($request->type)] = $request->default_answer;


18) /var/www/app/Models/CustomField.php:119    [M] This

--- Original
+++ New
@@ @@
         $data = $request->validated();
         $data[getCustomFieldValueKey($request->type)] = $request->default_answer;
         $this->update($data);
-        return $this;
+        return null;
     }
 }


19) /var/www/app/Models/CustomFieldValue.php:25    [M] PublicVisibility

--- Original
+++ New
@@ @@
     protected $dates = ['date_answer', 'date_time_answer'];
     protected $guarded = ['id'];
     protected $appends = ['defaultAnswer'];
-    public function setTimeAnswerAttribute($value)
+    protected function setTimeAnswerAttribute($value)
     {
         if ($value && $value != null) {
             $this->attributes['time_answer'] = date("H:i:s", strtotime($value));


20) /var/www/app/Models/CustomFieldValue.php:27    [M] LogicalAnd

--- Original
+++ New
@@ @@
     protected $appends = ['defaultAnswer'];
     public function setTimeAnswerAttribute($value)
     {
-        if ($value && $value != null) {
+        if ($value || $value != null) {
             $this->attributes['time_answer'] = date("H:i:s", strtotime($value));
         } else {
             $this->attributes['time_answer'] = null;


21) /var/www/app/Models/CustomFieldValue.php:34    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $this->attributes['time_answer'] = null;
         }
     }
-    public function getDefaultAnswerAttribute()
+    protected function getDefaultAnswerAttribute()
     {
         $value_type = getCustomFieldValueKey($this->type);
         return $this->{$value_type};


22) /var/www/app/Models/CustomFieldValue.php:51    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(CustomField::class);
     }
-    public function customFieldValuable()
+    protected function customFieldValuable()
     {
         return $this->morphTo();
     }
 }


23) /var/www/app/Models/Customer.php:86    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Address::class);
     }
-    public function recurringInvoices()
+    protected function recurringInvoices()
     {
         return $this->hasMany(RecurringInvoice::class);
     }


24) /var/www/app/Models/Customer.php:132    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return 0;
     }
-    public static function deleteCustomers($ids)
+    protected static function deleteCustomers($ids)
     {
         foreach ($ids as $id) {
             $customer = self::find($id);


25) /var/www/app/Models/Customer.php:134    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public static function deleteCustomers($ids)
     {
-        foreach ($ids as $id) {
+        foreach (array() as $id) {
             $customer = self::find($id);
             if ($customer->estimates()->exists()) {
                 $customer->estimates()->delete();


26) /var/www/app/Models/Customer.php:172    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     $recurringInvoice->delete();
                 }
             }
-            $customer->delete();
+            
         }
         return true;
     }


27) /var/www/app/Models/Customer.php:175    [M] TrueValue

--- Original
+++ New
@@ @@
             }
             $customer->delete();
         }
-        return true;
+        return false;
     }
     public static function createCustomer($request)
     {


28) /var/www/app/Models/Customer.php:178    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return true;
     }
-    public static function createCustomer($request)
+    protected static function createCustomer($request)
     {
         $customer = Customer::create($request->getCustomerPayload());
         if ($request->shipping) {


29) /var/www/app/Models/Customer.php:184    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $customer = Customer::create($request->getCustomerPayload());
         if ($request->shipping) {
             if ($request->hasAddress($request->shipping)) {
-                $customer->addresses()->create($request->getShippingAddress());
+                
             }
         }
         if ($request->billing) {


30) /var/www/app/Models/Customer.php:190    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         if ($request->billing) {
             if ($request->hasAddress($request->billing)) {
-                $customer->addresses()->create($request->getBillingAddress());
+                
             }
         }
         $customFields = $request->customFields;


31) /var/www/app/Models/Customer.php:205    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $customer = Customer::with('billingAddress', 'shippingAddress', 'fields')->find($customer->id);
         return $customer;
     }
-    public static function updateCustomer($request, $customer)
+    protected static function updateCustomer($request, $customer)
     {
         $condition = $customer->estimates()->exists() || $customer->invoices()->exists() || $customer->payments()->exists() || $customer->recurringInvoices()->exists();
         if ($customer->currency_id !== $request->currency_id && $condition) {


32) /var/www/app/Models/Customer.php:207    [M] LogicalOr

--- Original
+++ New
@@ @@
     }
     public static function updateCustomer($request, $customer)
     {
-        $condition = $customer->estimates()->exists() || $customer->invoices()->exists() || $customer->payments()->exists() || $customer->recurringInvoices()->exists();
+        $condition = $customer->estimates()->exists() && $customer->invoices()->exists() || $customer->payments()->exists() || $customer->recurringInvoices()->exists();
         if ($customer->currency_id !== $request->currency_id && $condition) {
             return 'you_cannot_edit_currency';
         }


33) /var/www/app/Models/Customer.php:207    [M] LogicalOr

--- Original
+++ New
@@ @@
     }
     public static function updateCustomer($request, $customer)
     {
-        $condition = $customer->estimates()->exists() || $customer->invoices()->exists() || $customer->payments()->exists() || $customer->recurringInvoices()->exists();
+        $condition = ($customer->estimates()->exists() || $customer->invoices()->exists()) && $customer->payments()->exists() || $customer->recurringInvoices()->exists();
         if ($customer->currency_id !== $request->currency_id && $condition) {
             return 'you_cannot_edit_currency';
         }


34) /var/www/app/Models/Customer.php:207    [M] LogicalOr

--- Original
+++ New
@@ @@
     }
     public static function updateCustomer($request, $customer)
     {
-        $condition = $customer->estimates()->exists() || $customer->invoices()->exists() || $customer->payments()->exists() || $customer->recurringInvoices()->exists();
+        $condition = ($customer->estimates()->exists() || $customer->invoices()->exists() || $customer->payments()->exists()) && $customer->recurringInvoices()->exists();
         if ($customer->currency_id !== $request->currency_id && $condition) {
             return 'you_cannot_edit_currency';
         }


35) /var/www/app/Models/Customer.php:209    [M] NotIdentical

--- Original
+++ New
@@ @@
     public static function updateCustomer($request, $customer)
     {
         $condition = $customer->estimates()->exists() || $customer->invoices()->exists() || $customer->payments()->exists() || $customer->recurringInvoices()->exists();
-        if ($customer->currency_id !== $request->currency_id && $condition) {
+        if ($customer->currency_id === $request->currency_id && $condition) {
             return 'you_cannot_edit_currency';
         }
         $customer->update($request->getCustomerPayload());


36) /var/www/app/Models/Customer.php:209    [M] LogicalAnd

--- Original
+++ New
@@ @@
     public static function updateCustomer($request, $customer)
     {
         $condition = $customer->estimates()->exists() || $customer->invoices()->exists() || $customer->payments()->exists() || $customer->recurringInvoices()->exists();
-        if ($customer->currency_id !== $request->currency_id && $condition) {
+        if ($customer->currency_id !== $request->currency_id || $condition) {
             return 'you_cannot_edit_currency';
         }
         $customer->update($request->getCustomerPayload());


37) /var/www/app/Models/Customer.php:215    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             return 'you_cannot_edit_currency';
         }
         $customer->update($request->getCustomerPayload());
-        $customer->addresses()->delete();
+        
         if ($request->shipping) {
             if ($request->hasAddress($request->shipping)) {
                 $customer->addresses()->create($request->getShippingAddress());


38) /var/www/app/Models/Customer.php:219    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $customer->addresses()->delete();
         if ($request->shipping) {
             if ($request->hasAddress($request->shipping)) {
-                $customer->addresses()->create($request->getShippingAddress());
+                
             }
         }
         if ($request->billing) {


39) /var/www/app/Models/Customer.php:225    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         if ($request->billing) {
             if ($request->hasAddress($request->billing)) {
-                $customer->addresses()->create($request->getBillingAddress());
+                
             }
         }
         $customFields = $request->customFields;


40) /var/www/app/Models/Customer.php:240    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $customer = Customer::with('billingAddress', 'shippingAddress', 'fields')->find($customer->id);
         return $customer;
     }
-    public function scopePaginateData($query, $limit)
+    protected function scopePaginateData($query, $limit)
     {
         if ($limit == 'all') {
             return $query->get();


41) /var/www/app/Models/Customer.php:242    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit = 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


42) /var/www/app/Models/Customer.php:242    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit != 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


43) /var/www/app/Models/Customer.php:249    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $query->paginate($limit);
     }
-    public function scopeWhereCompany($query)
+    protected function scopeWhereCompany($query)
     {
         return $query->where('customers.company_id', request()->header('company'));
     }


44) /var/www/app/Models/Customer.php:269    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orderBy($orderByField, $orderBy);
     }
-    public function scopeWhereSearch($query, $search)
+    protected function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {


45) /var/www/app/Models/Customer.php:271    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        foreach (explode(' ', $search) as $term) {
+        foreach (array() as $term) {
             $query->where(function ($query) use($term) {
                 $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });


46) /var/www/app/Models/Customer.php:272    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
-            });
+            
         }
     }
     public function scopeWherePhone($query, $phone)


47) /var/www/app/Models/Customer.php:273    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%' . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


48) /var/www/app/Models/Customer.php:273    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


49) /var/www/app/Models/Customer.php:273    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


50) /var/www/app/Models/Customer.php:273    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%' . $term)->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


51) /var/www/app/Models/Customer.php:273    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term)->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


52) /var/www/app/Models/Customer.php:273    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                
             });
         }
     }


53) /var/www/app/Models/Customer.php:274    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', $term . '%' . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


54) /var/www/app/Models/Customer.php:274    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


55) /var/www/app/Models/Customer.php:274    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


56) /var/www/app/Models/Customer.php:274    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . '%' . $term)->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


57) /var/www/app/Models/Customer.php:274    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term)->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


58) /var/www/app/Models/Customer.php:275    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', $term . '%' . '%');
             });
         }
     }


59) /var/www/app/Models/Customer.php:275    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', $term . '%');
             });
         }
     }


60) /var/www/app/Models/Customer.php:275    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . '%');
             });
         }
     }


61) /var/www/app/Models/Customer.php:275    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . '%' . $term);
             });
         }
     }


62) /var/www/app/Models/Customer.php:275    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term);
             });
         }
     }


63) /var/www/app/Models/Customer.php:311    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
         });
     }
-    public function scopeApplyFilters($query, array $filters)
+    protected function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('search')) {


64) /var/www/app/Models/Customer.php:316    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $filters = collect($filters);
         if ($filters->get('search')) {
-            $query->whereSearch($filters->get('search'));
+            
         }
         if ($filters->get('contact_name')) {
             $query->whereContactName($filters->get('contact_name'));


65) /var/www/app/Models/Customer.php:335    [M] LogicalOr

--- Original
+++ New
@@ @@
         if ($filters->get('phone')) {
             $query->wherePhone($filters->get('phone'));
         }
-        if ($filters->get('orderByField') || $filters->get('orderBy')) {
+        if ($filters->get('orderByField') && $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'name';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
             $query->whereOrder($field, $orderBy);


66) /var/www/app/Models/Estimate.php:194    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('estimates.company_id', request()->header('company'));
     }
-    public function scopeWhereCustomer($query, $customer_id)
+    protected function scopeWhereCustomer($query, $customer_id)
     {
         $query->where('estimates.customer_id', $customer_id);
     }


67) /var/www/app/Models/Estimate.php:196    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCustomer($query, $customer_id)
     {
-        $query->where('estimates.customer_id', $customer_id);
+        
     }
     public function scopePaginateData($query, $limit)
     {


68) /var/www/app/Models/Expense.php:67    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo('Crater\\Models\\User', 'creator_id');
     }
-    public function getFormattedExpenseDateAttribute($value)
+    protected function getFormattedExpenseDateAttribute($value)
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->expense_date)->format($dateFormat);


69) /var/www/app/Models/Expense.php:74    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->expense_date)->format($dateFormat);
     }
-    public function getFormattedCreatedAtAttribute($value)
+    protected function getFormattedCreatedAtAttribute($value)
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->created_at)->format($dateFormat);


70) /var/www/app/Models/Expense.php:81    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->created_at)->format($dateFormat);
     }
-    public function getReceiptUrlAttribute($value)
+    protected function getReceiptUrlAttribute($value)
     {
         $media = $this->getFirstMedia('receipts');
         if ($media) {


71) /var/www/app/Models/Expense.php:95    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return null;
     }
-    public function getReceiptAttribute($value)
+    protected function getReceiptAttribute($value)
     {
         $media = $this->getFirstMedia('receipts');
         if ($media) {


72) /var/www/app/Models/Expense.php:106    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return null;
     }
-    public function getReceiptMetaAttribute($value)
+    protected function getReceiptMetaAttribute($value)
     {
         $media = $this->getFirstMedia('receipts');
         if ($media) {


73) /var/www/app/Models/Expense.php:117    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return null;
     }
-    public function scopeExpensesBetween($query, $start, $end)
+    protected function scopeExpensesBetween($query, $start, $end)
     {
         return $query->whereBetween('expenses.expense_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
     }


74) /var/www/app/Models/Expense.php:121    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeExpensesBetween($query, $start, $end)
     {
-        return $query->whereBetween('expenses.expense_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+        return $query->whereBetween('expenses.expense_date', [$end->format('Y-m-d')]);
     }
     public function scopeWhereCategoryName($query, $search)
     {


75) /var/www/app/Models/Expense.php:139    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('notes', 'LIKE', '%' . $search . '%');
     }
-    public function scopeWhereCategory($query, $categoryId)
+    protected function scopeWhereCategory($query, $categoryId)
     {
         return $query->where('expenses.expense_category_id', $categoryId);
     }


76) /var/www/app/Models/Expense.php:144    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('expenses.expense_category_id', $categoryId);
     }
-    public function scopeWhereUser($query, $customer_id)
+    protected function scopeWhereUser($query, $customer_id)
     {
         return $query->where('expenses.customer_id', $customer_id);
     }


77) /var/www/app/Models/Expense.php:149    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('expenses.customer_id', $customer_id);
     }
-    public function scopeApplyFilters($query, array $filters)
+    protected function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('expense_category_id')) {


78) /var/www/app/Models/Expense.php:154    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $filters = collect($filters);
         if ($filters->get('expense_category_id')) {
-            $query->whereCategory($filters->get('expense_category_id'));
+            
         }
         if ($filters->get('customer_id')) {
             $query->whereUser($filters->get('customer_id'));


79) /var/www/app/Models/Expense.php:165    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if ($filters->get('expense_id')) {
             $query->whereExpense($filters->get('expense_id'));
         }
-        if ($filters->get('from_date') && $filters->get('to_date')) {
+        if ($filters->get('from_date') || $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
             $query->expensesBetween($start, $end);


80) /var/www/app/Models/Expense.php:168    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
-            $query->expensesBetween($start, $end);
+            
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'expense_date';


81) /var/www/app/Models/Expense.php:171    [M] LogicalOr

--- Original
+++ New
@@ @@
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
             $query->expensesBetween($start, $end);
         }
-        if ($filters->get('orderByField') || $filters->get('orderBy')) {
+        if ($filters->get('orderByField') && $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'expense_date';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
             $query->whereOrder($field, $orderBy);


82) /var/www/app/Models/Expense.php:178    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereOrder($field, $orderBy);
         }
         if ($filters->get('search')) {
-            $query->whereSearch($filters->get('search'));
+            
         }
     }
     public function scopeWhereExpense($query, $expense_id)


83) /var/www/app/Models/Expense.php:187    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orWhere('id', $expense_id);
     }
-    public function scopeWhereSearch($query, $search)
+    protected function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {


84) /var/www/app/Models/Expense.php:189    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        foreach (explode(' ', $search) as $term) {
+        foreach (array() as $term) {
             $query->whereHas('category', function ($query) use($term) {
                 $query->where('name', 'LIKE', '%' . $term . '%');
             })->orWhere('notes', 'LIKE', '%' . $term . '%');


85) /var/www/app/Models/Expense.php:190    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->whereHas('category', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%');
-            })->orWhere('notes', 'LIKE', '%' . $term . '%');
+            
         }
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)


86) /var/www/app/Models/Expense.php:191    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%' . '%');
             })->orWhere('notes', 'LIKE', '%' . $term . '%');
         }
     }


87) /var/www/app/Models/Expense.php:191    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%');
             })->orWhere('notes', 'LIKE', '%' . $term . '%');
         }
     }


88) /var/www/app/Models/Expense.php:191    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%');
             })->orWhere('notes', 'LIKE', '%' . $term . '%');
         }
     }


89) /var/www/app/Models/Expense.php:191    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%' . $term);
             })->orWhere('notes', 'LIKE', '%' . $term . '%');
         }
     }


90) /var/www/app/Models/Expense.php:191    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term);
             })->orWhere('notes', 'LIKE', '%' . $term . '%');
         }
     }


91) /var/www/app/Models/Expense.php:191    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%');
+                
             })->orWhere('notes', 'LIKE', '%' . $term . '%');
         }
     }


92) /var/www/app/Models/Expense.php:193    [M] Concat

--- Original
+++ New
@@ @@
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
                 $query->where('name', 'LIKE', '%' . $term . '%');
-            })->orWhere('notes', 'LIKE', '%' . $term . '%');
+            })->orWhere('notes', 'LIKE', $term . '%' . '%');
         }
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)


93) /var/www/app/Models/Expense.php:193    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
                 $query->where('name', 'LIKE', '%' . $term . '%');
-            })->orWhere('notes', 'LIKE', '%' . $term . '%');
+            })->orWhere('notes', 'LIKE', $term . '%');
         }
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)


94) /var/www/app/Models/Expense.php:193    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
                 $query->where('name', 'LIKE', '%' . $term . '%');
-            })->orWhere('notes', 'LIKE', '%' . $term . '%');
+            })->orWhere('notes', 'LIKE', '%' . '%');
         }
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)


95) /var/www/app/Models/Expense.php:193    [M] Concat

--- Original
+++ New
@@ @@
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
                 $query->where('name', 'LIKE', '%' . $term . '%');
-            })->orWhere('notes', 'LIKE', '%' . $term . '%');
+            })->orWhere('notes', 'LIKE', '%' . '%' . $term);
         }
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)


96) /var/www/app/Models/Expense.php:193    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
                 $query->where('name', 'LIKE', '%' . $term . '%');
-            })->orWhere('notes', 'LIKE', '%' . $term . '%');
+            })->orWhere('notes', 'LIKE', '%' . $term);
         }
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)


97) /var/www/app/Models/Expense.php:212    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('expenses.company_id', $company);
     }
-    public function scopePaginateData($query, $limit)
+    protected function scopePaginateData($query, $limit)
     {
         if ($limit == 'all') {
             return $query->get();


98) /var/www/app/Models/Expense.php:214    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit = 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


99) /var/www/app/Models/Expense.php:214    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit != 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


100) /var/www/app/Models/Expense.php:232    [M] PublicVisibility

--- Original
+++ New
@@ @@
                 sum(base_amount) as total_amount,
                 expense_category_id'))->groupBy('expense_category_id');
     }
-    public static function createExpense($request)
+    protected static function createExpense($request)
     {
         $expense = self::create($request->getExpensePayload());
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));


101) /var/www/app/Models/Expense.php:238    [M] CastString

--- Original
+++ New
@@ @@
     {
         $expense = self::create($request->getExpensePayload());
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $expense['currency_id'] !== $company_currency) {
+        if ($expense['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($expense);
         }
         if ($request->hasFile('attachment_receipt')) {


102) /var/www/app/Models/Expense.php:238    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
         $expense = self::create($request->getExpensePayload());
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $expense['currency_id'] !== $company_currency) {
+        if ((string) $expense['currency_id'] === $company_currency) {
             ExchangeRateLog::addExchangeRateLog($expense);
         }
         if ($request->hasFile('attachment_receipt')) {


103) /var/www/app/Models/Expense.php:239    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $expense = self::create($request->getExpensePayload());
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $expense['currency_id'] !== $company_currency) {
-            ExchangeRateLog::addExchangeRateLog($expense);
+            
         }
         if ($request->hasFile('attachment_receipt')) {
             $expense->addMediaFromRequest('attachment_receipt')->toMediaCollection('receipts');


104) /var/www/app/Models/Expense.php:261    [M] CastString

--- Original
+++ New
@@ @@
         $data = $request->getExpensePayload();
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $data['currency_id'] !== $company_currency) {
+        if ($data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);
         }
         if (isset($request->is_attachment_receipt_removed) && (bool) $request->is_attachment_receipt_removed) {


105) /var/www/app/Models/Expense.php:261    [M] NotIdentical

--- Original
+++ New
@@ @@
         $data = $request->getExpensePayload();
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $data['currency_id'] !== $company_currency) {
+        if ((string) $data['currency_id'] === $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);
         }
         if (isset($request->is_attachment_receipt_removed) && (bool) $request->is_attachment_receipt_removed) {


106) /var/www/app/Models/Expense.php:262    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $data['currency_id'] !== $company_currency) {
-            ExchangeRateLog::addExchangeRateLog($this);
+            
         }
         if (isset($request->is_attachment_receipt_removed) && (bool) $request->is_attachment_receipt_removed) {
             $this->clearMediaCollection('receipts');


107) /var/www/app/Models/Expense.php:265    [M] CastBool

--- Original
+++ New
@@ @@
         if ((string) $data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);
         }
-        if (isset($request->is_attachment_receipt_removed) && (bool) $request->is_attachment_receipt_removed) {
+        if (isset($request->is_attachment_receipt_removed) && $request->is_attachment_receipt_removed) {
             $this->clearMediaCollection('receipts');
         }
         if ($request->hasFile('attachment_receipt')) {


108) /var/www/app/Models/Expense.php:265    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if ((string) $data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);
         }
-        if (isset($request->is_attachment_receipt_removed) && (bool) $request->is_attachment_receipt_removed) {
+        if (isset($request->is_attachment_receipt_removed) || (bool) $request->is_attachment_receipt_removed) {
             $this->clearMediaCollection('receipts');
         }
         if ($request->hasFile('attachment_receipt')) {


109) /var/www/app/Models/Expense.php:277    [M] TrueValue

--- Original
+++ New
@@ @@
         if ($request->customFields) {
             $this->updateCustomFields(json_decode($request->customFields));
         }
-        return true;
+        return false;
     }
 }


110) /var/www/app/Models/ExpenseCategory.php:44    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->expenses()->sum('amount');
     }
-    public function scopeWhereCompany($query)
+    protected function scopeWhereCompany($query)
     {
         $query->where('company_id', request()->header('company'));
     }


111) /var/www/app/Models/ExpenseCategory.php:46    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query)
     {
-        $query->where('company_id', request()->header('company'));
+        
     }
     public function scopeWhereCategory($query, $category_id)
     {


112) /var/www/app/Models/ExpenseCategory.php:59    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('name', 'LIKE', '%' . $search . '%');
     }
-    public function scopeApplyFilters($query, array $filters)
+    protected function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('category_id')) {


113) /var/www/app/Models/ExpenseCategory.php:76    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
     }
-    public function scopePaginateData($query, $limit)
+    protected function scopePaginateData($query, $limit)
     {
         if ($limit == 'all') {
             return $query->get();


114) /var/www/app/Models/ExpenseCategory.php:78    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit = 'all') {
             return $query->get();
         }
         return $query->paginate($limit);
     }
 }


115) /var/www/app/Models/ExpenseCategory.php:78    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit != 'all') {
             return $query->get();
         }
         return $query->paginate($limit);
     }
 }


116) /var/www/app/Models/FileDisk.php:49    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
         }
     }
-    public function scopePaginateData($query, $limit)
+    protected function scopePaginateData($query, $limit)
     {
         if ($limit == 'all') {
             return $query->get();


117) /var/www/app/Models/FileDisk.php:51    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit = 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


118) /var/www/app/Models/FileDisk.php:51    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit != 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


119) /var/www/app/Models/FileDisk.php:58    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $query->paginate($limit);
     }
-    public function scopeApplyFilters($query, array $filters)
+    protected function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('search')) {


120) /var/www/app/Models/FileDisk.php:65    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if ($filters->get('search')) {
             $query->whereSearch($filters->get('search'));
         }
-        if ($filters->get('from_date') && $filters->get('to_date')) {
+        if ($filters->get('from_date') || $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
             $query->fileDisksBetween($start, $end);


121) /var/www/app/Models/FileDisk.php:71    [M] LogicalOr

--- Original
+++ New
@@ @@
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
             $query->fileDisksBetween($start, $end);
         }
-        if ($filters->get('orderByField') || $filters->get('orderBy')) {
+        if ($filters->get('orderByField') && $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
             $query->whereOrder($field, $orderBy);


122) /var/www/app/Models/FileDisk.php:87    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $credentials = collect(json_decode($this['credentials']));
         self::setFilesystem($credentials, $driver);
     }
-    public function setAsDefault()
+    protected function setAsDefault()
     {
         return $this->set_as_default;
     }


123) /var/www/app/Models/FileDisk.php:109    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         config(['filesystems.disks.' . $prefix . $driver => $disks]);
     }
-    public static function validateCredentials($credentials, $disk)
+    protected static function validateCredentials($credentials, $disk)
     {
         $exists = false;
         self::setFilesystem(collect($credentials), $disk);


124) /var/www/app/Models/FileDisk.php:111    [M] FalseValue

--- Original
+++ New
@@ @@
     }
     public static function validateCredentials($credentials, $disk)
     {
-        $exists = false;
+        $exists = true;
         self::setFilesystem(collect($credentials), $disk);
         $prefix = env('DYNAMIC_DISK_PREFIX', 'temp_');
         try {


125) /var/www/app/Models/FileDisk.php:113    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public static function validateCredentials($credentials, $disk)
     {
         $exists = false;
-        self::setFilesystem(collect($credentials), $disk);
+        
         $prefix = env('DYNAMIC_DISK_PREFIX', 'temp_');
         try {
             $root = '';


126) /var/www/app/Models/FileDisk.php:119    [M] Equal

--- Original
+++ New
@@ @@
         $prefix = env('DYNAMIC_DISK_PREFIX', 'temp_');
         try {
             $root = '';
-            if ($disk == 'dropbox') {
+            if ($disk != 'dropbox') {
                 $root = $credentials['root'] . '/';
             }
             \Storage::disk($prefix . $disk)->put($root . 'crater_temp.text', 'Check Credentials');


127) /var/www/app/Models/FileDisk.php:122    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
             if ($disk == 'dropbox') {
                 $root = $credentials['root'] . '/';
             }
-            \Storage::disk($prefix . $disk)->put($root . 'crater_temp.text', 'Check Credentials');
+            \Storage::disk($disk)->put($root . 'crater_temp.text', 'Check Credentials');
             if (\Storage::disk($prefix . $disk)->exists($root . 'crater_temp.text')) {
                 $exists = true;
                 \Storage::disk($prefix . $disk)->delete($root . 'crater_temp.text');


128) /var/www/app/Models/FileDisk.php:122    [M] Concat

--- Original
+++ New
@@ @@
             if ($disk == 'dropbox') {
                 $root = $credentials['root'] . '/';
             }
-            \Storage::disk($prefix . $disk)->put($root . 'crater_temp.text', 'Check Credentials');
+            \Storage::disk($prefix . $disk)->put('crater_temp.text' . $root, 'Check Credentials');
             if (\Storage::disk($prefix . $disk)->exists($root . 'crater_temp.text')) {
                 $exists = true;
                 \Storage::disk($prefix . $disk)->delete($root . 'crater_temp.text');


129) /var/www/app/Models/FileDisk.php:122    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
             if ($disk == 'dropbox') {
                 $root = $credentials['root'] . '/';
             }
-            \Storage::disk($prefix . $disk)->put($root . 'crater_temp.text', 'Check Credentials');
+            \Storage::disk($prefix . $disk)->put('crater_temp.text', 'Check Credentials');
             if (\Storage::disk($prefix . $disk)->exists($root . 'crater_temp.text')) {
                 $exists = true;
                 \Storage::disk($prefix . $disk)->delete($root . 'crater_temp.text');


130) /var/www/app/Models/FileDisk.php:124    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 $root = $credentials['root'] . '/';
             }
             \Storage::disk($prefix . $disk)->put($root . 'crater_temp.text', 'Check Credentials');
-            if (\Storage::disk($prefix . $disk)->exists($root . 'crater_temp.text')) {
+            if (\Storage::disk($disk)->exists($root . 'crater_temp.text')) {
                 $exists = true;
                 \Storage::disk($prefix . $disk)->delete($root . 'crater_temp.text');
             }


131) /var/www/app/Models/FileDisk.php:124    [M] Concat

--- Original
+++ New
@@ @@
                 $root = $credentials['root'] . '/';
             }
             \Storage::disk($prefix . $disk)->put($root . 'crater_temp.text', 'Check Credentials');
-            if (\Storage::disk($prefix . $disk)->exists($root . 'crater_temp.text')) {
+            if (\Storage::disk($prefix . $disk)->exists('crater_temp.text' . $root)) {
                 $exists = true;
                 \Storage::disk($prefix . $disk)->delete($root . 'crater_temp.text');
             }


132) /var/www/app/Models/FileDisk.php:124    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 $root = $credentials['root'] . '/';
             }
             \Storage::disk($prefix . $disk)->put($root . 'crater_temp.text', 'Check Credentials');
-            if (\Storage::disk($prefix . $disk)->exists($root . 'crater_temp.text')) {
+            if (\Storage::disk($prefix . $disk)->exists('crater_temp.text')) {
                 $exists = true;
                 \Storage::disk($prefix . $disk)->delete($root . 'crater_temp.text');
             }


133) /var/www/app/Models/FileDisk.php:126    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
             \Storage::disk($prefix . $disk)->put($root . 'crater_temp.text', 'Check Credentials');
             if (\Storage::disk($prefix . $disk)->exists($root . 'crater_temp.text')) {
                 $exists = true;
-                \Storage::disk($prefix . $disk)->delete($root . 'crater_temp.text');
+                \Storage::disk($disk)->delete($root . 'crater_temp.text');
             }
         } catch (\Exception $e) {
             $exists = false;


134) /var/www/app/Models/FileDisk.php:126    [M] Concat

--- Original
+++ New
@@ @@
             \Storage::disk($prefix . $disk)->put($root . 'crater_temp.text', 'Check Credentials');
             if (\Storage::disk($prefix . $disk)->exists($root . 'crater_temp.text')) {
                 $exists = true;
-                \Storage::disk($prefix . $disk)->delete($root . 'crater_temp.text');
+                \Storage::disk($prefix . $disk)->delete('crater_temp.text' . $root);
             }
         } catch (\Exception $e) {
             $exists = false;


135) /var/www/app/Models/FileDisk.php:126    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
             \Storage::disk($prefix . $disk)->put($root . 'crater_temp.text', 'Check Credentials');
             if (\Storage::disk($prefix . $disk)->exists($root . 'crater_temp.text')) {
                 $exists = true;
-                \Storage::disk($prefix . $disk)->delete($root . 'crater_temp.text');
+                \Storage::disk($prefix . $disk)->delete('crater_temp.text');
             }
         } catch (\Exception $e) {
             $exists = false;


136) /var/www/app/Models/FileDisk.php:126    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
             \Storage::disk($prefix . $disk)->put($root . 'crater_temp.text', 'Check Credentials');
             if (\Storage::disk($prefix . $disk)->exists($root . 'crater_temp.text')) {
                 $exists = true;
-                \Storage::disk($prefix . $disk)->delete($root . 'crater_temp.text');
+                \Storage::disk($prefix . $disk)->delete($root);
             }
         } catch (\Exception $e) {
             $exists = false;


137) /var/www/app/Models/FileDisk.php:126    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             \Storage::disk($prefix . $disk)->put($root . 'crater_temp.text', 'Check Credentials');
             if (\Storage::disk($prefix . $disk)->exists($root . 'crater_temp.text')) {
                 $exists = true;
-                \Storage::disk($prefix . $disk)->delete($root . 'crater_temp.text');
+                
             }
         } catch (\Exception $e) {
             $exists = false;


138) /var/www/app/Models/FileDisk.php:135    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $exists;
     }
-    public static function createDisk($request)
+    protected static function createDisk($request)
     {
         if ($request->set_as_default) {
             self::updateDefaultDisks();


139) /var/www/app/Models/FileDisk.php:145    [M] ArrayItem

--- Original
+++ New
@@ @@
         if ($request->set_as_default) {
             self::updateDefaultDisks();
         }
-        $disk = self::create(['credentials' => $request->credentials, 'name' => $request->name, 'driver' => $request->driver, 'set_as_default' => $request->set_as_default, 'company_id' => $request->header('company')]);
+        $disk = self::create(['credentials' => $request->credentials, 'name' => $request->name, 'driver' => $request->driver, 'set_as_default' > $request->set_as_default, 'company_id' => $request->header('company')]);
         return $disk;
     }
     public static function updateDefaultDisks()


140) /var/www/app/Models/FileDisk.php:146    [M] ArrayItem

--- Original
+++ New
@@ @@
         if ($request->set_as_default) {
             self::updateDefaultDisks();
         }
-        $disk = self::create(['credentials' => $request->credentials, 'name' => $request->name, 'driver' => $request->driver, 'set_as_default' => $request->set_as_default, 'company_id' => $request->header('company')]);
+        $disk = self::create(['credentials' => $request->credentials, 'name' => $request->name, 'driver' => $request->driver, 'set_as_default' => $request->set_as_default, 'company_id' > $request->header('company')]);
         return $disk;
     }
     public static function updateDefaultDisks()


141) /var/www/app/Models/FileDisk.php:166    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function updateDisk($request)
     {
-        $data = ['credentials' => $request->credentials, 'name' => $request->name, 'driver' => $request->driver];
+        $data = ['name' => $request->name, 'driver' => $request->driver];
         if (!$this->setAsDefault()) {
             if ($request->set_as_default) {
                 self::updateDefaultDisks();


142) /var/www/app/Models/FileDisk.php:167    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function updateDisk($request)
     {
-        $data = ['credentials' => $request->credentials, 'name' => $request->name, 'driver' => $request->driver];
+        $data = ['credentials' > $request->credentials, 'name' => $request->name, 'driver' => $request->driver];
         if (!$this->setAsDefault()) {
             if ($request->set_as_default) {
                 self::updateDefaultDisks();


143) /var/www/app/Models/FileDisk.php:169    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function updateDisk($request)
     {
-        $data = ['credentials' => $request->credentials, 'name' => $request->name, 'driver' => $request->driver];
+        $data = ['credentials' => $request->credentials, 'name' => $request->name, 'driver' > $request->driver];
         if (!$this->setAsDefault()) {
             if ($request->set_as_default) {
                 self::updateDefaultDisks();


144) /var/www/app/Models/FileDisk.php:172    [M] LogicalNot

--- Original
+++ New
@@ @@
     public function updateDisk($request)
     {
         $data = ['credentials' => $request->credentials, 'name' => $request->name, 'driver' => $request->driver];
-        if (!$this->setAsDefault()) {
+        if ($this->setAsDefault()) {
             if ($request->set_as_default) {
                 self::updateDefaultDisks();
             }


145) /var/www/app/Models/FileDisk.php:182    [M] This

--- Original
+++ New
@@ @@
             $data['set_as_default'] = $request->set_as_default;
         }
         $this->update($data);
-        return $this;
+        return null;
     }
     public function setAsDefaultDisk()
     {


146) /var/www/app/Models/Invoice.php:164    [M] PublicVisibility

--- Original
+++ New
@@ @@
             return self::STATUS_DRAFT;
         }
     }
-    public function getFormattedNotesAttribute($value)
+    protected function getFormattedNotesAttribute($value)
     {
         return $this->getNotes();
     }


147) /var/www/app/Models/Invoice.php:303    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('invoices.company_id', $company);
     }
-    public function scopeWhereCustomer($query, $customer_id)
+    protected function scopeWhereCustomer($query, $customer_id)
     {
         $query->where('invoices.customer_id', $customer_id);
     }


148) /var/www/app/Models/Invoice.php:305    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCustomer($query, $customer_id)
     {
-        $query->where('invoices.customer_id', $customer_id);
+        
     }
     public function scopePaginateData($query, $limit)
     {


149) /var/www/app/Models/Invoice.php:674    [M] Assignment

--- Original
+++ New
@@ @@
     }
     public function addInvoicePayment($amount)
     {
-        $this->due_amount += $amount;
+        $this->due_amount = $amount;
         $this->base_due_amount = $this->due_amount * $this->exchange_rate;
         $this->changeInvoiceStatus($this->due_amount);
     }


150) /var/www/app/Models/Invoice.php:674    [M] PlusEqual

--- Original
+++ New
@@ @@
     }
     public function addInvoicePayment($amount)
     {
-        $this->due_amount += $amount;
+        $this->due_amount -= $amount;
         $this->base_due_amount = $this->due_amount * $this->exchange_rate;
         $this->changeInvoiceStatus($this->due_amount);
     }


151) /var/www/app/Models/Invoice.php:675    [M] Multiplication

--- Original
+++ New
@@ @@
     public function addInvoicePayment($amount)
     {
         $this->due_amount += $amount;
-        $this->base_due_amount = $this->due_amount * $this->exchange_rate;
+        $this->base_due_amount = $this->due_amount / $this->exchange_rate;
         $this->changeInvoiceStatus($this->due_amount);
     }
     public function subtractInvoicePayment($amount)


152) /var/www/app/Models/Invoice.php:677    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $this->due_amount += $amount;
         $this->base_due_amount = $this->due_amount * $this->exchange_rate;
-        $this->changeInvoiceStatus($this->due_amount);
+        
     }
     public function subtractInvoicePayment($amount)
     {


153) /var/www/app/Models/Invoice.php:682    [M] Assignment

--- Original
+++ New
@@ @@
     }
     public function subtractInvoicePayment($amount)
     {
-        $this->due_amount -= $amount;
+        $this->due_amount = $amount;
         $this->base_due_amount = $this->due_amount * $this->exchange_rate;
         $this->changeInvoiceStatus($this->due_amount);
     }


154) /var/www/app/Models/Invoice.php:682    [M] MinusEqual

--- Original
+++ New
@@ @@
     }
     public function subtractInvoicePayment($amount)
     {
-        $this->due_amount -= $amount;
+        $this->due_amount += $amount;
         $this->base_due_amount = $this->due_amount * $this->exchange_rate;
         $this->changeInvoiceStatus($this->due_amount);
     }


155) /var/www/app/Models/Invoice.php:683    [M] Multiplication

--- Original
+++ New
@@ @@
     public function subtractInvoicePayment($amount)
     {
         $this->due_amount -= $amount;
-        $this->base_due_amount = $this->due_amount * $this->exchange_rate;
+        $this->base_due_amount = $this->due_amount / $this->exchange_rate;
         $this->changeInvoiceStatus($this->due_amount);
     }
     public function changeInvoiceStatus($amount)


156) /var/www/app/Models/Invoice.php:685    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $this->due_amount -= $amount;
         $this->base_due_amount = $this->due_amount * $this->exchange_rate;
-        $this->changeInvoiceStatus($this->due_amount);
+        
     }
     public function changeInvoiceStatus($amount)
     {


157) /var/www/app/Models/Invoice.php:699    [M] FalseValue

--- Original
+++ New
@@ @@
         if ($amount == 0) {
             $this->status = Invoice::STATUS_COMPLETED;
             $this->paid_status = Invoice::STATUS_PAID;
-            $this->overdue = false;
+            $this->overdue = true;
         } elseif ($amount == $this->total) {
             $this->status = $this->getPreviousStatus();
             $this->paid_status = Invoice::STATUS_UNPAID;


158) /var/www/app/Models/InvoiceItem.php:49    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(RecurringInvoice::class);
     }
-    public function scopeWhereCompany($query, $company_id)
+    protected function scopeWhereCompany($query, $company_id)
     {
         $query->where('company_id', $company_id);
     }


159) /var/www/app/Models/InvoiceItem.php:51    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query, $company_id)
     {
-        $query->where('company_id', $company_id);
+        
     }
     public function scopeInvoicesBetween($query, $start, $end)
     {


160) /var/www/app/Models/InvoiceItem.php:54    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('company_id', $company_id);
     }
-    public function scopeInvoicesBetween($query, $start, $end)
+    protected function scopeInvoicesBetween($query, $start, $end)
     {
         $query->whereHas('invoice', function ($query) use($start, $end) {
             $query->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);


161) /var/www/app/Models/InvoiceItem.php:56    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeInvoicesBetween($query, $start, $end)
     {
-        $query->whereHas('invoice', function ($query) use($start, $end) {
-            $query->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
-        });
+        
     }
     public function scopeApplyInvoiceFilters($query, array $filters)
     {


162) /var/www/app/Models/InvoiceItem.php:57    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function scopeInvoicesBetween($query, $start, $end)
     {
         $query->whereHas('invoice', function ($query) use($start, $end) {
-            $query->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+            
         });
     }
     public function scopeApplyInvoiceFilters($query, array $filters)


163) /var/www/app/Models/InvoiceItem.php:59    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function scopeInvoicesBetween($query, $start, $end)
     {
         $query->whereHas('invoice', function ($query) use($start, $end) {
-            $query->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+            $query->whereBetween('invoice_date', [$end->format('Y-m-d')]);
         });
     }
     public function scopeApplyInvoiceFilters($query, array $filters)


164) /var/www/app/Models/InvoiceItem.php:64    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
         });
     }
-    public function scopeApplyInvoiceFilters($query, array $filters)
+    protected function scopeApplyInvoiceFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('from_date') && $filters->get('to_date')) {


165) /var/www/app/Models/InvoiceItem.php:68    [M] LogicalAnd

--- Original
+++ New
@@ @@
     public function scopeApplyInvoiceFilters($query, array $filters)
     {
         $filters = collect($filters);
-        if ($filters->get('from_date') && $filters->get('to_date')) {
+        if ($filters->get('from_date') || $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
             $query->invoicesBetween($start, $end);


166) /var/www/app/Models/InvoiceItem.php:71    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
-            $query->invoicesBetween($start, $end);
+            
         }
     }
     public function scopeItemAttributes($query)


167) /var/www/app/Models/Item.php:44    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Currency::class);
     }
-    public function scopeWhereSearch($query, $search)
+    protected function scopeWhereSearch($query, $search)
     {
         return $query->where('items.name', 'LIKE', '%' . $search . '%');
     }


168) /var/www/app/Models/Item.php:46    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        return $query->where('items.name', 'LIKE', '%' . $search . '%');
+        return $query->where('items.name', 'LIKE', $search . '%' . '%');
     }
     public function scopeWherePrice($query, $price)
     {


169) /var/www/app/Models/Item.php:46    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        return $query->where('items.name', 'LIKE', '%' . $search . '%');
+        return $query->where('items.name', 'LIKE', $search . '%');
     }
     public function scopeWherePrice($query, $price)
     {


170) /var/www/app/Models/Item.php:46    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        return $query->where('items.name', 'LIKE', '%' . $search . '%');
+        return $query->where('items.name', 'LIKE', '%' . '%');
     }
     public function scopeWherePrice($query, $price)
     {


171) /var/www/app/Models/Item.php:46    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        return $query->where('items.name', 'LIKE', '%' . $search . '%');
+        return $query->where('items.name', 'LIKE', '%' . '%' . $search);
     }
     public function scopeWherePrice($query, $price)
     {


172) /var/www/app/Models/Item.php:46    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        return $query->where('items.name', 'LIKE', '%' . $search . '%');
+        return $query->where('items.name', 'LIKE', '%' . $search);
     }
     public function scopeWherePrice($query, $price)
     {


173) /var/www/app/Models/Item.php:49    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('items.name', 'LIKE', '%' . $search . '%');
     }
-    public function scopeWherePrice($query, $price)
+    protected function scopeWherePrice($query, $price)
     {
         return $query->where('items.price', $price);
     }


174) /var/www/app/Models/Item.php:69    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orWhere('id', $item_id);
     }
-    public function scopeApplyFilters($query, array $filters)
+    protected function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('search')) {


175) /var/www/app/Models/Item.php:74    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $filters = collect($filters);
         if ($filters->get('search')) {
-            $query->whereSearch($filters->get('search'));
+            
         }
         if ($filters->get('price')) {
             $query->wherePrice($filters->get('price'));


176) /var/www/app/Models/Item.php:78    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
         if ($filters->get('price')) {
-            $query->wherePrice($filters->get('price'));
+            
         }
         if ($filters->get('unit_id')) {
             $query->whereUnit($filters->get('unit_id'));


177) /var/www/app/Models/Item.php:89    [M] LogicalOr

--- Original
+++ New
@@ @@
         if ($filters->get('item_id')) {
             $query->whereItem($filters->get('item_id'));
         }
-        if ($filters->get('orderByField') || $filters->get('orderBy')) {
+        if ($filters->get('orderByField') && $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'name';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
             $query->whereOrder($field, $orderBy);


178) /var/www/app/Models/Item.php:96    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereOrder($field, $orderBy);
         }
     }
-    public function scopePaginateData($query, $limit)
+    protected function scopePaginateData($query, $limit)
     {
         if ($limit == 'all') {
             return $query->get();


179) /var/www/app/Models/Item.php:98    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit = 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


180) /var/www/app/Models/Item.php:98    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit != 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


181) /var/www/app/Models/Item.php:105    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $query->paginate($limit);
     }
-    public function getFormattedCreatedAtAttribute($value)
+    protected function getFormattedCreatedAtAttribute($value)
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', request()->header('company'));
         return Carbon::parse($this->created_at)->format($dateFormat);


182) /var/www/app/Models/Item.php:119    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Tax::class)->where('invoice_item_id', null)->where('estimate_item_id', null);
     }
-    public function scopeWhereCompany($query)
+    protected function scopeWhereCompany($query)
     {
         $query->where('items.company_id', request()->header('company'));
     }


183) /var/www/app/Models/Item.php:121    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query)
     {
-        $query->where('items.company_id', request()->header('company'));
+        
     }
     public function invoiceItems()
     {


184) /var/www/app/Models/Item.php:134    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(EstimateItem::class);
     }
-    public static function createItem($request)
+    protected static function createItem($request)
     {
         $data = $request->validated();
         $data['company_id'] = $request->header('company');


185) /var/www/app/Models/Item.php:145    [M] TrueValue

--- Original
+++ New
@@ @@
         $item = self::create($data);
         if ($request->has('taxes')) {
             foreach ($request->taxes as $tax) {
-                $item->tax_per_item = true;
+                $item->tax_per_item = false;
                 $item->save();
                 $tax['company_id'] = $request->header('company');
                 $item->taxes()->create($tax);


186) /var/www/app/Models/Item.php:146    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($request->has('taxes')) {
             foreach ($request->taxes as $tax) {
                 $item->tax_per_item = true;
-                $item->save();
+                
                 $tax['company_id'] = $request->header('company');
                 $item->taxes()->create($tax);
             }


187) /var/www/app/Models/Item.php:161    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function updateItem($request)
     {
         $this->update($request->validated());
-        $this->taxes()->delete();
+        
         if ($request->has('taxes')) {
             foreach ($request->taxes as $tax) {
                 $this->tax_per_item = true;


188) /var/www/app/Models/Item.php:165    [M] TrueValue

--- Original
+++ New
@@ @@
         $this->taxes()->delete();
         if ($request->has('taxes')) {
             foreach ($request->taxes as $tax) {
-                $this->tax_per_item = true;
+                $this->tax_per_item = false;
                 $this->save();
                 $tax['company_id'] = $request->header('company');
                 $this->taxes()->create($tax);


189) /var/www/app/Models/Item.php:166    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($request->has('taxes')) {
             foreach ($request->taxes as $tax) {
                 $this->tax_per_item = true;
-                $this->save();
+                
                 $tax['company_id'] = $request->header('company');
                 $this->taxes()->create($tax);
             }


190) /var/www/app/Models/Note.php:19    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Company::class);
     }
-    public function scopeApplyFilters($query, array $filters)
+    protected function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('type')) {


191) /var/www/app/Models/Note.php:42    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('type', $type);
     }
-    public function scopeWhereCompany($query)
+    protected function scopeWhereCompany($query)
     {
         $query->where('notes.company_id', request()->header('company'));
     }
 }


192) /var/www/app/Models/Note.php:44    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query)
     {
-        $query->where('notes.company_id', request()->header('company'));
+        
     }
 }


193) /var/www/app/Models/Payment.php:53    [M] TrueValue

--- Original
+++ New
@@ @@
             GeneratePaymentPdfJob::dispatch($payment);
         });
         static::updated(function ($payment) {
-            GeneratePaymentPdfJob::dispatch($payment, true);
+            GeneratePaymentPdfJob::dispatch($payment, false);
         });
     }
     public function setSettingsAttribute($value)


194) /var/www/app/Models/Payment.php:53    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             GeneratePaymentPdfJob::dispatch($payment);
         });
         static::updated(function ($payment) {
-            GeneratePaymentPdfJob::dispatch($payment, true);
+            
         });
     }
     public function setSettingsAttribute($value)


195) /var/www/app/Models/Payment.php:123    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(PaymentMethod::class);
     }
-    public function sendPaymentData($data)
+    protected function sendPaymentData($data)
     {
         $data['payment'] = $this->toArray();
         $data['user'] = $this->customer->toArray();


196) /var/www/app/Models/Payment.php:129    [M] Ternary

--- Original
+++ New
@@ @@
         $data['user'] = $this->customer->toArray();
         $data['company'] = Company::find($this->company_id);
         $data['body'] = $this->getEmailBody($data['body']);
-        $data['attach']['data'] = $this->getEmailAttachmentSetting() ? $this->getPDFData() : null;
+        $data['attach']['data'] = $this->getEmailAttachmentSetting() ? null : $this->getPDFData();
         return $data;
     }
     public function send($data)


197) /var/www/app/Models/Payment.php:145    [M] PublicVisibility

--- Original
+++ New
@@ @@
         \Mail::to($data['to'])->send(new SendPaymentMail($data));
         return ['success' => true];
     }
-    public static function createPayment($request)
+    protected static function createPayment($request)
     {
         $data = $request->getPaymentPayload();
         if ($request->invoice_id) {


198) /var/www/app/Models/Payment.php:151    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $data = $request->getPaymentPayload();
         if ($request->invoice_id) {
             $invoice = Invoice::find($request->invoice_id);
-            $invoice->subtractInvoicePayment($request->amount);
+            
         }
         $payment = Payment::create($data);
         $payment->unique_hash = Hashids::connection(Payment::class)->encode($payment->id);


199) /var/www/app/Models/Payment.php:165    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $serial = (new SerialNumberFormatter())->setModel($payment)->setCompany($payment->company_id)->setCustomer($payment->customer_id)->setNextNumbers();
         $payment->sequence_number = $serial->nextSequenceNumber;
         $payment->customer_sequence_number = $serial->nextCustomerSequenceNumber;
-        $payment->save();
+        
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $payment['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($payment);


200) /var/www/app/Models/Payment.php:169    [M] CastString

--- Original
+++ New
@@ @@
         $payment->customer_sequence_number = $serial->nextCustomerSequenceNumber;
         $payment->save();
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $payment['currency_id'] !== $company_currency) {
+        if ($payment['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($payment);
         }
         $customFields = $request->customFields;


201) /var/www/app/Models/Payment.php:169    [M] NotIdentical

--- Original
+++ New
@@ @@
         $payment->customer_sequence_number = $serial->nextCustomerSequenceNumber;
         $payment->save();
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $payment['currency_id'] !== $company_currency) {
+        if ((string) $payment['currency_id'] === $company_currency) {
             ExchangeRateLog::addExchangeRateLog($payment);
         }
         $customFields = $request->customFields;


202) /var/www/app/Models/Payment.php:170    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $payment->save();
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $payment['currency_id'] !== $company_currency) {
-            ExchangeRateLog::addExchangeRateLog($payment);
+            
         }
         $customFields = $request->customFields;
         if ($customFields) {


203) /var/www/app/Models/Payment.php:179    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         if ($customFields) {
             $payment->addCustomFields($customFields);
         }
-        $payment = Payment::with(['customer', 'invoice', 'paymentMethod', 'fields'])->find($payment->id);
+        $payment = Payment::with(['invoice', 'paymentMethod', 'fields'])->find($payment->id);
         return $payment;
     }
     public function updatePayment($request)


204) /var/www/app/Models/Payment.php:193    [M] LogicalNot

--- Original
+++ New
@@ @@
     public function updatePayment($request)
     {
         $data = $request->getPaymentPayload();
-        if ($request->invoice_id && (!$this->invoice_id || $this->invoice_id !== $request->invoice_id)) {
+        if ($request->invoice_id && ($this->invoice_id || $this->invoice_id !== $request->invoice_id)) {
             $invoice = Invoice::find($request->invoice_id);
             $invoice->subtractInvoicePayment($request->amount);
         }


205) /var/www/app/Models/Payment.php:193    [M] NotIdentical

--- Original
+++ New
@@ @@
     public function updatePayment($request)
     {
         $data = $request->getPaymentPayload();
-        if ($request->invoice_id && (!$this->invoice_id || $this->invoice_id !== $request->invoice_id)) {
+        if ($request->invoice_id && (!$this->invoice_id || $this->invoice_id === $request->invoice_id)) {
             $invoice = Invoice::find($request->invoice_id);
             $invoice->subtractInvoicePayment($request->amount);
         }


206) /var/www/app/Models/Payment.php:193    [M] LogicalOr

--- Original
+++ New
@@ @@
     public function updatePayment($request)
     {
         $data = $request->getPaymentPayload();
-        if ($request->invoice_id && (!$this->invoice_id || $this->invoice_id !== $request->invoice_id)) {
+        if ($request->invoice_id && (!$this->invoice_id && $this->invoice_id !== $request->invoice_id)) {
             $invoice = Invoice::find($request->invoice_id);
             $invoice->subtractInvoicePayment($request->amount);
         }


207) /var/www/app/Models/Payment.php:193    [M] LogicalAnd

--- Original
+++ New
@@ @@
     public function updatePayment($request)
     {
         $data = $request->getPaymentPayload();
-        if ($request->invoice_id && (!$this->invoice_id || $this->invoice_id !== $request->invoice_id)) {
+        if ($request->invoice_id || (!$this->invoice_id || $this->invoice_id !== $request->invoice_id)) {
             $invoice = Invoice::find($request->invoice_id);
             $invoice->subtractInvoicePayment($request->amount);
         }


208) /var/www/app/Models/Payment.php:198    [M] LogicalNot

--- Original
+++ New
@@ @@
             $invoice = Invoice::find($request->invoice_id);
             $invoice->subtractInvoicePayment($request->amount);
         }
-        if ($this->invoice_id && (!$request->invoice_id || $this->invoice_id !== $request->invoice_id)) {
+        if ($this->invoice_id && ($request->invoice_id || $this->invoice_id !== $request->invoice_id)) {
             $invoice = Invoice::find($this->invoice_id);
             $invoice->addInvoicePayment($this->amount);
         }


209) /var/www/app/Models/Payment.php:198    [M] NotIdentical

--- Original
+++ New
@@ @@
             $invoice = Invoice::find($request->invoice_id);
             $invoice->subtractInvoicePayment($request->amount);
         }
-        if ($this->invoice_id && (!$request->invoice_id || $this->invoice_id !== $request->invoice_id)) {
+        if ($this->invoice_id && (!$request->invoice_id || $this->invoice_id === $request->invoice_id)) {
             $invoice = Invoice::find($this->invoice_id);
             $invoice->addInvoicePayment($this->amount);
         }


210) /var/www/app/Models/Payment.php:198    [M] LogicalOr

--- Original
+++ New
@@ @@
             $invoice = Invoice::find($request->invoice_id);
             $invoice->subtractInvoicePayment($request->amount);
         }
-        if ($this->invoice_id && (!$request->invoice_id || $this->invoice_id !== $request->invoice_id)) {
+        if ($this->invoice_id && (!$request->invoice_id && $this->invoice_id !== $request->invoice_id)) {
             $invoice = Invoice::find($this->invoice_id);
             $invoice->addInvoicePayment($this->amount);
         }


211) /var/www/app/Models/Payment.php:198    [M] LogicalAnd

--- Original
+++ New
@@ @@
             $invoice = Invoice::find($request->invoice_id);
             $invoice->subtractInvoicePayment($request->amount);
         }
-        if ($this->invoice_id && (!$request->invoice_id || $this->invoice_id !== $request->invoice_id)) {
+        if ($this->invoice_id || (!$request->invoice_id || $this->invoice_id !== $request->invoice_id)) {
             $invoice = Invoice::find($this->invoice_id);
             $invoice->addInvoicePayment($this->amount);
         }


212) /var/www/app/Models/Payment.php:203    [M] Identical

--- Original
+++ New
@@ @@
             $invoice = Invoice::find($this->invoice_id);
             $invoice->addInvoicePayment($this->amount);
         }
-        if ($this->invoice_id && $this->invoice_id === $request->invoice_id && $request->amount !== $this->amount) {
+        if ($this->invoice_id && $this->invoice_id !== $request->invoice_id && $request->amount !== $this->amount) {
             $invoice = Invoice::find($this->invoice_id);
             $invoice->addInvoicePayment($this->amount);
             $invoice->subtractInvoicePayment($request->amount);


213) /var/www/app/Models/Payment.php:203    [M] LogicalAnd

--- Original
+++ New
@@ @@
             $invoice = Invoice::find($this->invoice_id);
             $invoice->addInvoicePayment($this->amount);
         }
-        if ($this->invoice_id && $this->invoice_id === $request->invoice_id && $request->amount !== $this->amount) {
+        if (($this->invoice_id || $this->invoice_id === $request->invoice_id) && $request->amount !== $this->amount) {
             $invoice = Invoice::find($this->invoice_id);
             $invoice->addInvoicePayment($this->amount);
             $invoice->subtractInvoicePayment($request->amount);


214) /var/www/app/Models/Payment.php:203    [M] NotIdentical

--- Original
+++ New
@@ @@
             $invoice = Invoice::find($this->invoice_id);
             $invoice->addInvoicePayment($this->amount);
         }
-        if ($this->invoice_id && $this->invoice_id === $request->invoice_id && $request->amount !== $this->amount) {
+        if ($this->invoice_id && $this->invoice_id === $request->invoice_id && $request->amount === $this->amount) {
             $invoice = Invoice::find($this->invoice_id);
             $invoice->addInvoicePayment($this->amount);
             $invoice->subtractInvoicePayment($request->amount);


215) /var/www/app/Models/Payment.php:203    [M] LogicalAnd

--- Original
+++ New
@@ @@
             $invoice = Invoice::find($this->invoice_id);
             $invoice->addInvoicePayment($this->amount);
         }
-        if ($this->invoice_id && $this->invoice_id === $request->invoice_id && $request->amount !== $this->amount) {
+        if ($this->invoice_id && $this->invoice_id === $request->invoice_id || $request->amount !== $this->amount) {
             $invoice = Invoice::find($this->invoice_id);
             $invoice->addInvoicePayment($this->amount);
             $invoice->subtractInvoicePayment($request->amount);


216) /var/www/app/Models/Payment.php:205    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         if ($this->invoice_id && $this->invoice_id === $request->invoice_id && $request->amount !== $this->amount) {
             $invoice = Invoice::find($this->invoice_id);
-            $invoice->addInvoicePayment($this->amount);
+            
             $invoice->subtractInvoicePayment($request->amount);
         }
         $serial = (new SerialNumberFormatter())->setModel($this)->setCompany($this->company_id)->setCustomer($request->customer_id)->setModelObject($this->id)->setNextNumbers();


217) /var/www/app/Models/Payment.php:206    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($this->invoice_id && $this->invoice_id === $request->invoice_id && $request->amount !== $this->amount) {
             $invoice = Invoice::find($this->invoice_id);
             $invoice->addInvoicePayment($this->amount);
-            $invoice->subtractInvoicePayment($request->amount);
+            
         }
         $serial = (new SerialNumberFormatter())->setModel($this)->setCompany($this->company_id)->setCustomer($request->customer_id)->setModelObject($this->id)->setNextNumbers();
         $data['customer_sequence_number'] = $serial->nextCustomerSequenceNumber;


218) /var/www/app/Models/Payment.php:221    [M] CastString

--- Original
+++ New
@@ @@
         $data['customer_sequence_number'] = $serial->nextCustomerSequenceNumber;
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $data['currency_id'] !== $company_currency) {
+        if ($data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);
         }
         $customFields = $request->customFields;


219) /var/www/app/Models/Payment.php:221    [M] NotIdentical

--- Original
+++ New
@@ @@
         $data['customer_sequence_number'] = $serial->nextCustomerSequenceNumber;
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $data['currency_id'] !== $company_currency) {
+        if ((string) $data['currency_id'] === $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);
         }
         $customFields = $request->customFields;


220) /var/www/app/Models/Payment.php:222    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $data['currency_id'] !== $company_currency) {
-            ExchangeRateLog::addExchangeRateLog($this);
+            
         }
         $customFields = $request->customFields;
         if ($customFields) {


221) /var/www/app/Models/Payment.php:231    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         if ($customFields) {
             $this->updateCustomFields($customFields);
         }
-        $payment = Payment::with(['customer', 'invoice', 'paymentMethod'])->find($this->id);
+        $payment = Payment::with(['invoice', 'paymentMethod'])->find($this->id);
         return $payment;
     }
     public static function deletePayments($ids)


222) /var/www/app/Models/Payment.php:241    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $payment = Payment::with(['customer', 'invoice', 'paymentMethod'])->find($this->id);
         return $payment;
     }
-    public static function deletePayments($ids)
+    protected static function deletePayments($ids)
     {
         foreach ($ids as $id) {
             $payment = Payment::find($id);


223) /var/www/app/Models/Payment.php:243    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public static function deletePayments($ids)
     {
-        foreach ($ids as $id) {
+        foreach (array() as $id) {
             $payment = Payment::find($id);
             if ($payment->invoice_id != null) {
                 $invoice = Invoice::find($payment->invoice_id);


224) /var/www/app/Models/Payment.php:260    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $invoice->status = $invoice->getPreviousStatus();
                 $invoice->save();
             }
-            $payment->delete();
+            
         }
         return true;
     }


225) /var/www/app/Models/Payment.php:263    [M] TrueValue

--- Original
+++ New
@@ @@
             }
             $payment->delete();
         }
-        return true;
+        return false;
     }
     public function scopeWhereSearch($query, $search)
     {


226) /var/www/app/Models/Payment.php:266    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return true;
     }
-    public function scopeWhereSearch($query, $search)
+    protected function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {


227) /var/www/app/Models/Payment.php:268    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        foreach (explode(' ', $search) as $term) {
+        foreach (array() as $term) {
             $query->whereHas('customer', function ($query) use($term) {
                 $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });


228) /var/www/app/Models/Payment.php:269    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
-            });
+            
         }
     }
     public function scopePaymentNumber($query, $paymentNumber)


229) /var/www/app/Models/Payment.php:270    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%' . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


230) /var/www/app/Models/Payment.php:270    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


231) /var/www/app/Models/Payment.php:270    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


232) /var/www/app/Models/Payment.php:270    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%' . $term)->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


233) /var/www/app/Models/Payment.php:270    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term)->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


234) /var/www/app/Models/Payment.php:270    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                
             });
         }
     }


235) /var/www/app/Models/Payment.php:271    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', $term . '%' . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


236) /var/www/app/Models/Payment.php:271    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


237) /var/www/app/Models/Payment.php:271    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


238) /var/www/app/Models/Payment.php:271    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . '%' . $term)->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


239) /var/www/app/Models/Payment.php:271    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term)->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


240) /var/www/app/Models/Payment.php:272    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', $term . '%' . '%');
             });
         }
     }


241) /var/www/app/Models/Payment.php:272    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', $term . '%');
             });
         }
     }


242) /var/www/app/Models/Payment.php:272    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . '%');
             });
         }
     }


243) /var/www/app/Models/Payment.php:272    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . '%' . $term);
             });
         }
     }


244) /var/www/app/Models/Payment.php:272    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term);
             });
         }
     }


245) /var/www/app/Models/Payment.php:277    [M] PublicVisibility

--- Original
+++ New
@@ @@
             });
         }
     }
-    public function scopePaymentNumber($query, $paymentNumber)
+    protected function scopePaymentNumber($query, $paymentNumber)
     {
         return $query->where('payments.payment_number', 'LIKE', '%' . $paymentNumber . '%');
     }


246) /var/www/app/Models/Payment.php:279    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopePaymentNumber($query, $paymentNumber)
     {
-        return $query->where('payments.payment_number', 'LIKE', '%' . $paymentNumber . '%');
+        return $query->where('payments.payment_number', 'LIKE', $paymentNumber . '%' . '%');
     }
     public function scopePaymentMethod($query, $paymentMethodId)
     {


247) /var/www/app/Models/Payment.php:279    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopePaymentNumber($query, $paymentNumber)
     {
-        return $query->where('payments.payment_number', 'LIKE', '%' . $paymentNumber . '%');
+        return $query->where('payments.payment_number', 'LIKE', $paymentNumber . '%');
     }
     public function scopePaymentMethod($query, $paymentMethodId)
     {


248) /var/www/app/Models/Payment.php:279    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopePaymentNumber($query, $paymentNumber)
     {
-        return $query->where('payments.payment_number', 'LIKE', '%' . $paymentNumber . '%');
+        return $query->where('payments.payment_number', 'LIKE', '%' . '%');
     }
     public function scopePaymentMethod($query, $paymentMethodId)
     {


249) /var/www/app/Models/Payment.php:279    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopePaymentNumber($query, $paymentNumber)
     {
-        return $query->where('payments.payment_number', 'LIKE', '%' . $paymentNumber . '%');
+        return $query->where('payments.payment_number', 'LIKE', '%' . '%' . $paymentNumber);
     }
     public function scopePaymentMethod($query, $paymentMethodId)
     {


250) /var/www/app/Models/Payment.php:279    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopePaymentNumber($query, $paymentNumber)
     {
-        return $query->where('payments.payment_number', 'LIKE', '%' . $paymentNumber . '%');
+        return $query->where('payments.payment_number', 'LIKE', '%' . $paymentNumber);
     }
     public function scopePaymentMethod($query, $paymentMethodId)
     {


251) /var/www/app/Models/Payment.php:301    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $filters = collect($filters);
         if ($filters->get('search')) {
-            $query->whereSearch($filters->get('search'));
+            
         }
         if ($filters->get('payment_number')) {
             $query->paymentNumber($filters->get('payment_number'));


252) /var/www/app/Models/Payment.php:305    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
         if ($filters->get('payment_number')) {
-            $query->paymentNumber($filters->get('payment_number'));
+            
         }
         if ($filters->get('payment_id')) {
             $query->wherePayment($filters->get('payment_id'));


253) /var/www/app/Models/Payment.php:356    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('payments.company_id', request()->header('company'));
     }
-    public function scopeWhereCustomer($query, $customer_id)
+    protected function scopeWhereCustomer($query, $customer_id)
     {
         $query->where('payments.customer_id', $customer_id);
     }


254) /var/www/app/Models/Payment.php:358    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCustomer($query, $customer_id)
     {
-        $query->where('payments.customer_id', $customer_id);
+        
     }
     public function getPDFData()
     {


255) /var/www/app/Models/Payment.php:407    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $format = CompanySetting::getSetting('payment_from_customer_address_format', $this->company_id);
         return $this->getFormattedString($format);
     }
-    public function getEmailAttachmentSetting()
+    protected function getEmailAttachmentSetting()
     {
         $paymentAsAttachment = CompanySetting::getSetting('payment_email_attachment', $this->company_id);
         if ($paymentAsAttachment == 'NO') {


256) /var/www/app/Models/Payment.php:411    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     public function getEmailAttachmentSetting()
     {
         $paymentAsAttachment = CompanySetting::getSetting('payment_email_attachment', $this->company_id);
-        if ($paymentAsAttachment == 'NO') {
+        if ($paymentAsAttachment = 'NO') {
             return false;
         }
         return true;


257) /var/www/app/Models/Payment.php:411    [M] Equal

--- Original
+++ New
@@ @@
     public function getEmailAttachmentSetting()
     {
         $paymentAsAttachment = CompanySetting::getSetting('payment_email_attachment', $this->company_id);
-        if ($paymentAsAttachment == 'NO') {
+        if ($paymentAsAttachment != 'NO') {
             return false;
         }
         return true;


258) /var/www/app/Models/Payment.php:412    [M] FalseValue

--- Original
+++ New
@@ @@
     {
         $paymentAsAttachment = CompanySetting::getSetting('payment_email_attachment', $this->company_id);
         if ($paymentAsAttachment == 'NO') {
-            return false;
+            return true;
         }
         return true;
     }


259) /var/www/app/Models/Payment.php:423    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->getFormattedString($this->notes);
     }
-    public function getEmailBody($body)
+    protected function getEmailBody($body)
     {
         $values = array_merge($this->getFieldsArray(), $this->getExtraFields());
         $body = strtr($body, $values);


260) /var/www/app/Models/Payment.php:425    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
     }
     public function getEmailBody($body)
     {
-        $values = array_merge($this->getFieldsArray(), $this->getExtraFields());
+        $values = $this->getFieldsArray();
         $body = strtr($body, $values);
         return preg_replace('/{(.*?)}/', '', $body);
     }


261) /var/www/app/Models/Payment.php:425    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
     }
     public function getEmailBody($body)
     {
-        $values = array_merge($this->getFieldsArray(), $this->getExtraFields());
+        $values = $this->getExtraFields();
         $body = strtr($body, $values);
         return preg_replace('/{(.*?)}/', '', $body);
     }


262) /var/www/app/Models/Payment.php:429    [M] FunctionCall

--- Original
+++ New
@@ @@
     {
         $values = array_merge($this->getFieldsArray(), $this->getExtraFields());
         $body = strtr($body, $values);
-        return preg_replace('/{(.*?)}/', '', $body);
+        preg_replace('/{(.*?)}/', '', $body);
+        return null;
     }
     public function getExtraFields()
     {


263) /var/www/app/Models/Payment.php:432    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $body = strtr($body, $values);
         return preg_replace('/{(.*?)}/', '', $body);
     }
-    public function getExtraFields()
+    protected function getExtraFields()
     {
         return ['{PAYMENT_DATE}' => $this->formattedPaymentDate, '{PAYMENT_MODE}' => $this->paymentMethod ? $this->paymentMethod->name : null, '{PAYMENT_NUMBER}' => $this->payment_number, '{PAYMENT_AMOUNT}' => $this->reference_number];
     }


264) /var/www/app/Models/Payment.php:434    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getExtraFields()
     {
-        return ['{PAYMENT_DATE}' => $this->formattedPaymentDate, '{PAYMENT_MODE}' => $this->paymentMethod ? $this->paymentMethod->name : null, '{PAYMENT_NUMBER}' => $this->payment_number, '{PAYMENT_AMOUNT}' => $this->reference_number];
+        return ['{PAYMENT_MODE}' => $this->paymentMethod ? $this->paymentMethod->name : null, '{PAYMENT_NUMBER}' => $this->payment_number, '{PAYMENT_AMOUNT}' => $this->reference_number];
     }
     public static function generatePayment($transaction)
     {


265) /var/www/app/Models/Payment.php:435    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function getExtraFields()
     {
-        return ['{PAYMENT_DATE}' => $this->formattedPaymentDate, '{PAYMENT_MODE}' => $this->paymentMethod ? $this->paymentMethod->name : null, '{PAYMENT_NUMBER}' => $this->payment_number, '{PAYMENT_AMOUNT}' => $this->reference_number];
+        return ['{PAYMENT_DATE}' > $this->formattedPaymentDate, '{PAYMENT_MODE}' => $this->paymentMethod ? $this->paymentMethod->name : null, '{PAYMENT_NUMBER}' => $this->payment_number, '{PAYMENT_AMOUNT}' => $this->reference_number];
     }
     public static function generatePayment($transaction)
     {


266) /var/www/app/Models/Payment.php:436    [M] Ternary

--- Original
+++ New
@@ @@
     }
     public function getExtraFields()
     {
-        return ['{PAYMENT_DATE}' => $this->formattedPaymentDate, '{PAYMENT_MODE}' => $this->paymentMethod ? $this->paymentMethod->name : null, '{PAYMENT_NUMBER}' => $this->payment_number, '{PAYMENT_AMOUNT}' => $this->reference_number];
+        return ['{PAYMENT_DATE}' => $this->formattedPaymentDate, '{PAYMENT_MODE}' => $this->paymentMethod ? null : $this->paymentMethod->name, '{PAYMENT_NUMBER}' => $this->payment_number, '{PAYMENT_AMOUNT}' => $this->reference_number];
     }
     public static function generatePayment($transaction)
     {


267) /var/www/app/Models/Payment.php:437    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function getExtraFields()
     {
-        return ['{PAYMENT_DATE}' => $this->formattedPaymentDate, '{PAYMENT_MODE}' => $this->paymentMethod ? $this->paymentMethod->name : null, '{PAYMENT_NUMBER}' => $this->payment_number, '{PAYMENT_AMOUNT}' => $this->reference_number];
+        return ['{PAYMENT_DATE}' => $this->formattedPaymentDate, '{PAYMENT_MODE}' => $this->paymentMethod ? $this->paymentMethod->name : null, '{PAYMENT_NUMBER}' > $this->payment_number, '{PAYMENT_AMOUNT}' => $this->reference_number];
     }
     public static function generatePayment($transaction)
     {


268) /var/www/app/Models/Payment.php:438    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function getExtraFields()
     {
-        return ['{PAYMENT_DATE}' => $this->formattedPaymentDate, '{PAYMENT_MODE}' => $this->paymentMethod ? $this->paymentMethod->name : null, '{PAYMENT_NUMBER}' => $this->payment_number, '{PAYMENT_AMOUNT}' => $this->reference_number];
+        return ['{PAYMENT_DATE}' => $this->formattedPaymentDate, '{PAYMENT_MODE}' => $this->paymentMethod ? $this->paymentMethod->name : null, '{PAYMENT_NUMBER}' => $this->payment_number, '{PAYMENT_AMOUNT}' > $this->reference_number];
     }
     public static function generatePayment($transaction)
     {


269) /var/www/app/Models/PaymentMethod.php:49    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('company_id', $id);
     }
-    public function scopeWhereCompany($query)
+    protected function scopeWhereCompany($query)
     {
         $query->where('company_id', request()->header('company'));
     }


270) /var/www/app/Models/PaymentMethod.php:51    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query)
     {
-        $query->where('company_id', request()->header('company'));
+        
     }
     public function scopeWherePaymentMethod($query, $payment_id)
     {


271) /var/www/app/Models/PaymentMethod.php:64    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('name', 'LIKE', '%' . $search . '%');
     }
-    public function scopeApplyFilters($query, array $filters)
+    protected function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('method_id')) {


272) /var/www/app/Models/PaymentMethod.php:81    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
     }
-    public function scopePaginateData($query, $limit)
+    protected function scopePaginateData($query, $limit)
     {
         if ($limit == 'all') {
             return $query->get();


273) /var/www/app/Models/PaymentMethod.php:83    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit = 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


274) /var/www/app/Models/PaymentMethod.php:83    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit != 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


275) /var/www/app/Models/PaymentMethod.php:90    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $query->paginate($limit);
     }
-    public static function createPaymentMethod($request)
+    protected static function createPaymentMethod($request)
     {
         $data = $request->getPaymentMethodPayload();
         $paymentMethod = self::create($data);


276) /var/www/app/Models/RecurringInvoice.php:47    [M] PublicVisibility

--- Original
+++ New
@@ @@
     public const ACTIVE = 'ACTIVE';
     protected $appends = ['formattedCreatedAt', 'formattedStartsAt', 'formattedNextInvoiceAt', 'formattedLimitDate'];
     protected $casts = ['exchange_rate' => 'float', 'send_automatically' => 'boolean'];
-    public function getFormattedStartsAtAttribute()
+    protected function getFormattedStartsAtAttribute()
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->starts_at)->format($dateFormat);


277) /var/www/app/Models/RecurringInvoice.php:54    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->starts_at)->format($dateFormat);
     }
-    public function getFormattedNextInvoiceAtAttribute()
+    protected function getFormattedNextInvoiceAtAttribute()
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->next_invoice_at)->format($dateFormat);


278) /var/www/app/Models/RecurringInvoice.php:61    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->next_invoice_at)->format($dateFormat);
     }
-    public function getFormattedLimitDateAttribute()
+    protected function getFormattedLimitDateAttribute()
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->limit_date)->format($dateFormat);


279) /var/www/app/Models/RecurringInvoice.php:68    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->limit_date)->format($dateFormat);
     }
-    public function getFormattedCreatedAtAttribute()
+    protected function getFormattedCreatedAtAttribute()
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->created_at)->format($dateFormat);


280) /var/www/app/Models/RecurringInvoice.php:110    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Currency::class);
     }
-    public function scopeWhereCompany($query)
+    protected function scopeWhereCompany($query)
     {
         $query->where('recurring_invoices.company_id', request()->header('company'));
     }


281) /var/www/app/Models/RecurringInvoice.php:112    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query)
     {
-        $query->where('recurring_invoices.company_id', request()->header('company'));
+        
     }
     public function scopePaginateData($query, $limit)
     {


282) /var/www/app/Models/RecurringInvoice.php:115    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('recurring_invoices.company_id', request()->header('company'));
     }
-    public function scopePaginateData($query, $limit)
+    protected function scopePaginateData($query, $limit)
     {
         if ($limit == 'all') {
             return $query->get();


283) /var/www/app/Models/RecurringInvoice.php:117    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit = 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


284) /var/www/app/Models/RecurringInvoice.php:117    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit != 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


285) /var/www/app/Models/RecurringInvoice.php:158    [M] PublicVisibility

--- Original
+++ New
@@ @@
             });
         }
     }
-    public function scopeApplyFilters($query, array $filters)
+    protected function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('status') && $filters->get('status') !== 'ALL') {


286) /var/www/app/Models/RecurringInvoice.php:162    [M] NotIdentical

--- Original
+++ New
@@ @@
     public function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
-        if ($filters->get('status') && $filters->get('status') !== 'ALL') {
+        if ($filters->get('status') && $filters->get('status') === 'ALL') {
             $query->whereStatus($filters->get('status'));
         }
         if ($filters->get('search')) {


287) /var/www/app/Models/RecurringInvoice.php:162    [M] LogicalAnd

--- Original
+++ New
@@ @@
     public function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
-        if ($filters->get('status') && $filters->get('status') !== 'ALL') {
+        if ($filters->get('status') || $filters->get('status') !== 'ALL') {
             $query->whereStatus($filters->get('status'));
         }
         if ($filters->get('search')) {


288) /var/www/app/Models/RecurringInvoice.php:170    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if ($filters->get('search')) {
             $query->whereSearch($filters->get('search'));
         }
-        if ($filters->get('from_date') && $filters->get('to_date')) {
+        if ($filters->get('from_date') || $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
             $query->recurringInvoicesStartBetween($start, $end);


289) /var/www/app/Models/RecurringInvoice.php:180    [M] LogicalOr

--- Original
+++ New
@@ @@
         if ($filters->get('customer_id')) {
             $query->whereCustomer($filters->get('customer_id'));
         }
-        if ($filters->get('orderByField') || $filters->get('orderBy')) {
+        if ($filters->get('orderByField') && $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'created_at';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
             $query->whereOrder($field, $orderBy);


290) /var/www/app/Models/RecurringInvoice.php:187    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereOrder($field, $orderBy);
         }
     }
-    public static function createFromRequest(RecurringInvoiceRequest $request)
+    protected static function createFromRequest(RecurringInvoiceRequest $request)
     {
         $recurringInvoice = self::create($request->getRecurringInvoicePayload());
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));


291) /var/www/app/Models/RecurringInvoice.php:193    [M] CastString

--- Original
+++ New
@@ @@
     {
         $recurringInvoice = self::create($request->getRecurringInvoicePayload());
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $recurringInvoice['currency_id'] !== $company_currency) {
+        if ($recurringInvoice['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($recurringInvoice);
         }
         self::createItems($recurringInvoice, $request->items);


292) /var/www/app/Models/RecurringInvoice.php:193    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
         $recurringInvoice = self::create($request->getRecurringInvoicePayload());
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $recurringInvoice['currency_id'] !== $company_currency) {
+        if ((string) $recurringInvoice['currency_id'] === $company_currency) {
             ExchangeRateLog::addExchangeRateLog($recurringInvoice);
         }
         self::createItems($recurringInvoice, $request->items);


293) /var/www/app/Models/RecurringInvoice.php:194    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $recurringInvoice = self::create($request->getRecurringInvoicePayload());
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $recurringInvoice['currency_id'] !== $company_currency) {
-            ExchangeRateLog::addExchangeRateLog($recurringInvoice);
+            
         }
         self::createItems($recurringInvoice, $request->items);
         if ($request->has('taxes') && !empty($request->taxes)) {


294) /var/www/app/Models/RecurringInvoice.php:197    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ((string) $recurringInvoice['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($recurringInvoice);
         }
-        self::createItems($recurringInvoice, $request->items);
+        
         if ($request->has('taxes') && !empty($request->taxes)) {
             self::createTaxes($recurringInvoice, $request->taxes);
         }


295) /var/www/app/Models/RecurringInvoice.php:199    [M] LogicalNot

--- Original
+++ New
@@ @@
             ExchangeRateLog::addExchangeRateLog($recurringInvoice);
         }
         self::createItems($recurringInvoice, $request->items);
-        if ($request->has('taxes') && !empty($request->taxes)) {
+        if ($request->has('taxes') && empty($request->taxes)) {
             self::createTaxes($recurringInvoice, $request->taxes);
         }
         if ($request->customFields) {


296) /var/www/app/Models/RecurringInvoice.php:199    [M] LogicalAnd

--- Original
+++ New
@@ @@
             ExchangeRateLog::addExchangeRateLog($recurringInvoice);
         }
         self::createItems($recurringInvoice, $request->items);
-        if ($request->has('taxes') && !empty($request->taxes)) {
+        if ($request->has('taxes') || !empty($request->taxes)) {
             self::createTaxes($recurringInvoice, $request->taxes);
         }
         if ($request->customFields) {


297) /var/www/app/Models/RecurringInvoice.php:214    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function updateFromRequest(RecurringInvoiceRequest $request)
     {
         $data = $request->getRecurringInvoicePayload();
-        $this->update($data);
+        
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);


298) /var/www/app/Models/RecurringInvoice.php:218    [M] CastString

--- Original
+++ New
@@ @@
         $data = $request->getRecurringInvoicePayload();
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $data['currency_id'] !== $company_currency) {
+        if ($data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);
         }
         $this->items()->delete();


299) /var/www/app/Models/RecurringInvoice.php:218    [M] NotIdentical

--- Original
+++ New
@@ @@
         $data = $request->getRecurringInvoicePayload();
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $data['currency_id'] !== $company_currency) {
+        if ((string) $data['currency_id'] === $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);
         }
         $this->items()->delete();


300) /var/www/app/Models/RecurringInvoice.php:219    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $data['currency_id'] !== $company_currency) {
-            ExchangeRateLog::addExchangeRateLog($this);
+            
         }
         $this->items()->delete();
         self::createItems($this, $request->items);


301) /var/www/app/Models/RecurringInvoice.php:222    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ((string) $data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);
         }
-        $this->items()->delete();
+        
         self::createItems($this, $request->items);
         $this->taxes()->delete();
         if ($request->has('taxes') && !empty($request->taxes)) {


302) /var/www/app/Models/RecurringInvoice.php:223    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             ExchangeRateLog::addExchangeRateLog($this);
         }
         $this->items()->delete();
-        self::createItems($this, $request->items);
+        
         $this->taxes()->delete();
         if ($request->has('taxes') && !empty($request->taxes)) {
             self::createTaxes($this, $request->taxes);


303) /var/www/app/Models/RecurringInvoice.php:225    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         $this->items()->delete();
         self::createItems($this, $request->items);
-        $this->taxes()->delete();
+        
         if ($request->has('taxes') && !empty($request->taxes)) {
             self::createTaxes($this, $request->taxes);
         }


304) /var/www/app/Models/RecurringInvoice.php:226    [M] LogicalNot

--- Original
+++ New
@@ @@
         $this->items()->delete();
         self::createItems($this, $request->items);
         $this->taxes()->delete();
-        if ($request->has('taxes') && !empty($request->taxes)) {
+        if ($request->has('taxes') && empty($request->taxes)) {
             self::createTaxes($this, $request->taxes);
         }
         if ($request->customFields) {


305) /var/www/app/Models/RecurringInvoice.php:226    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $this->items()->delete();
         self::createItems($this, $request->items);
         $this->taxes()->delete();
-        if ($request->has('taxes') && !empty($request->taxes)) {
+        if ($request->has('taxes') || !empty($request->taxes)) {
             self::createTaxes($this, $request->taxes);
         }
         if ($request->customFields) {


306) /var/www/app/Models/RecurringInvoice.php:234    [M] This

--- Original
+++ New
@@ @@
         if ($request->customFields) {
             $this->updateCustomFields($request->customFields);
         }
-        return $this;
+        return null;
     }
     public static function createItems($recurringInvoice, $invoiceItems)
     {


307) /var/www/app/Models/RecurringInvoice.php:237    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $this;
     }
-    public static function createItems($recurringInvoice, $invoiceItems)
+    protected static function createItems($recurringInvoice, $invoiceItems)
     {
         foreach ($invoiceItems as $invoiceItem) {
             $invoiceItem['company_id'] = $recurringInvoice->company_id;


308) /var/www/app/Models/RecurringInvoice.php:239    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public static function createItems($recurringInvoice, $invoiceItems)
     {
-        foreach ($invoiceItems as $invoiceItem) {
+        foreach (array() as $invoiceItem) {
             $invoiceItem['company_id'] = $recurringInvoice->company_id;
             $item = $recurringInvoice->items()->create($invoiceItem);
             if (array_key_exists('taxes', $invoiceItem) && $invoiceItem['taxes']) {


309) /var/www/app/Models/RecurringInvoice.php:393    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $this->save();
         }
     }
-    public static function getNextInvoiceDate($frequency, $starts_at)
+    protected static function getNextInvoiceDate($frequency, $starts_at)
     {
         $cron = new Cron\CronExpression($frequency);
         return $cron->getNextRunDate($starts_at)->format('Y-m-d H:i:s');


310) /var/www/app/Models/RecurringInvoice.php:408    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->next_invoice_at = $nextInvoiceAt;
         $this->save();
     }
-    public static function deleteRecurringInvoice($ids)
+    protected static function deleteRecurringInvoice($ids)
     {
         foreach ($ids as $id) {
             $recurringInvoice = self::find($id);


311) /var/www/app/Models/RecurringInvoice.php:428    [M] TrueValue

--- Original
+++ New
@@ @@
             }
             $recurringInvoice->delete();
         }
-        return true;
+        return false;
     }
 }


312) /var/www/app/Models/Setting.php:46    [M] PublicVisibility

--- Original
+++ New
@@ @@
             self::updateOrCreate(['option' => $key], ['option' => $key, 'value' => $value]);
         }
     }
-    public static function getSetting($key)
+    protected static function getSetting($key)
     {
         $setting = static::whereOption($key)->first();
         if ($setting) {


313) /var/www/app/Models/TaxType.php:44    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orWhere('id', $tax_type_id);
     }
-    public function scopeApplyFilters($query, array $filters)
+    protected function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('tax_type_id')) {


314) /var/www/app/Models/TaxType.php:60    [M] LogicalOr

--- Original
+++ New
@@ @@
         if ($filters->get('search')) {
             $query->whereSearch($filters->get('search'));
         }
-        if ($filters->get('orderByField') || $filters->get('orderBy')) {
+        if ($filters->get('orderByField') && $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'payment_number';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
             $query->whereOrder($field, $orderBy);


315) /var/www/app/Models/TaxType.php:77    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('name', 'LIKE', '%' . $search . '%');
     }
-    public function scopePaginateData($query, $limit)
+    protected function scopePaginateData($query, $limit)
     {
         if ($limit == 'all') {
             return $query->get();


316) /var/www/app/Models/TaxType.php:79    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit = 'all') {
             return $query->get();
         }
         return $query->paginate($limit);
     }
 }


317) /var/www/app/Models/TaxType.php:79    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit != 'all') {
             return $query->get();
         }
         return $query->paginate($limit);
     }
 }


318) /var/www/app/Models/Unit.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Company::class);
     }
-    public function scopeWhereCompany($query)
+    protected function scopeWhereCompany($query)
     {
         $query->where('company_id', request()->header('company'));
     }


319) /var/www/app/Models/Unit.php:26    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query)
     {
-        $query->where('company_id', request()->header('company'));
+        
     }
     public function scopeWhereUnit($query, $unit_id)
     {


320) /var/www/app/Models/Unit.php:39    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('name', 'LIKE', '%' . $search . '%');
     }
-    public function scopeApplyFilters($query, array $filters)
+    protected function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('search')) {


321) /var/www/app/Models/Unit.php:58    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $query;
     }
-    public function scopePaginateData($query, $limit)
+    protected function scopePaginateData($query, $limit)
     {
         if ($limit == 'all') {
             return $query->get();


322) /var/www/app/Models/Unit.php:60    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit = 'all') {
             return $query->get();
         }
         return $query->paginate($limit);
     }
 }


323) /var/www/app/Models/Unit.php:60    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit != 'all') {
             return $query->get();
         }
         return $query->paginate($limit);
     }
 }


324) /var/www/app/Models/User.php:218    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $query->paginate($limit);
     }
-    public function scopeApplyFilters($query, array $filters)
+    protected function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('search')) {


325) /var/www/app/Models/User.php:238    [M] LogicalOr

--- Original
+++ New
@@ @@
         if ($filters->get('phone')) {
             $query->wherePhone($filters->get('phone'));
         }
-        if ($filters->get('orderByField') || $filters->get('orderBy')) {
+        if ($filters->get('orderByField') && $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'name';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
             $query->whereOrder($field, $orderBy);


326) /var/www/app/Models/User.php:330    [M] FalseValue

--- Original
+++ New
@@ @@
         } else {
             return $this->role == 'super admin' || $this->role == 'admin';
         }
-        return false;
+        return true;
     }
     public static function createFromRequest(UserRequest $request)
     {


327) /var/www/app/Models/User.php:333    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return false;
     }
-    public static function createFromRequest(UserRequest $request)
+    protected static function createFromRequest(UserRequest $request)
     {
         $user = self::create($request->getUserPayload());
         $user->setSettings(['language' => CompanySetting::getSetting('language', $request->header('company'))]);


328) /var/www/app/Models/User.php:337    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public static function createFromRequest(UserRequest $request)
     {
         $user = self::create($request->getUserPayload());
-        $user->setSettings(['language' => CompanySetting::getSetting('language', $request->header('company'))]);
+        $user->setSettings([]);
         $companies = collect($request->companies);
         $user->companies()->sync($companies->pluck('id'));
         foreach ($companies as $company) {


329) /var/www/app/Models/User.php:337    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public static function createFromRequest(UserRequest $request)
     {
         $user = self::create($request->getUserPayload());
-        $user->setSettings(['language' => CompanySetting::getSetting('language', $request->header('company'))]);
+        
         $companies = collect($request->companies);
         $user->companies()->sync($companies->pluck('id'));
         foreach ($companies as $company) {


330) /var/www/app/Models/User.php:342    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $user = self::create($request->getUserPayload());
         $user->setSettings(['language' => CompanySetting::getSetting('language', $request->header('company'))]);
         $companies = collect($request->companies);
-        $user->companies()->sync($companies->pluck('id'));
+        
         foreach ($companies as $company) {
             BouncerFacade::scope()->to($company['id']);
             BouncerFacade::sync($user)->roles([$company['role']]);


331) /var/www/app/Models/User.php:344    [M] Foreach_

--- Original
+++ New
@@ @@
         $user->setSettings(['language' => CompanySetting::getSetting('language', $request->header('company'))]);
         $companies = collect($request->companies);
         $user->companies()->sync($companies->pluck('id'));
-        foreach ($companies as $company) {
+        foreach (array() as $company) {
             BouncerFacade::scope()->to($company['id']);
             BouncerFacade::sync($user)->roles([$company['role']]);
         }


332) /var/www/app/Models/User.php:345    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $companies = collect($request->companies);
         $user->companies()->sync($companies->pluck('id'));
         foreach ($companies as $company) {
-            BouncerFacade::scope()->to($company['id']);
+            
             BouncerFacade::sync($user)->roles([$company['role']]);
         }
         return $user;


333) /var/www/app/Models/User.php:347    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $user->companies()->sync($companies->pluck('id'));
         foreach ($companies as $company) {
             BouncerFacade::scope()->to($company['id']);
-            BouncerFacade::sync($user)->roles([$company['role']]);
+            BouncerFacade::sync($user)->roles([]);
         }
         return $user;
     }


334) /var/www/app/Models/User.php:347    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $user->companies()->sync($companies->pluck('id'));
         foreach ($companies as $company) {
             BouncerFacade::scope()->to($company['id']);
-            BouncerFacade::sync($user)->roles([$company['role']]);
+            
         }
         return $user;
     }


Timed Out mutants:
==================

Skipped mutants:
================

1) /var/www/app/Models/Address.php:16    [M] PublicVisibility

--- Original
+++ New
@@ @@
     public const BILLING_TYPE = 'billing';
     public const SHIPPING_TYPE = 'shipping';
     protected $guarded = ['id'];
-    public function getCountryNameAttribute()
+    protected function getCountryNameAttribute()
     {
         $name = $this->country ? $this->country->name : null;
         return $name;


2) /var/www/app/Models/Address.php:18    [M] Ternary

--- Original
+++ New
@@ @@
     protected $guarded = ['id'];
     public function getCountryNameAttribute()
     {
-        $name = $this->country ? $this->country->name : null;
+        $name = $this->country ? null : $this->country->name;
         return $name;
     }
     public function user()


3) /var/www/app/Models/Address.php:23    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $name = $this->country ? $this->country->name : null;
         return $name;
     }
-    public function user()
+    protected function user()
     {
         return $this->belongsTo(User::class);
     }


4) /var/www/app/Models/Address.php:38    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Company::class);
     }
-    public function country()
+    protected function country()
     {
         return $this->belongsTo(Country::class);
     }
 }


5) /var/www/app/Models/Company.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
     public const COMPANY_LEVEL = 'company_level';
     public const CUSTOMER_LEVEL = 'customer_level';
     protected $appends = ['logo', 'logo_path'];
-    public function getRolesAttribute()
+    protected function getRolesAttribute()
     {
         return Role::where('scope', $this->id)->get();
     }


6) /var/www/app/Models/Company.php:33    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return Role::where('scope', $this->id)->get();
     }
-    public function getLogoPathAttribute()
+    protected function getLogoPathAttribute()
     {
         $logo = $this->getMedia('logo')->first();
         $isSystem = FileDisk::whereSetAsDefault(true)->first()->isSystem();


7) /var/www/app/Models/Company.php:37    [M] TrueValue

--- Original
+++ New
@@ @@
     public function getLogoPathAttribute()
     {
         $logo = $this->getMedia('logo')->first();
-        $isSystem = FileDisk::whereSetAsDefault(true)->first()->isSystem();
+        $isSystem = FileDisk::whereSetAsDefault(false)->first()->isSystem();
         if ($logo) {
             if ($isSystem) {
                 return $logo->getPath();


8) /var/www/app/Models/Company.php:50    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return null;
     }
-    public function getLogoAttribute()
+    protected function getLogoAttribute()
     {
         $logo = $this->getMedia('logo')->first();
         if ($logo) {


9) /var/www/app/Models/Company.php:61    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return null;
     }
-    public function customers()
+    protected function customers()
     {
         return $this->hasMany(Customer::class);
     }


10) /var/www/app/Models/Company.php:146    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Estimate::class);
     }
-    public function address()
+    protected function address()
     {
         return $this->hasOne(Address::class);
     }


11) /var/www/app/Models/Company.php:156    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsToMany(User::class, 'user_company', 'company_id', 'user_id');
     }
-    public function setupRoles()
+    protected function setupRoles()
     {
         BouncerFacade::scope()->to($this->id);
         $super_admin = BouncerFacade::role()->firstOrCreate(['name' => 'super admin', 'title' => 'Super Admin', 'scope' => $this->id]);


12) /var/www/app/Models/Company.php:158    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function setupRoles()
     {
-        BouncerFacade::scope()->to($this->id);
+        
         $super_admin = BouncerFacade::role()->firstOrCreate(['name' => 'super admin', 'title' => 'Super Admin', 'scope' => $this->id]);
         foreach (config('abilities.abilities') as $ability) {
             BouncerFacade::allow($super_admin)->to($ability['ability'], $ability['model']);


13) /var/www/app/Models/Company.php:160    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function setupRoles()
     {
         BouncerFacade::scope()->to($this->id);
-        $super_admin = BouncerFacade::role()->firstOrCreate(['name' => 'super admin', 'title' => 'Super Admin', 'scope' => $this->id]);
+        $super_admin = BouncerFacade::role()->firstOrCreate(['title' => 'Super Admin', 'scope' => $this->id]);
         foreach (config('abilities.abilities') as $ability) {
             BouncerFacade::allow($super_admin)->to($ability['ability'], $ability['model']);
         }


14) /var/www/app/Models/Company.php:163    [M] ArrayItem

--- Original
+++ New
@@ @@
     public function setupRoles()
     {
         BouncerFacade::scope()->to($this->id);
-        $super_admin = BouncerFacade::role()->firstOrCreate(['name' => 'super admin', 'title' => 'Super Admin', 'scope' => $this->id]);
+        $super_admin = BouncerFacade::role()->firstOrCreate(['name' => 'super admin', 'title' => 'Super Admin', 'scope' > $this->id]);
         foreach (config('abilities.abilities') as $ability) {
             BouncerFacade::allow($super_admin)->to($ability['ability'], $ability['model']);
         }


15) /var/www/app/Models/Company.php:166    [M] Foreach_

--- Original
+++ New
@@ @@
     {
         BouncerFacade::scope()->to($this->id);
         $super_admin = BouncerFacade::role()->firstOrCreate(['name' => 'super admin', 'title' => 'Super Admin', 'scope' => $this->id]);
-        foreach (config('abilities.abilities') as $ability) {
+        foreach (array() as $ability) {
             BouncerFacade::allow($super_admin)->to($ability['ability'], $ability['model']);
         }
     }


16) /var/www/app/Models/Company.php:167    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         BouncerFacade::scope()->to($this->id);
         $super_admin = BouncerFacade::role()->firstOrCreate(['name' => 'super admin', 'title' => 'Super Admin', 'scope' => $this->id]);
         foreach (config('abilities.abilities') as $ability) {
-            BouncerFacade::allow($super_admin)->to($ability['ability'], $ability['model']);
+            
         }
     }
     public function setupDefaultPaymentMethods()


17) /var/www/app/Models/Company.php:171    [M] PublicVisibility

--- Original
+++ New
@@ @@
             BouncerFacade::allow($super_admin)->to($ability['ability'], $ability['model']);
         }
     }
-    public function setupDefaultPaymentMethods()
+    protected function setupDefaultPaymentMethods()
     {
         PaymentMethod::create(['name' => 'Cash', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Check', 'company_id' => $this->id]);


18) /var/www/app/Models/Company.php:173    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function setupDefaultPaymentMethods()
     {
-        PaymentMethod::create(['name' => 'Cash', 'company_id' => $this->id]);
+        PaymentMethod::create(['name' => 'Cash', 'company_id' > $this->id]);
         PaymentMethod::create(['name' => 'Check', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Credit Card', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Bank Transfer', 'company_id' => $this->id]);


19) /var/www/app/Models/Company.php:173    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function setupDefaultPaymentMethods()
     {
-        PaymentMethod::create(['name' => 'Cash', 'company_id' => $this->id]);
+        PaymentMethod::create(['company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Check', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Credit Card', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Bank Transfer', 'company_id' => $this->id]);


20) /var/www/app/Models/Company.php:173    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function setupDefaultPaymentMethods()
     {
-        PaymentMethod::create(['name' => 'Cash', 'company_id' => $this->id]);
+        
         PaymentMethod::create(['name' => 'Check', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Credit Card', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Bank Transfer', 'company_id' => $this->id]);


21) /var/www/app/Models/Company.php:174    [M] ArrayItem

--- Original
+++ New
@@ @@
     public function setupDefaultPaymentMethods()
     {
         PaymentMethod::create(['name' => 'Cash', 'company_id' => $this->id]);
-        PaymentMethod::create(['name' => 'Check', 'company_id' => $this->id]);
+        PaymentMethod::create(['name' => 'Check', 'company_id' > $this->id]);
         PaymentMethod::create(['name' => 'Credit Card', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Bank Transfer', 'company_id' => $this->id]);
     }


22) /var/www/app/Models/Company.php:174    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function setupDefaultPaymentMethods()
     {
         PaymentMethod::create(['name' => 'Cash', 'company_id' => $this->id]);
-        PaymentMethod::create(['name' => 'Check', 'company_id' => $this->id]);
+        PaymentMethod::create(['company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Credit Card', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Bank Transfer', 'company_id' => $this->id]);
     }


23) /var/www/app/Models/Company.php:174    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function setupDefaultPaymentMethods()
     {
         PaymentMethod::create(['name' => 'Cash', 'company_id' => $this->id]);
-        PaymentMethod::create(['name' => 'Check', 'company_id' => $this->id]);
+        
         PaymentMethod::create(['name' => 'Credit Card', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Bank Transfer', 'company_id' => $this->id]);
     }


24) /var/www/app/Models/Company.php:175    [M] ArrayItem

--- Original
+++ New
@@ @@
     {
         PaymentMethod::create(['name' => 'Cash', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Check', 'company_id' => $this->id]);
-        PaymentMethod::create(['name' => 'Credit Card', 'company_id' => $this->id]);
+        PaymentMethod::create(['name' => 'Credit Card', 'company_id' > $this->id]);
         PaymentMethod::create(['name' => 'Bank Transfer', 'company_id' => $this->id]);
     }
     public function setupDefaultUnits()


25) /var/www/app/Models/Company.php:175    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         PaymentMethod::create(['name' => 'Cash', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Check', 'company_id' => $this->id]);
-        PaymentMethod::create(['name' => 'Credit Card', 'company_id' => $this->id]);
+        PaymentMethod::create(['company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Bank Transfer', 'company_id' => $this->id]);
     }
     public function setupDefaultUnits()


26) /var/www/app/Models/Company.php:175    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         PaymentMethod::create(['name' => 'Cash', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Check', 'company_id' => $this->id]);
-        PaymentMethod::create(['name' => 'Credit Card', 'company_id' => $this->id]);
+        
         PaymentMethod::create(['name' => 'Bank Transfer', 'company_id' => $this->id]);
     }
     public function setupDefaultUnits()


27) /var/www/app/Models/Company.php:176    [M] ArrayItem

--- Original
+++ New
@@ @@
         PaymentMethod::create(['name' => 'Cash', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Check', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Credit Card', 'company_id' => $this->id]);
-        PaymentMethod::create(['name' => 'Bank Transfer', 'company_id' => $this->id]);
+        PaymentMethod::create(['name' => 'Bank Transfer', 'company_id' > $this->id]);
     }
     public function setupDefaultUnits()
     {


28) /var/www/app/Models/Company.php:176    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         PaymentMethod::create(['name' => 'Cash', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Check', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Credit Card', 'company_id' => $this->id]);
-        PaymentMethod::create(['name' => 'Bank Transfer', 'company_id' => $this->id]);
+        PaymentMethod::create(['company_id' => $this->id]);
     }
     public function setupDefaultUnits()
     {


29) /var/www/app/Models/Company.php:176    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         PaymentMethod::create(['name' => 'Cash', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Check', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Credit Card', 'company_id' => $this->id]);
-        PaymentMethod::create(['name' => 'Bank Transfer', 'company_id' => $this->id]);
+        
     }
     public function setupDefaultUnits()
     {


30) /var/www/app/Models/Company.php:179    [M] PublicVisibility

--- Original
+++ New
@@ @@
         PaymentMethod::create(['name' => 'Credit Card', 'company_id' => $this->id]);
         PaymentMethod::create(['name' => 'Bank Transfer', 'company_id' => $this->id]);
     }
-    public function setupDefaultUnits()
+    protected function setupDefaultUnits()
     {
         Unit::create(['name' => 'box', 'company_id' => $this->id]);
         Unit::create(['name' => 'cm', 'company_id' => $this->id]);


31) /var/www/app/Models/Company.php:181    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function setupDefaultUnits()
     {
-        Unit::create(['name' => 'box', 'company_id' => $this->id]);
+        Unit::create(['name' => 'box', 'company_id' > $this->id]);
         Unit::create(['name' => 'cm', 'company_id' => $this->id]);
         Unit::create(['name' => 'dz', 'company_id' => $this->id]);
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);


32) /var/www/app/Models/Company.php:181    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function setupDefaultUnits()
     {
-        Unit::create(['name' => 'box', 'company_id' => $this->id]);
+        Unit::create(['company_id' => $this->id]);
         Unit::create(['name' => 'cm', 'company_id' => $this->id]);
         Unit::create(['name' => 'dz', 'company_id' => $this->id]);
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);


33) /var/www/app/Models/Company.php:181    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function setupDefaultUnits()
     {
-        Unit::create(['name' => 'box', 'company_id' => $this->id]);
+        
         Unit::create(['name' => 'cm', 'company_id' => $this->id]);
         Unit::create(['name' => 'dz', 'company_id' => $this->id]);
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);


34) /var/www/app/Models/Company.php:182    [M] ArrayItem

--- Original
+++ New
@@ @@
     public function setupDefaultUnits()
     {
         Unit::create(['name' => 'box', 'company_id' => $this->id]);
-        Unit::create(['name' => 'cm', 'company_id' => $this->id]);
+        Unit::create(['name' => 'cm', 'company_id' > $this->id]);
         Unit::create(['name' => 'dz', 'company_id' => $this->id]);
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);
         Unit::create(['name' => 'g', 'company_id' => $this->id]);


35) /var/www/app/Models/Company.php:182    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function setupDefaultUnits()
     {
         Unit::create(['name' => 'box', 'company_id' => $this->id]);
-        Unit::create(['name' => 'cm', 'company_id' => $this->id]);
+        Unit::create(['company_id' => $this->id]);
         Unit::create(['name' => 'dz', 'company_id' => $this->id]);
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);
         Unit::create(['name' => 'g', 'company_id' => $this->id]);


36) /var/www/app/Models/Company.php:182    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function setupDefaultUnits()
     {
         Unit::create(['name' => 'box', 'company_id' => $this->id]);
-        Unit::create(['name' => 'cm', 'company_id' => $this->id]);
+        
         Unit::create(['name' => 'dz', 'company_id' => $this->id]);
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);
         Unit::create(['name' => 'g', 'company_id' => $this->id]);


37) /var/www/app/Models/Company.php:183    [M] ArrayItem

--- Original
+++ New
@@ @@
     {
         Unit::create(['name' => 'box', 'company_id' => $this->id]);
         Unit::create(['name' => 'cm', 'company_id' => $this->id]);
-        Unit::create(['name' => 'dz', 'company_id' => $this->id]);
+        Unit::create(['name' => 'dz', 'company_id' > $this->id]);
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);
         Unit::create(['name' => 'g', 'company_id' => $this->id]);
         Unit::create(['name' => 'in', 'company_id' => $this->id]);


38) /var/www/app/Models/Company.php:183    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         Unit::create(['name' => 'box', 'company_id' => $this->id]);
         Unit::create(['name' => 'cm', 'company_id' => $this->id]);
-        Unit::create(['name' => 'dz', 'company_id' => $this->id]);
+        Unit::create(['company_id' => $this->id]);
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);
         Unit::create(['name' => 'g', 'company_id' => $this->id]);
         Unit::create(['name' => 'in', 'company_id' => $this->id]);


39) /var/www/app/Models/Company.php:183    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         Unit::create(['name' => 'box', 'company_id' => $this->id]);
         Unit::create(['name' => 'cm', 'company_id' => $this->id]);
-        Unit::create(['name' => 'dz', 'company_id' => $this->id]);
+        
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);
         Unit::create(['name' => 'g', 'company_id' => $this->id]);
         Unit::create(['name' => 'in', 'company_id' => $this->id]);


40) /var/www/app/Models/Company.php:184    [M] ArrayItem

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'box', 'company_id' => $this->id]);
         Unit::create(['name' => 'cm', 'company_id' => $this->id]);
         Unit::create(['name' => 'dz', 'company_id' => $this->id]);
-        Unit::create(['name' => 'ft', 'company_id' => $this->id]);
+        Unit::create(['name' => 'ft', 'company_id' > $this->id]);
         Unit::create(['name' => 'g', 'company_id' => $this->id]);
         Unit::create(['name' => 'in', 'company_id' => $this->id]);
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);


41) /var/www/app/Models/Company.php:184    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'box', 'company_id' => $this->id]);
         Unit::create(['name' => 'cm', 'company_id' => $this->id]);
         Unit::create(['name' => 'dz', 'company_id' => $this->id]);
-        Unit::create(['name' => 'ft', 'company_id' => $this->id]);
+        Unit::create(['company_id' => $this->id]);
         Unit::create(['name' => 'g', 'company_id' => $this->id]);
         Unit::create(['name' => 'in', 'company_id' => $this->id]);
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);


42) /var/www/app/Models/Company.php:184    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'box', 'company_id' => $this->id]);
         Unit::create(['name' => 'cm', 'company_id' => $this->id]);
         Unit::create(['name' => 'dz', 'company_id' => $this->id]);
-        Unit::create(['name' => 'ft', 'company_id' => $this->id]);
+        
         Unit::create(['name' => 'g', 'company_id' => $this->id]);
         Unit::create(['name' => 'in', 'company_id' => $this->id]);
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);


43) /var/www/app/Models/Company.php:185    [M] ArrayItem

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'cm', 'company_id' => $this->id]);
         Unit::create(['name' => 'dz', 'company_id' => $this->id]);
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);
-        Unit::create(['name' => 'g', 'company_id' => $this->id]);
+        Unit::create(['name' => 'g', 'company_id' > $this->id]);
         Unit::create(['name' => 'in', 'company_id' => $this->id]);
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);
         Unit::create(['name' => 'km', 'company_id' => $this->id]);


44) /var/www/app/Models/Company.php:185    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'cm', 'company_id' => $this->id]);
         Unit::create(['name' => 'dz', 'company_id' => $this->id]);
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);
-        Unit::create(['name' => 'g', 'company_id' => $this->id]);
+        Unit::create(['company_id' => $this->id]);
         Unit::create(['name' => 'in', 'company_id' => $this->id]);
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);
         Unit::create(['name' => 'km', 'company_id' => $this->id]);


45) /var/www/app/Models/Company.php:185    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'cm', 'company_id' => $this->id]);
         Unit::create(['name' => 'dz', 'company_id' => $this->id]);
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);
-        Unit::create(['name' => 'g', 'company_id' => $this->id]);
+        
         Unit::create(['name' => 'in', 'company_id' => $this->id]);
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);
         Unit::create(['name' => 'km', 'company_id' => $this->id]);


46) /var/www/app/Models/Company.php:186    [M] ArrayItem

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'dz', 'company_id' => $this->id]);
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);
         Unit::create(['name' => 'g', 'company_id' => $this->id]);
-        Unit::create(['name' => 'in', 'company_id' => $this->id]);
+        Unit::create(['name' => 'in', 'company_id' > $this->id]);
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);
         Unit::create(['name' => 'km', 'company_id' => $this->id]);
         Unit::create(['name' => 'lb', 'company_id' => $this->id]);


47) /var/www/app/Models/Company.php:186    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'dz', 'company_id' => $this->id]);
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);
         Unit::create(['name' => 'g', 'company_id' => $this->id]);
-        Unit::create(['name' => 'in', 'company_id' => $this->id]);
+        Unit::create(['company_id' => $this->id]);
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);
         Unit::create(['name' => 'km', 'company_id' => $this->id]);
         Unit::create(['name' => 'lb', 'company_id' => $this->id]);


48) /var/www/app/Models/Company.php:186    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'dz', 'company_id' => $this->id]);
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);
         Unit::create(['name' => 'g', 'company_id' => $this->id]);
-        Unit::create(['name' => 'in', 'company_id' => $this->id]);
+        
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);
         Unit::create(['name' => 'km', 'company_id' => $this->id]);
         Unit::create(['name' => 'lb', 'company_id' => $this->id]);


49) /var/www/app/Models/Company.php:187    [M] ArrayItem

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);
         Unit::create(['name' => 'g', 'company_id' => $this->id]);
         Unit::create(['name' => 'in', 'company_id' => $this->id]);
-        Unit::create(['name' => 'kg', 'company_id' => $this->id]);
+        Unit::create(['name' => 'kg', 'company_id' > $this->id]);
         Unit::create(['name' => 'km', 'company_id' => $this->id]);
         Unit::create(['name' => 'lb', 'company_id' => $this->id]);
         Unit::create(['name' => 'mg', 'company_id' => $this->id]);


50) /var/www/app/Models/Company.php:187    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);
         Unit::create(['name' => 'g', 'company_id' => $this->id]);
         Unit::create(['name' => 'in', 'company_id' => $this->id]);
-        Unit::create(['name' => 'kg', 'company_id' => $this->id]);
+        Unit::create(['company_id' => $this->id]);
         Unit::create(['name' => 'km', 'company_id' => $this->id]);
         Unit::create(['name' => 'lb', 'company_id' => $this->id]);
         Unit::create(['name' => 'mg', 'company_id' => $this->id]);


51) /var/www/app/Models/Company.php:187    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'ft', 'company_id' => $this->id]);
         Unit::create(['name' => 'g', 'company_id' => $this->id]);
         Unit::create(['name' => 'in', 'company_id' => $this->id]);
-        Unit::create(['name' => 'kg', 'company_id' => $this->id]);
+        
         Unit::create(['name' => 'km', 'company_id' => $this->id]);
         Unit::create(['name' => 'lb', 'company_id' => $this->id]);
         Unit::create(['name' => 'mg', 'company_id' => $this->id]);


52) /var/www/app/Models/Company.php:188    [M] ArrayItem

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'g', 'company_id' => $this->id]);
         Unit::create(['name' => 'in', 'company_id' => $this->id]);
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);
-        Unit::create(['name' => 'km', 'company_id' => $this->id]);
+        Unit::create(['name' => 'km', 'company_id' > $this->id]);
         Unit::create(['name' => 'lb', 'company_id' => $this->id]);
         Unit::create(['name' => 'mg', 'company_id' => $this->id]);
         Unit::create(['name' => 'pc', 'company_id' => $this->id]);


53) /var/www/app/Models/Company.php:188    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'g', 'company_id' => $this->id]);
         Unit::create(['name' => 'in', 'company_id' => $this->id]);
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);
-        Unit::create(['name' => 'km', 'company_id' => $this->id]);
+        Unit::create(['company_id' => $this->id]);
         Unit::create(['name' => 'lb', 'company_id' => $this->id]);
         Unit::create(['name' => 'mg', 'company_id' => $this->id]);
         Unit::create(['name' => 'pc', 'company_id' => $this->id]);


54) /var/www/app/Models/Company.php:188    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'g', 'company_id' => $this->id]);
         Unit::create(['name' => 'in', 'company_id' => $this->id]);
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);
-        Unit::create(['name' => 'km', 'company_id' => $this->id]);
+        
         Unit::create(['name' => 'lb', 'company_id' => $this->id]);
         Unit::create(['name' => 'mg', 'company_id' => $this->id]);
         Unit::create(['name' => 'pc', 'company_id' => $this->id]);


55) /var/www/app/Models/Company.php:189    [M] ArrayItem

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'in', 'company_id' => $this->id]);
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);
         Unit::create(['name' => 'km', 'company_id' => $this->id]);
-        Unit::create(['name' => 'lb', 'company_id' => $this->id]);
+        Unit::create(['name' => 'lb', 'company_id' > $this->id]);
         Unit::create(['name' => 'mg', 'company_id' => $this->id]);
         Unit::create(['name' => 'pc', 'company_id' => $this->id]);
     }


56) /var/www/app/Models/Company.php:189    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'in', 'company_id' => $this->id]);
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);
         Unit::create(['name' => 'km', 'company_id' => $this->id]);
-        Unit::create(['name' => 'lb', 'company_id' => $this->id]);
+        Unit::create(['company_id' => $this->id]);
         Unit::create(['name' => 'mg', 'company_id' => $this->id]);
         Unit::create(['name' => 'pc', 'company_id' => $this->id]);
     }


57) /var/www/app/Models/Company.php:189    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'in', 'company_id' => $this->id]);
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);
         Unit::create(['name' => 'km', 'company_id' => $this->id]);
-        Unit::create(['name' => 'lb', 'company_id' => $this->id]);
+        
         Unit::create(['name' => 'mg', 'company_id' => $this->id]);
         Unit::create(['name' => 'pc', 'company_id' => $this->id]);
     }


58) /var/www/app/Models/Company.php:190    [M] ArrayItem

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);
         Unit::create(['name' => 'km', 'company_id' => $this->id]);
         Unit::create(['name' => 'lb', 'company_id' => $this->id]);
-        Unit::create(['name' => 'mg', 'company_id' => $this->id]);
+        Unit::create(['name' => 'mg', 'company_id' > $this->id]);
         Unit::create(['name' => 'pc', 'company_id' => $this->id]);
     }
     public function setupDefaultSettings()


59) /var/www/app/Models/Company.php:190    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);
         Unit::create(['name' => 'km', 'company_id' => $this->id]);
         Unit::create(['name' => 'lb', 'company_id' => $this->id]);
-        Unit::create(['name' => 'mg', 'company_id' => $this->id]);
+        Unit::create(['company_id' => $this->id]);
         Unit::create(['name' => 'pc', 'company_id' => $this->id]);
     }
     public function setupDefaultSettings()


60) /var/www/app/Models/Company.php:190    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'kg', 'company_id' => $this->id]);
         Unit::create(['name' => 'km', 'company_id' => $this->id]);
         Unit::create(['name' => 'lb', 'company_id' => $this->id]);
-        Unit::create(['name' => 'mg', 'company_id' => $this->id]);
+        
         Unit::create(['name' => 'pc', 'company_id' => $this->id]);
     }
     public function setupDefaultSettings()


61) /var/www/app/Models/Company.php:191    [M] ArrayItem

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'km', 'company_id' => $this->id]);
         Unit::create(['name' => 'lb', 'company_id' => $this->id]);
         Unit::create(['name' => 'mg', 'company_id' => $this->id]);
-        Unit::create(['name' => 'pc', 'company_id' => $this->id]);
+        Unit::create(['name' => 'pc', 'company_id' > $this->id]);
     }
     public function setupDefaultSettings()
     {


62) /var/www/app/Models/Company.php:191    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'km', 'company_id' => $this->id]);
         Unit::create(['name' => 'lb', 'company_id' => $this->id]);
         Unit::create(['name' => 'mg', 'company_id' => $this->id]);
-        Unit::create(['name' => 'pc', 'company_id' => $this->id]);
+        Unit::create(['company_id' => $this->id]);
     }
     public function setupDefaultSettings()
     {


63) /var/www/app/Models/Company.php:191    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'km', 'company_id' => $this->id]);
         Unit::create(['name' => 'lb', 'company_id' => $this->id]);
         Unit::create(['name' => 'mg', 'company_id' => $this->id]);
-        Unit::create(['name' => 'pc', 'company_id' => $this->id]);
+        
     }
     public function setupDefaultSettings()
     {


64) /var/www/app/Models/Company.php:194    [M] PublicVisibility

--- Original
+++ New
@@ @@
         Unit::create(['name' => 'mg', 'company_id' => $this->id]);
         Unit::create(['name' => 'pc', 'company_id' => $this->id]);
     }
-    public function setupDefaultSettings()
+    protected function setupDefaultSettings()
     {
         $defaultInvoiceEmailBody = 'You have received a new invoice from <b>{COMPANY_NAME}</b>.</br> Please download using the button below:';
         $defaultEstimateEmailBody = 'You have received a new estimate from <b>{COMPANY_NAME}</b>.</br> Please download using the button below:';


65) /var/www/app/Models/Company.php:204    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $shippingAddressFormat = '<h3>{SHIPPING_ADDRESS_NAME}</h3><p>{SHIPPING_ADDRESS_STREET_1}</p><p>{SHIPPING_ADDRESS_STREET_2}</p><p>{SHIPPING_CITY}  {SHIPPING_STATE}</p><p>{SHIPPING_COUNTRY}  {SHIPPING_ZIP_CODE}</p><p>{SHIPPING_PHONE}</p>';
         $companyAddressFormat = '<h3><strong>{COMPANY_NAME}</strong></h3><p>{COMPANY_ADDRESS_STREET_1}</p><p>{COMPANY_ADDRESS_STREET_2}</p><p>{COMPANY_CITY} {COMPANY_STATE}</p><p>{COMPANY_COUNTRY}  {COMPANY_ZIP_CODE}</p><p>{COMPANY_PHONE}</p>';
         $paymentFromCustomerAddress = '<h3>{BILLING_ADDRESS_NAME}</h3><p>{BILLING_ADDRESS_STREET_1}</p><p>{BILLING_ADDRESS_STREET_2}</p><p>{BILLING_CITY} {BILLING_STATE} {BILLING_ZIP_CODE}</p><p>{BILLING_COUNTRY}</p><p>{BILLING_PHONE}</p>';
-        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
+        $settings = ['payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
         CompanySetting::setSettings($settings, $this->id);
     }
     public function setupDefaultData()


66) /var/www/app/Models/Company.php:220    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $shippingAddressFormat = '<h3>{SHIPPING_ADDRESS_NAME}</h3><p>{SHIPPING_ADDRESS_STREET_1}</p><p>{SHIPPING_ADDRESS_STREET_2}</p><p>{SHIPPING_CITY}  {SHIPPING_STATE}</p><p>{SHIPPING_COUNTRY}  {SHIPPING_ZIP_CODE}</p><p>{SHIPPING_PHONE}</p>';
         $companyAddressFormat = '<h3><strong>{COMPANY_NAME}</strong></h3><p>{COMPANY_ADDRESS_STREET_1}</p><p>{COMPANY_ADDRESS_STREET_2}</p><p>{COMPANY_CITY} {COMPANY_STATE}</p><p>{COMPANY_COUNTRY}  {COMPANY_ZIP_CODE}</p><p>{COMPANY_PHONE}</p>';
         $paymentFromCustomerAddress = '<h3>{BILLING_ADDRESS_NAME}</h3><p>{BILLING_ADDRESS_STREET_1}</p><p>{BILLING_ADDRESS_STREET_2}</p><p>{BILLING_CITY} {BILLING_STATE} {BILLING_ZIP_CODE}</p><p>{BILLING_COUNTRY}</p><p>{BILLING_PHONE}</p>';
-        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
+        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 12, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
         CompanySetting::setSettings($settings, $this->id);
     }
     public function setupDefaultData()


67) /var/www/app/Models/Company.php:220    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $shippingAddressFormat = '<h3>{SHIPPING_ADDRESS_NAME}</h3><p>{SHIPPING_ADDRESS_STREET_1}</p><p>{SHIPPING_ADDRESS_STREET_2}</p><p>{SHIPPING_CITY}  {SHIPPING_STATE}</p><p>{SHIPPING_COUNTRY}  {SHIPPING_ZIP_CODE}</p><p>{SHIPPING_PHONE}</p>';
         $companyAddressFormat = '<h3><strong>{COMPANY_NAME}</strong></h3><p>{COMPANY_ADDRESS_STREET_1}</p><p>{COMPANY_ADDRESS_STREET_2}</p><p>{COMPANY_CITY} {COMPANY_STATE}</p><p>{COMPANY_COUNTRY}  {COMPANY_ZIP_CODE}</p><p>{COMPANY_PHONE}</p>';
         $paymentFromCustomerAddress = '<h3>{BILLING_ADDRESS_NAME}</h3><p>{BILLING_ADDRESS_STREET_1}</p><p>{BILLING_ADDRESS_STREET_2}</p><p>{BILLING_CITY} {BILLING_STATE} {BILLING_ZIP_CODE}</p><p>{BILLING_COUNTRY}</p><p>{BILLING_PHONE}</p>';
-        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
+        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 14, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
         CompanySetting::setSettings($settings, $this->id);
     }
     public function setupDefaultData()


68) /var/www/app/Models/Company.php:220    [M] Coalesce

--- Original
+++ New
@@ @@
         $shippingAddressFormat = '<h3>{SHIPPING_ADDRESS_NAME}</h3><p>{SHIPPING_ADDRESS_STREET_1}</p><p>{SHIPPING_ADDRESS_STREET_2}</p><p>{SHIPPING_CITY}  {SHIPPING_STATE}</p><p>{SHIPPING_COUNTRY}  {SHIPPING_ZIP_CODE}</p><p>{SHIPPING_PHONE}</p>';
         $companyAddressFormat = '<h3><strong>{COMPANY_NAME}</strong></h3><p>{COMPANY_ADDRESS_STREET_1}</p><p>{COMPANY_ADDRESS_STREET_2}</p><p>{COMPANY_CITY} {COMPANY_STATE}</p><p>{COMPANY_COUNTRY}  {COMPANY_ZIP_CODE}</p><p>{COMPANY_PHONE}</p>';
         $paymentFromCustomerAddress = '<h3>{BILLING_ADDRESS_NAME}</h3><p>{BILLING_ADDRESS_STREET_1}</p><p>{BILLING_ADDRESS_STREET_2}</p><p>{BILLING_CITY} {BILLING_STATE} {BILLING_ZIP_CODE}</p><p>{BILLING_COUNTRY}</p><p>{BILLING_PHONE}</p>';
-        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
+        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => 13 ?? request()->currency, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
         CompanySetting::setSettings($settings, $this->id);
     }
     public function setupDefaultData()


69) /var/www/app/Models/Company.php:243    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $shippingAddressFormat = '<h3>{SHIPPING_ADDRESS_NAME}</h3><p>{SHIPPING_ADDRESS_STREET_1}</p><p>{SHIPPING_ADDRESS_STREET_2}</p><p>{SHIPPING_CITY}  {SHIPPING_STATE}</p><p>{SHIPPING_COUNTRY}  {SHIPPING_ZIP_CODE}</p><p>{SHIPPING_PHONE}</p>';
         $companyAddressFormat = '<h3><strong>{COMPANY_NAME}</strong></h3><p>{COMPANY_ADDRESS_STREET_1}</p><p>{COMPANY_ADDRESS_STREET_2}</p><p>{COMPANY_CITY} {COMPANY_STATE}</p><p>{COMPANY_COUNTRY}  {COMPANY_ZIP_CODE}</p><p>{COMPANY_PHONE}</p>';
         $paymentFromCustomerAddress = '<h3>{BILLING_ADDRESS_NAME}</h3><p>{BILLING_ADDRESS_STREET_1}</p><p>{BILLING_ADDRESS_STREET_2}</p><p>{BILLING_CITY} {BILLING_STATE} {BILLING_ZIP_CODE}</p><p>{BILLING_COUNTRY}</p><p>{BILLING_PHONE}</p>';
-        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
+        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 6, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
         CompanySetting::setSettings($settings, $this->id);
     }
     public function setupDefaultData()


70) /var/www/app/Models/Company.php:243    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $shippingAddressFormat = '<h3>{SHIPPING_ADDRESS_NAME}</h3><p>{SHIPPING_ADDRESS_STREET_1}</p><p>{SHIPPING_ADDRESS_STREET_2}</p><p>{SHIPPING_CITY}  {SHIPPING_STATE}</p><p>{SHIPPING_COUNTRY}  {SHIPPING_ZIP_CODE}</p><p>{SHIPPING_PHONE}</p>';
         $companyAddressFormat = '<h3><strong>{COMPANY_NAME}</strong></h3><p>{COMPANY_ADDRESS_STREET_1}</p><p>{COMPANY_ADDRESS_STREET_2}</p><p>{COMPANY_CITY} {COMPANY_STATE}</p><p>{COMPANY_COUNTRY}  {COMPANY_ZIP_CODE}</p><p>{COMPANY_PHONE}</p>';
         $paymentFromCustomerAddress = '<h3>{BILLING_ADDRESS_NAME}</h3><p>{BILLING_ADDRESS_STREET_1}</p><p>{BILLING_ADDRESS_STREET_2}</p><p>{BILLING_CITY} {BILLING_STATE} {BILLING_ZIP_CODE}</p><p>{BILLING_COUNTRY}</p><p>{BILLING_PHONE}</p>';
-        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
+        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 8, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
         CompanySetting::setSettings($settings, $this->id);
     }
     public function setupDefaultData()


71) /var/www/app/Models/Company.php:245    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $shippingAddressFormat = '<h3>{SHIPPING_ADDRESS_NAME}</h3><p>{SHIPPING_ADDRESS_STREET_1}</p><p>{SHIPPING_ADDRESS_STREET_2}</p><p>{SHIPPING_CITY}  {SHIPPING_STATE}</p><p>{SHIPPING_COUNTRY}  {SHIPPING_ZIP_CODE}</p><p>{SHIPPING_PHONE}</p>';
         $companyAddressFormat = '<h3><strong>{COMPANY_NAME}</strong></h3><p>{COMPANY_ADDRESS_STREET_1}</p><p>{COMPANY_ADDRESS_STREET_2}</p><p>{COMPANY_CITY} {COMPANY_STATE}</p><p>{COMPANY_COUNTRY}  {COMPANY_ZIP_CODE}</p><p>{COMPANY_PHONE}</p>';
         $paymentFromCustomerAddress = '<h3>{BILLING_ADDRESS_NAME}</h3><p>{BILLING_ADDRESS_STREET_1}</p><p>{BILLING_ADDRESS_STREET_2}</p><p>{BILLING_CITY} {BILLING_STATE} {BILLING_ZIP_CODE}</p><p>{BILLING_COUNTRY}</p><p>{BILLING_PHONE}</p>';
-        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
+        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 6, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
         CompanySetting::setSettings($settings, $this->id);
     }
     public function setupDefaultData()


72) /var/www/app/Models/Company.php:245    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $shippingAddressFormat = '<h3>{SHIPPING_ADDRESS_NAME}</h3><p>{SHIPPING_ADDRESS_STREET_1}</p><p>{SHIPPING_ADDRESS_STREET_2}</p><p>{SHIPPING_CITY}  {SHIPPING_STATE}</p><p>{SHIPPING_COUNTRY}  {SHIPPING_ZIP_CODE}</p><p>{SHIPPING_PHONE}</p>';
         $companyAddressFormat = '<h3><strong>{COMPANY_NAME}</strong></h3><p>{COMPANY_ADDRESS_STREET_1}</p><p>{COMPANY_ADDRESS_STREET_2}</p><p>{COMPANY_CITY} {COMPANY_STATE}</p><p>{COMPANY_COUNTRY}  {COMPANY_ZIP_CODE}</p><p>{COMPANY_PHONE}</p>';
         $paymentFromCustomerAddress = '<h3>{BILLING_ADDRESS_NAME}</h3><p>{BILLING_ADDRESS_STREET_1}</p><p>{BILLING_ADDRESS_STREET_2}</p><p>{BILLING_CITY} {BILLING_STATE} {BILLING_ZIP_CODE}</p><p>{BILLING_COUNTRY}</p><p>{BILLING_PHONE}</p>';
-        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
+        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 8, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
         CompanySetting::setSettings($settings, $this->id);
     }
     public function setupDefaultData()


73) /var/www/app/Models/Company.php:249    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $shippingAddressFormat = '<h3>{SHIPPING_ADDRESS_NAME}</h3><p>{SHIPPING_ADDRESS_STREET_1}</p><p>{SHIPPING_ADDRESS_STREET_2}</p><p>{SHIPPING_CITY}  {SHIPPING_STATE}</p><p>{SHIPPING_COUNTRY}  {SHIPPING_ZIP_CODE}</p><p>{SHIPPING_PHONE}</p>';
         $companyAddressFormat = '<h3><strong>{COMPANY_NAME}</strong></h3><p>{COMPANY_ADDRESS_STREET_1}</p><p>{COMPANY_ADDRESS_STREET_2}</p><p>{COMPANY_CITY} {COMPANY_STATE}</p><p>{COMPANY_COUNTRY}  {COMPANY_ZIP_CODE}</p><p>{COMPANY_PHONE}</p>';
         $paymentFromCustomerAddress = '<h3>{BILLING_ADDRESS_NAME}</h3><p>{BILLING_ADDRESS_STREET_1}</p><p>{BILLING_ADDRESS_STREET_2}</p><p>{BILLING_CITY} {BILLING_STATE} {BILLING_ZIP_CODE}</p><p>{BILLING_COUNTRY}</p><p>{BILLING_PHONE}</p>';
-        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
+        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 6];
         CompanySetting::setSettings($settings, $this->id);
     }
     public function setupDefaultData()


74) /var/www/app/Models/Company.php:249    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $shippingAddressFormat = '<h3>{SHIPPING_ADDRESS_NAME}</h3><p>{SHIPPING_ADDRESS_STREET_1}</p><p>{SHIPPING_ADDRESS_STREET_2}</p><p>{SHIPPING_CITY}  {SHIPPING_STATE}</p><p>{SHIPPING_COUNTRY}  {SHIPPING_ZIP_CODE}</p><p>{SHIPPING_PHONE}</p>';
         $companyAddressFormat = '<h3><strong>{COMPANY_NAME}</strong></h3><p>{COMPANY_ADDRESS_STREET_1}</p><p>{COMPANY_ADDRESS_STREET_2}</p><p>{COMPANY_CITY} {COMPANY_STATE}</p><p>{COMPANY_COUNTRY}  {COMPANY_ZIP_CODE}</p><p>{COMPANY_PHONE}</p>';
         $paymentFromCustomerAddress = '<h3>{BILLING_ADDRESS_NAME}</h3><p>{BILLING_ADDRESS_STREET_1}</p><p>{BILLING_ADDRESS_STREET_2}</p><p>{BILLING_CITY} {BILLING_STATE} {BILLING_ZIP_CODE}</p><p>{BILLING_COUNTRY}</p><p>{BILLING_PHONE}</p>';
-        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
+        $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 8];
         CompanySetting::setSettings($settings, $this->id);
     }
     public function setupDefaultData()


75) /var/www/app/Models/Company.php:252    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $companyAddressFormat = '<h3><strong>{COMPANY_NAME}</strong></h3><p>{COMPANY_ADDRESS_STREET_1}</p><p>{COMPANY_ADDRESS_STREET_2}</p><p>{COMPANY_CITY} {COMPANY_STATE}</p><p>{COMPANY_COUNTRY}  {COMPANY_ZIP_CODE}</p><p>{COMPANY_PHONE}</p>';
         $paymentFromCustomerAddress = '<h3>{BILLING_ADDRESS_NAME}</h3><p>{BILLING_ADDRESS_STREET_1}</p><p>{BILLING_ADDRESS_STREET_2}</p><p>{BILLING_CITY} {BILLING_STATE} {BILLING_ZIP_CODE}</p><p>{BILLING_COUNTRY}</p><p>{BILLING_PHONE}</p>';
         $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
-        CompanySetting::setSettings($settings, $this->id);
+        
     }
     public function setupDefaultData()
     {


76) /var/www/app/Models/Company.php:255    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $settings = ['invoice_auto_generate' => 'YES', 'payment_auto_generate' => 'YES', 'estimate_auto_generate' => 'YES', 'save_pdf_to_disk' => 'NO', 'invoice_mail_body' => $defaultInvoiceEmailBody, 'estimate_mail_body' => $defaultEstimateEmailBody, 'payment_mail_body' => $defaultPaymentEmailBody, 'invoice_company_address_format' => $companyAddressFormat, 'invoice_shipping_address_format' => $shippingAddressFormat, 'invoice_billing_address_format' => $billingAddressFormat, 'estimate_company_address_format' => $companyAddressFormat, 'estimate_shipping_address_format' => $shippingAddressFormat, 'estimate_billing_address_format' => $billingAddressFormat, 'payment_company_address_format' => $companyAddressFormat, 'payment_from_customer_address_format' => $paymentFromCustomerAddress, 'currency' => request()->currency ?? 13, 'time_zone' => 'Asia/Kolkata', 'language' => 'en', 'fiscal_year' => '1-12', 'carbon_date_format' => 'Y/m/d', 'moment_date_format' => 'YYYY/MM/DD', 'notification_email' => 'noreply@crater.in', 'notify_invoice_viewed' => 'NO', 'notify_estimate_viewed' => 'NO', 'tax_per_item' => 'NO', 'discount_per_item' => 'NO', 'invoice_auto_generate' => 'YES', 'invoice_email_attachment' => 'NO', 'estimate_auto_generate' => 'YES', 'estimate_email_attachment' => 'NO', 'payment_auto_generate' => 'YES', 'payment_email_attachment' => 'NO', 'save_pdf_to_disk' => 'NO', 'retrospective_edits' => 'allow', 'invoice_number_format' => '{{SERIES:INV}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_number_format' => '{{SERIES:EST}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'payment_number_format' => '{{SERIES:PAY}}{{DELIMITER:-}}{{SEQUENCE:6}}', 'estimate_set_expiry_date_automatically' => 'YES', 'estimate_expiry_date_days' => 7, 'invoice_set_due_date_automatically' => 'YES', 'invoice_due_date_days' => 7, 'bulk_exchange_rate_configured' => 'YES', 'estimate_convert_action' => 'no_action', 'automatically_expire_public_links' => 'YES', 'link_expiry_days' => 7];
         CompanySetting::setSettings($settings, $this->id);
     }
-    public function setupDefaultData()
+    protected function setupDefaultData()
     {
         $this->setupRoles();
         $this->setupDefaultPaymentMethods();


77) /var/www/app/Models/Company.php:257    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function setupDefaultData()
     {
-        $this->setupRoles();
+        
         $this->setupDefaultPaymentMethods();
         $this->setupDefaultUnits();
         $this->setupDefaultSettings();


78) /var/www/app/Models/Company.php:258    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function setupDefaultData()
     {
         $this->setupRoles();
-        $this->setupDefaultPaymentMethods();
+        
         $this->setupDefaultUnits();
         $this->setupDefaultSettings();
         return true;


79) /var/www/app/Models/Company.php:259    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $this->setupRoles();
         $this->setupDefaultPaymentMethods();
-        $this->setupDefaultUnits();
+        
         $this->setupDefaultSettings();
         return true;
     }


80) /var/www/app/Models/Company.php:260    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->setupRoles();
         $this->setupDefaultPaymentMethods();
         $this->setupDefaultUnits();
-        $this->setupDefaultSettings();
+        
         return true;
     }
     public function deleteCompany($user)


81) /var/www/app/Models/Company.php:262    [M] TrueValue

--- Original
+++ New
@@ @@
         $this->setupDefaultPaymentMethods();
         $this->setupDefaultUnits();
         $this->setupDefaultSettings();
-        return true;
+        return false;
     }
     public function deleteCompany($user)
     {


82) /var/www/app/Models/CompanySetting.php:19    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Company::class);
     }
-    public function scopeWhereCompany($query, $company_id)
+    protected function scopeWhereCompany($query, $company_id)
     {
         $query->where('company_id', $company_id);
     }


83) /var/www/app/Models/CompanySetting.php:21    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query, $company_id)
     {
-        $query->where('company_id', $company_id);
+        
     }
     public static function setSettings($settings, $company_id)
     {


84) /var/www/app/Models/CompanySetting.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('company_id', $company_id);
     }
-    public static function setSettings($settings, $company_id)
+    protected static function setSettings($settings, $company_id)
     {
         foreach ($settings as $key => $value) {
             self::updateOrCreate(['option' => $key, 'company_id' => $company_id], ['option' => $key, 'company_id' => $company_id, 'value' => $value]);


85) /var/www/app/Models/CompanySetting.php:26    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public static function setSettings($settings, $company_id)
     {
-        foreach ($settings as $key => $value) {
+        foreach (array() as $key => $value) {
             self::updateOrCreate(['option' => $key, 'company_id' => $company_id], ['option' => $key, 'company_id' => $company_id, 'value' => $value]);
         }
     }


86) /var/www/app/Models/CompanySetting.php:27    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public static function setSettings($settings, $company_id)
     {
         foreach ($settings as $key => $value) {
-            self::updateOrCreate(['option' => $key, 'company_id' => $company_id], ['option' => $key, 'company_id' => $company_id, 'value' => $value]);
+            
         }
     }
     public static function getAllSettings($company_id)


87) /var/www/app/Models/CompanySetting.php:28    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public static function setSettings($settings, $company_id)
     {
         foreach ($settings as $key => $value) {
-            self::updateOrCreate(['option' => $key, 'company_id' => $company_id], ['option' => $key, 'company_id' => $company_id, 'value' => $value]);
+            self::updateOrCreate(['company_id' => $company_id], ['option' => $key, 'company_id' => $company_id, 'value' => $value]);
         }
     }
     public static function getAllSettings($company_id)


88) /var/www/app/Models/CompanySetting.php:32    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public static function setSettings($settings, $company_id)
     {
         foreach ($settings as $key => $value) {
-            self::updateOrCreate(['option' => $key, 'company_id' => $company_id], ['option' => $key, 'company_id' => $company_id, 'value' => $value]);
+            self::updateOrCreate(['option' => $key, 'company_id' => $company_id], ['company_id' => $company_id, 'value' => $value]);
         }
     }
     public static function getAllSettings($company_id)


89) /var/www/app/Models/CompanySetting.php:56    [M] PublicVisibility

--- Original
+++ New
@@ @@
             return [$item['option'] => $item['value']];
         });
     }
-    public static function getSetting($key, $company_id)
+    protected static function getSetting($key, $company_id)
     {
         $setting = static::whereOption($key)->whereCompany($company_id)->first();
         if ($setting) {


90) /var/www/app/Models/Customer.php:47    [M] PublicVisibility

--- Original
+++ New
@@ @@
     protected $with = ['currency'];
     protected $appends = ['formattedCreatedAt', 'avatar'];
     protected $casts = ['enable_portal' => 'boolean'];
-    public function getFormattedCreatedAtAttribute($value)
+    protected function getFormattedCreatedAtAttribute($value)
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->created_at)->format($dateFormat);


91) /var/www/app/Models/Customer.php:54    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->created_at)->format($dateFormat);
     }
-    public function setPasswordAttribute($value)
+    protected function setPasswordAttribute($value)
     {
         if ($value != null) {
             $this->attributes['password'] = bcrypt($value);


92) /var/www/app/Models/Customer.php:56    [M] NotEqual

--- Original
+++ New
@@ @@
     }
     public function setPasswordAttribute($value)
     {
-        if ($value != null) {
+        if ($value == null) {
             $this->attributes['password'] = bcrypt($value);
         }
     }


93) /var/www/app/Models/Customer.php:61    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $this->attributes['password'] = bcrypt($value);
         }
     }
-    public function estimates()
+    protected function estimates()
     {
         return $this->hasMany(Estimate::class);
     }


94) /var/www/app/Models/Customer.php:66    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Estimate::class);
     }
-    public function expenses()
+    protected function expenses()
     {
         return $this->hasMany(Expense::class);
     }


95) /var/www/app/Models/Customer.php:71    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Expense::class);
     }
-    public function invoices()
+    protected function invoices()
     {
         return $this->hasMany(Invoice::class);
     }


96) /var/www/app/Models/Customer.php:76    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Invoice::class);
     }
-    public function payments()
+    protected function payments()
     {
         return $this->hasMany(Payment::class);
     }


97) /var/www/app/Models/Customer.php:81    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Payment::class);
     }
-    public function addresses()
+    protected function addresses()
     {
         return $this->hasMany(Address::class);
     }


98) /var/www/app/Models/Customer.php:91    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(RecurringInvoice::class);
     }
-    public function currency()
+    protected function currency()
     {
         return $this->belongsTo(Currency::class);
     }


99) /var/www/app/Models/Customer.php:101    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Customer::class, 'creator_id');
     }
-    public function company()
+    protected function company()
     {
         return $this->belongsTo(Company::class);
     }


100) /var/www/app/Models/Customer.php:106    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Company::class);
     }
-    public function billingAddress()
+    protected function billingAddress()
     {
         return $this->hasOne(Address::class)->where('type', Address::BILLING_TYPE);
     }


101) /var/www/app/Models/Customer.php:111    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasOne(Address::class)->where('type', Address::BILLING_TYPE);
     }
-    public function shippingAddress()
+    protected function shippingAddress()
     {
         return $this->hasOne(Address::class)->where('type', Address::SHIPPING_TYPE);
     }


102) /var/www/app/Models/Customer.php:121    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->notify(new CustomerMailResetPasswordNotification($token));
     }
-    public function getAvatarAttribute()
+    protected function getAvatarAttribute()
     {
         $avatar = $this->getMedia('customer_avatar')->first();
         if ($avatar) {


103) /var/www/app/Models/Customer.php:129    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if ($avatar) {
             return asset($avatar->getUrl());
         }
-        return 0;
+        return -1;
     }
     public static function deleteCustomers($ids)
     {


104) /var/www/app/Models/Customer.php:129    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if ($avatar) {
             return asset($avatar->getUrl());
         }
-        return 0;
+        return 1;
     }
     public static function deleteCustomers($ids)
     {


105) /var/www/app/Models/Estimate.php:59    [M] PublicVisibility

--- Original
+++ New
@@ @@
     protected $appends = ['formattedExpiryDate', 'formattedEstimateDate', 'estimatePdfUrl'];
     protected $guarded = ['id'];
     protected $casts = ['total' => 'integer', 'tax' => 'integer', 'sub_total' => 'integer', 'discount' => 'float', 'discount_val' => 'integer', 'exchange_rate' => 'float'];
-    public function getEstimatePdfUrlAttribute()
+    protected function getEstimatePdfUrlAttribute()
     {
         return url('/estimates/pdf/' . $this->unique_hash);
     }


106) /var/www/app/Models/Estimate.php:61    [M] Concat

--- Original
+++ New
@@ @@
     protected $casts = ['total' => 'integer', 'tax' => 'integer', 'sub_total' => 'integer', 'discount' => 'float', 'discount_val' => 'integer', 'exchange_rate' => 'float'];
     public function getEstimatePdfUrlAttribute()
     {
-        return url('/estimates/pdf/' . $this->unique_hash);
+        return url($this->unique_hash . '/estimates/pdf/');
     }
     public function emailLogs()
     {


107) /var/www/app/Models/Estimate.php:61    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     protected $casts = ['total' => 'integer', 'tax' => 'integer', 'sub_total' => 'integer', 'discount' => 'float', 'discount_val' => 'integer', 'exchange_rate' => 'float'];
     public function getEstimatePdfUrlAttribute()
     {
-        return url('/estimates/pdf/' . $this->unique_hash);
+        return url($this->unique_hash);
     }
     public function emailLogs()
     {


108) /var/www/app/Models/Estimate.php:61    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     protected $casts = ['total' => 'integer', 'tax' => 'integer', 'sub_total' => 'integer', 'discount' => 'float', 'discount_val' => 'integer', 'exchange_rate' => 'float'];
     public function getEstimatePdfUrlAttribute()
     {
-        return url('/estimates/pdf/' . $this->unique_hash);
+        return url('/estimates/pdf/');
     }
     public function emailLogs()
     {


109) /var/www/app/Models/Estimate.php:61    [M] FunctionCall

--- Original
+++ New
@@ @@
     protected $casts = ['total' => 'integer', 'tax' => 'integer', 'sub_total' => 'integer', 'discount' => 'float', 'discount_val' => 'integer', 'exchange_rate' => 'float'];
     public function getEstimatePdfUrlAttribute()
     {
-        return url('/estimates/pdf/' . $this->unique_hash);
+        url('/estimates/pdf/' . $this->unique_hash);
+        return null;
     }
     public function emailLogs()
     {


110) /var/www/app/Models/Estimate.php:69    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->morphMany('App\\Models\\EmailLog', 'mailable');
     }
-    public function items()
+    protected function items()
     {
         return $this->hasMany('Crater\\Models\\EstimateItem');
     }


111) /var/www/app/Models/Estimate.php:74    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany('Crater\\Models\\EstimateItem');
     }
-    public function customer()
+    protected function customer()
     {
         return $this->belongsTo(Customer::class, 'customer_id');
     }


112) /var/www/app/Models/Estimate.php:79    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Customer::class, 'customer_id');
     }
-    public function creator()
+    protected function creator()
     {
         return $this->belongsTo('Crater\\Models\\User', 'creator_id');
     }


113) /var/www/app/Models/Estimate.php:84    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo('Crater\\Models\\User', 'creator_id');
     }
-    public function company()
+    protected function company()
     {
         return $this->belongsTo('Crater\\Models\\Company');
     }


114) /var/www/app/Models/Estimate.php:89    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo('Crater\\Models\\Company');
     }
-    public function currency()
+    protected function currency()
     {
         return $this->belongsTo(Currency::class);
     }


115) /var/www/app/Models/Estimate.php:94    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Currency::class);
     }
-    public function taxes()
+    protected function taxes()
     {
         return $this->hasMany(Tax::class);
     }


116) /var/www/app/Models/Estimate.php:99    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Tax::class);
     }
-    public function getFormattedExpiryDateAttribute($value)
+    protected function getFormattedExpiryDateAttribute($value)
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->expiry_date)->format($dateFormat);


117) /var/www/app/Models/Estimate.php:106    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->expiry_date)->format($dateFormat);
     }
-    public function getFormattedEstimateDateAttribute($value)
+    protected function getFormattedEstimateDateAttribute($value)
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->estimate_date)->format($dateFormat);


118) /var/www/app/Models/Estimate.php:113    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->estimate_date)->format($dateFormat);
     }
-    public function scopeEstimatesBetween($query, $start, $end)
+    protected function scopeEstimatesBetween($query, $start, $end)
     {
         return $query->whereBetween('estimates.estimate_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
     }


119) /var/www/app/Models/Estimate.php:117    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeEstimatesBetween($query, $start, $end)
     {
-        return $query->whereBetween('estimates.estimate_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+        return $query->whereBetween('estimates.estimate_date', [$end->format('Y-m-d')]);
     }
     public function scopeWhereStatus($query, $status)
     {


120) /var/www/app/Models/Estimate.php:126    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('estimates.status', $status);
     }
-    public function scopeWhereEstimateNumber($query, $estimateNumber)
+    protected function scopeWhereEstimateNumber($query, $estimateNumber)
     {
         return $query->where('estimates.estimate_number', 'LIKE', '%' . $estimateNumber . '%');
     }


121) /var/www/app/Models/Estimate.php:128    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereEstimateNumber($query, $estimateNumber)
     {
-        return $query->where('estimates.estimate_number', 'LIKE', '%' . $estimateNumber . '%');
+        return $query->where('estimates.estimate_number', 'LIKE', $estimateNumber . '%' . '%');
     }
     public function scopeWhereEstimate($query, $estimate_id)
     {


122) /var/www/app/Models/Estimate.php:128    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereEstimateNumber($query, $estimateNumber)
     {
-        return $query->where('estimates.estimate_number', 'LIKE', '%' . $estimateNumber . '%');
+        return $query->where('estimates.estimate_number', 'LIKE', $estimateNumber . '%');
     }
     public function scopeWhereEstimate($query, $estimate_id)
     {


123) /var/www/app/Models/Estimate.php:128    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereEstimateNumber($query, $estimateNumber)
     {
-        return $query->where('estimates.estimate_number', 'LIKE', '%' . $estimateNumber . '%');
+        return $query->where('estimates.estimate_number', 'LIKE', '%' . '%');
     }
     public function scopeWhereEstimate($query, $estimate_id)
     {


124) /var/www/app/Models/Estimate.php:128    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereEstimateNumber($query, $estimateNumber)
     {
-        return $query->where('estimates.estimate_number', 'LIKE', '%' . $estimateNumber . '%');
+        return $query->where('estimates.estimate_number', 'LIKE', '%' . '%' . $estimateNumber);
     }
     public function scopeWhereEstimate($query, $estimate_id)
     {


125) /var/www/app/Models/Estimate.php:128    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereEstimateNumber($query, $estimateNumber)
     {
-        return $query->where('estimates.estimate_number', 'LIKE', '%' . $estimateNumber . '%');
+        return $query->where('estimates.estimate_number', 'LIKE', '%' . $estimateNumber);
     }
     public function scopeWhereEstimate($query, $estimate_id)
     {


126) /var/www/app/Models/Estimate.php:136    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orWhere('id', $estimate_id);
     }
-    public function scopeWhereSearch($query, $search)
+    protected function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {


127) /var/www/app/Models/Estimate.php:138    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        foreach (explode(' ', $search) as $term) {
+        foreach (array() as $term) {
             $query->whereHas('customer', function ($query) use($term) {
                 $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });


128) /var/www/app/Models/Estimate.php:139    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
-            });
+            
         }
     }
     public function scopeApplyFilters($query, array $filters)


129) /var/www/app/Models/Estimate.php:140    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%' . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


130) /var/www/app/Models/Estimate.php:140    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


131) /var/www/app/Models/Estimate.php:140    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


132) /var/www/app/Models/Estimate.php:140    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%' . $term)->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


133) /var/www/app/Models/Estimate.php:140    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term)->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


134) /var/www/app/Models/Estimate.php:140    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                
             });
         }
     }


135) /var/www/app/Models/Estimate.php:141    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', $term . '%' . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


136) /var/www/app/Models/Estimate.php:141    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


137) /var/www/app/Models/Estimate.php:141    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


138) /var/www/app/Models/Estimate.php:141    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . '%' . $term)->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


139) /var/www/app/Models/Estimate.php:141    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term)->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


140) /var/www/app/Models/Estimate.php:142    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', $term . '%' . '%');
             });
         }
     }


141) /var/www/app/Models/Estimate.php:142    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', $term . '%');
             });
         }
     }


142) /var/www/app/Models/Estimate.php:142    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . '%');
             });
         }
     }


143) /var/www/app/Models/Estimate.php:142    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . '%' . $term);
             });
         }
     }


144) /var/www/app/Models/Estimate.php:142    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term);
             });
         }
     }


145) /var/www/app/Models/Estimate.php:147    [M] PublicVisibility

--- Original
+++ New
@@ @@
             });
         }
     }
-    public function scopeApplyFilters($query, array $filters)
+    protected function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('search')) {


146) /var/www/app/Models/Estimate.php:152    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $filters = collect($filters);
         if ($filters->get('search')) {
-            $query->whereSearch($filters->get('search'));
+            
         }
         if ($filters->get('estimate_number')) {
             $query->whereEstimateNumber($filters->get('estimate_number'));


147) /var/www/app/Models/Estimate.php:156    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
         if ($filters->get('estimate_number')) {
-            $query->whereEstimateNumber($filters->get('estimate_number'));
+            
         }
         if ($filters->get('status')) {
             $query->whereStatus($filters->get('status'));


148) /var/www/app/Models/Estimate.php:167    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if ($filters->get('estimate_id')) {
             $query->whereEstimate($filters->get('estimate_id'));
         }
-        if ($filters->get('from_date') && $filters->get('to_date')) {
+        if ($filters->get('from_date') || $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
             $query->estimatesBetween($start, $end);


149) /var/www/app/Models/Estimate.php:170    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
-            $query->estimatesBetween($start, $end);
+            
         }
         if ($filters->get('customer_id')) {
             $query->whereCustomer($filters->get('customer_id'));


150) /var/www/app/Models/Estimate.php:177    [M] LogicalOr

--- Original
+++ New
@@ @@
         if ($filters->get('customer_id')) {
             $query->whereCustomer($filters->get('customer_id'));
         }
-        if ($filters->get('orderByField') || $filters->get('orderBy')) {
+        if ($filters->get('orderByField') && $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'desc';
             $query->whereOrder($field, $orderBy);


151) /var/www/app/Models/Estimate.php:189    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orderBy($orderByField, $orderBy);
     }
-    public function scopeWhereCompany($query)
+    protected function scopeWhereCompany($query)
     {
         $query->where('estimates.company_id', request()->header('company'));
     }


152) /var/www/app/Models/Estimate.php:191    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query)
     {
-        $query->where('estimates.company_id', request()->header('company'));
+        
     }
     public function scopeWhereCustomer($query, $customer_id)
     {


153) /var/www/app/Models/Estimate.php:199    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('estimates.customer_id', $customer_id);
     }
-    public function scopePaginateData($query, $limit)
+    protected function scopePaginateData($query, $limit)
     {
         if ($limit == 'all') {
             return $query->get();


154) /var/www/app/Models/Estimate.php:201    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit = 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


155) /var/www/app/Models/Estimate.php:201    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit != 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


156) /var/www/app/Models/Estimate.php:208    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $query->paginate($limit);
     }
-    public static function createEstimate($request)
+    protected static function createEstimate($request)
     {
         $data = $request->getEstimatePayload();
         if ($request->has('estimateSend')) {


157) /var/www/app/Models/Estimate.php:226    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $serial = (new SerialNumberFormatter())->setModel($estimate)->setCompany($estimate->company_id)->setCustomer($estimate->customer_id)->setNextNumbers();
         $estimate->sequence_number = $serial->nextSequenceNumber;
         $estimate->customer_sequence_number = $serial->nextCustomerSequenceNumber;
-        $estimate->save();
+        
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($estimate);


158) /var/www/app/Models/Estimate.php:230    [M] CastString

--- Original
+++ New
@@ @@
         $estimate->customer_sequence_number = $serial->nextCustomerSequenceNumber;
         $estimate->save();
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $data['currency_id'] !== $company_currency) {
+        if ($data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($estimate);
         }
         self::createItems($estimate, $request, $estimate->exchange_rate);


159) /var/www/app/Models/Estimate.php:230    [M] NotIdentical

--- Original
+++ New
@@ @@
         $estimate->customer_sequence_number = $serial->nextCustomerSequenceNumber;
         $estimate->save();
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $data['currency_id'] !== $company_currency) {
+        if ((string) $data['currency_id'] === $company_currency) {
             ExchangeRateLog::addExchangeRateLog($estimate);
         }
         self::createItems($estimate, $request, $estimate->exchange_rate);


160) /var/www/app/Models/Estimate.php:231    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $estimate->save();
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $data['currency_id'] !== $company_currency) {
-            ExchangeRateLog::addExchangeRateLog($estimate);
+            
         }
         self::createItems($estimate, $request, $estimate->exchange_rate);
         if ($request->has('taxes') && !empty($request->taxes)) {


161) /var/www/app/Models/Estimate.php:234    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ((string) $data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($estimate);
         }
-        self::createItems($estimate, $request, $estimate->exchange_rate);
+        
         if ($request->has('taxes') && !empty($request->taxes)) {
             self::createTaxes($estimate, $request, $estimate->exchange_rate);
         }


162) /var/www/app/Models/Estimate.php:236    [M] LogicalNot

--- Original
+++ New
@@ @@
             ExchangeRateLog::addExchangeRateLog($estimate);
         }
         self::createItems($estimate, $request, $estimate->exchange_rate);
-        if ($request->has('taxes') && !empty($request->taxes)) {
+        if ($request->has('taxes') && empty($request->taxes)) {
             self::createTaxes($estimate, $request, $estimate->exchange_rate);
         }
         $customFields = $request->customFields;


163) /var/www/app/Models/Estimate.php:236    [M] LogicalAnd

--- Original
+++ New
@@ @@
             ExchangeRateLog::addExchangeRateLog($estimate);
         }
         self::createItems($estimate, $request, $estimate->exchange_rate);
-        if ($request->has('taxes') && !empty($request->taxes)) {
+        if ($request->has('taxes') || !empty($request->taxes)) {
             self::createTaxes($estimate, $request, $estimate->exchange_rate);
         }
         $customFields = $request->customFields;


164) /var/www/app/Models/Estimate.php:237    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         self::createItems($estimate, $request, $estimate->exchange_rate);
         if ($request->has('taxes') && !empty($request->taxes)) {
-            self::createTaxes($estimate, $request, $estimate->exchange_rate);
+            
         }
         $customFields = $request->customFields;
         if ($customFields) {


165) /var/www/app/Models/Estimate.php:249    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $estimate;
     }
-    public function updateEstimate($request)
+    protected function updateEstimate($request)
     {
         $data = $request->getEstimatePayload();
         $serial = (new SerialNumberFormatter())->setModel($this)->setCompany($this->company_id)->setCustomer($request->customer_id)->setModelObject($this->id)->setNextNumbers();


166) /var/www/app/Models/Estimate.php:262    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $data = $request->getEstimatePayload();
         $serial = (new SerialNumberFormatter())->setModel($this)->setCompany($this->company_id)->setCustomer($request->customer_id)->setModelObject($this->id)->setNextNumbers();
         $data['customer_sequence_number'] = $serial->nextCustomerSequenceNumber;
-        $this->update($data);
+        
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);


167) /var/www/app/Models/Estimate.php:266    [M] CastString

--- Original
+++ New
@@ @@
         $data['customer_sequence_number'] = $serial->nextCustomerSequenceNumber;
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $data['currency_id'] !== $company_currency) {
+        if ($data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);
         }
         $this->items->map(function ($item) {


168) /var/www/app/Models/Estimate.php:266    [M] NotIdentical

--- Original
+++ New
@@ @@
         $data['customer_sequence_number'] = $serial->nextCustomerSequenceNumber;
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $data['currency_id'] !== $company_currency) {
+        if ((string) $data['currency_id'] === $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);
         }
         $this->items->map(function ($item) {


169) /var/www/app/Models/Estimate.php:267    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $data['currency_id'] !== $company_currency) {
-            ExchangeRateLog::addExchangeRateLog($this);
+            
         }
         $this->items->map(function ($item) {
             $fields = $item->fields()->get();


170) /var/www/app/Models/Estimate.php:270    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ((string) $data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);
         }
-        $this->items->map(function ($item) {
-            $fields = $item->fields()->get();
-            $fields->map(function ($field) {
-                $field->delete();
-            });
-        });
+        
         $this->items()->delete();
         $this->taxes()->delete();
         self::createItems($this, $request, $this->exchange_rate);


171) /var/www/app/Models/Estimate.php:273    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         $this->items->map(function ($item) {
             $fields = $item->fields()->get();
-            $fields->map(function ($field) {
-                $field->delete();
-            });
+            
         });
         $this->items()->delete();
         $this->taxes()->delete();


172) /var/www/app/Models/Estimate.php:278    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $field->delete();
             });
         });
-        $this->items()->delete();
+        
         $this->taxes()->delete();
         self::createItems($this, $request, $this->exchange_rate);
         if ($request->has('taxes') && !empty($request->taxes)) {


173) /var/www/app/Models/Estimate.php:279    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             });
         });
         $this->items()->delete();
-        $this->taxes()->delete();
+        
         self::createItems($this, $request, $this->exchange_rate);
         if ($request->has('taxes') && !empty($request->taxes)) {
             self::createTaxes($this, $request, $this->exchange_rate);


174) /var/www/app/Models/Estimate.php:281    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         });
         $this->items()->delete();
         $this->taxes()->delete();
-        self::createItems($this, $request, $this->exchange_rate);
+        
         if ($request->has('taxes') && !empty($request->taxes)) {
             self::createTaxes($this, $request, $this->exchange_rate);
         }


175) /var/www/app/Models/Estimate.php:283    [M] LogicalNot

--- Original
+++ New
@@ @@
         $this->items()->delete();
         $this->taxes()->delete();
         self::createItems($this, $request, $this->exchange_rate);
-        if ($request->has('taxes') && !empty($request->taxes)) {
+        if ($request->has('taxes') && empty($request->taxes)) {
             self::createTaxes($this, $request, $this->exchange_rate);
         }
         if ($request->customFields) {


176) /var/www/app/Models/Estimate.php:283    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $this->items()->delete();
         $this->taxes()->delete();
         self::createItems($this, $request, $this->exchange_rate);
-        if ($request->has('taxes') && !empty($request->taxes)) {
+        if ($request->has('taxes') || !empty($request->taxes)) {
             self::createTaxes($this, $request, $this->exchange_rate);
         }
         if ($request->customFields) {


177) /var/www/app/Models/Estimate.php:284    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->taxes()->delete();
         self::createItems($this, $request, $this->exchange_rate);
         if ($request->has('taxes') && !empty($request->taxes)) {
-            self::createTaxes($this, $request, $this->exchange_rate);
+            
         }
         if ($request->customFields) {
             $this->updateCustomFields($request->customFields);


178) /var/www/app/Models/Estimate.php:291    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         if ($request->customFields) {
             $this->updateCustomFields($request->customFields);
         }
-        return Estimate::with(['items.taxes', 'items.fields', 'items.fields.customField', 'customer', 'taxes'])->find($this->id);
+        return Estimate::with(['items.fields', 'items.fields.customField', 'customer', 'taxes'])->find($this->id);
     }
     public static function createItems($estimate, $request, $exchange_rate)
     {


179) /var/www/app/Models/Estimate.php:301    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return Estimate::with(['items.taxes', 'items.fields', 'items.fields.customField', 'customer', 'taxes'])->find($this->id);
     }
-    public static function createItems($estimate, $request, $exchange_rate)
+    protected static function createItems($estimate, $request, $exchange_rate)
     {
         $estimateItems = $request->items;
         foreach ($estimateItems as $estimateItem) {


180) /var/www/app/Models/Estimate.php:305    [M] Foreach_

--- Original
+++ New
@@ @@
     public static function createItems($estimate, $request, $exchange_rate)
     {
         $estimateItems = $request->items;
-        foreach ($estimateItems as $estimateItem) {
+        foreach (array() as $estimateItem) {
             $estimateItem['company_id'] = $request->header('company');
             $estimateItem['exchange_rate'] = $exchange_rate;
             $estimateItem['base_price'] = $estimateItem['price'] * $exchange_rate;


181) /var/www/app/Models/Estimate.php:308    [M] Multiplication

--- Original
+++ New
@@ @@
         foreach ($estimateItems as $estimateItem) {
             $estimateItem['company_id'] = $request->header('company');
             $estimateItem['exchange_rate'] = $exchange_rate;
-            $estimateItem['base_price'] = $estimateItem['price'] * $exchange_rate;
+            $estimateItem['base_price'] = $estimateItem['price'] / $exchange_rate;
             $estimateItem['base_discount_val'] = $estimateItem['discount_val'] * $exchange_rate;
             $estimateItem['base_tax'] = $estimate['tax'] * $exchange_rate;
             $estimateItem['base_total'] = $estimateItem['total'] * $exchange_rate;


182) /var/www/app/Models/Estimate.php:309    [M] Multiplication

--- Original
+++ New
@@ @@
             $estimateItem['company_id'] = $request->header('company');
             $estimateItem['exchange_rate'] = $exchange_rate;
             $estimateItem['base_price'] = $estimateItem['price'] * $exchange_rate;
-            $estimateItem['base_discount_val'] = $estimateItem['discount_val'] * $exchange_rate;
+            $estimateItem['base_discount_val'] = $estimateItem['discount_val'] / $exchange_rate;
             $estimateItem['base_tax'] = $estimate['tax'] * $exchange_rate;
             $estimateItem['base_total'] = $estimateItem['total'] * $exchange_rate;
             $item = $estimate->items()->create($estimateItem);


183) /var/www/app/Models/Estimate.php:310    [M] Multiplication

--- Original
+++ New
@@ @@
             $estimateItem['exchange_rate'] = $exchange_rate;
             $estimateItem['base_price'] = $estimateItem['price'] * $exchange_rate;
             $estimateItem['base_discount_val'] = $estimateItem['discount_val'] * $exchange_rate;
-            $estimateItem['base_tax'] = $estimate['tax'] * $exchange_rate;
+            $estimateItem['base_tax'] = $estimate['tax'] / $exchange_rate;
             $estimateItem['base_total'] = $estimateItem['total'] * $exchange_rate;
             $item = $estimate->items()->create($estimateItem);
             if (array_key_exists('taxes', $estimateItem) && $estimateItem['taxes']) {


184) /var/www/app/Models/Estimate.php:311    [M] Multiplication

--- Original
+++ New
@@ @@
             $estimateItem['base_price'] = $estimateItem['price'] * $exchange_rate;
             $estimateItem['base_discount_val'] = $estimateItem['discount_val'] * $exchange_rate;
             $estimateItem['base_tax'] = $estimate['tax'] * $exchange_rate;
-            $estimateItem['base_total'] = $estimateItem['total'] * $exchange_rate;
+            $estimateItem['base_total'] = $estimateItem['total'] / $exchange_rate;
             $item = $estimate->items()->create($estimateItem);
             if (array_key_exists('taxes', $estimateItem) && $estimateItem['taxes']) {
                 foreach ($estimateItem['taxes'] as $tax) {


185) /var/www/app/Models/Estimate.php:315    [M] LogicalAnd

--- Original
+++ New
@@ @@
             $estimateItem['base_tax'] = $estimate['tax'] * $exchange_rate;
             $estimateItem['base_total'] = $estimateItem['total'] * $exchange_rate;
             $item = $estimate->items()->create($estimateItem);
-            if (array_key_exists('taxes', $estimateItem) && $estimateItem['taxes']) {
+            if (array_key_exists('taxes', $estimateItem) || $estimateItem['taxes']) {
                 foreach ($estimateItem['taxes'] as $tax) {
                     if (gettype($tax['amount']) !== "NULL") {
                         $tax['company_id'] = $request->header('company');


186) /var/www/app/Models/Estimate.php:316    [M] Foreach_

--- Original
+++ New
@@ @@
             $estimateItem['base_total'] = $estimateItem['total'] * $exchange_rate;
             $item = $estimate->items()->create($estimateItem);
             if (array_key_exists('taxes', $estimateItem) && $estimateItem['taxes']) {
-                foreach ($estimateItem['taxes'] as $tax) {
+                foreach (array() as $tax) {
                     if (gettype($tax['amount']) !== "NULL") {
                         $tax['company_id'] = $request->header('company');
                         $item->taxes()->create($tax);


187) /var/www/app/Models/Estimate.php:317    [M] NotIdentical

--- Original
+++ New
@@ @@
             $item = $estimate->items()->create($estimateItem);
             if (array_key_exists('taxes', $estimateItem) && $estimateItem['taxes']) {
                 foreach ($estimateItem['taxes'] as $tax) {
-                    if (gettype($tax['amount']) !== "NULL") {
+                    if (gettype($tax['amount']) === "NULL") {
                         $tax['company_id'] = $request->header('company');
                         $item->taxes()->create($tax);
                     }


188) /var/www/app/Models/Estimate.php:319    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 foreach ($estimateItem['taxes'] as $tax) {
                     if (gettype($tax['amount']) !== "NULL") {
                         $tax['company_id'] = $request->header('company');
-                        $item->taxes()->create($tax);
+                        
                     }
                 }
             }


189) /var/www/app/Models/Estimate.php:324    [M] LogicalAnd

--- Original
+++ New
@@ @@
                     }
                 }
             }
-            if (array_key_exists('custom_fields', $estimateItem) && $estimateItem['custom_fields']) {
+            if (array_key_exists('custom_fields', $estimateItem) || $estimateItem['custom_fields']) {
                 $item->addCustomFields($estimateItem['custom_fields']);
             }
         }


190) /var/www/app/Models/Estimate.php:330    [M] PublicVisibility

--- Original
+++ New
@@ @@
             }
         }
     }
-    public static function createTaxes($estimate, $request, $exchange_rate)
+    protected static function createTaxes($estimate, $request, $exchange_rate)
     {
         $estimateTaxes = $request->taxes;
         foreach ($estimateTaxes as $tax) {


191) /var/www/app/Models/Estimate.php:334    [M] Foreach_

--- Original
+++ New
@@ @@
     public static function createTaxes($estimate, $request, $exchange_rate)
     {
         $estimateTaxes = $request->taxes;
-        foreach ($estimateTaxes as $tax) {
+        foreach (array() as $tax) {
             if (gettype($tax['amount']) !== "NULL") {
                 $tax['company_id'] = $request->header('company');
                 $tax['exchange_rate'] = $exchange_rate;


192) /var/www/app/Models/Estimate.php:335    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
         $estimateTaxes = $request->taxes;
         foreach ($estimateTaxes as $tax) {
-            if (gettype($tax['amount']) !== "NULL") {
+            if (gettype($tax['amount']) === "NULL") {
                 $tax['company_id'] = $request->header('company');
                 $tax['exchange_rate'] = $exchange_rate;
                 $tax['base_amount'] = $tax['amount'] * $exchange_rate;


193) /var/www/app/Models/Estimate.php:338    [M] Multiplication

--- Original
+++ New
@@ @@
             if (gettype($tax['amount']) !== "NULL") {
                 $tax['company_id'] = $request->header('company');
                 $tax['exchange_rate'] = $exchange_rate;
-                $tax['base_amount'] = $tax['amount'] * $exchange_rate;
+                $tax['base_amount'] = $tax['amount'] / $exchange_rate;
                 $tax['currency_id'] = $estimate->currency_id;
                 $estimate->taxes()->create($tax);
             }


194) /var/www/app/Models/Estimate.php:341    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $tax['exchange_rate'] = $exchange_rate;
                 $tax['base_amount'] = $tax['amount'] * $exchange_rate;
                 $tax['currency_id'] = $estimate->currency_id;
-                $estimate->taxes()->create($tax);
+                
             }
         }
     }


195) /var/www/app/Models/Estimate.php:346    [M] PublicVisibility

--- Original
+++ New
@@ @@
             }
         }
     }
-    public function sendEstimateData($data)
+    protected function sendEstimateData($data)
     {
         $data['estimate'] = $this->toArray();
         $data['user'] = $this->customer->toArray();


196) /var/www/app/Models/Estimate.php:352    [M] Ternary

--- Original
+++ New
@@ @@
         $data['user'] = $this->customer->toArray();
         $data['company'] = $this->company->toArray();
         $data['body'] = $this->getEmailBody($data['body']);
-        $data['attach']['data'] = $this->getEmailAttachmentSetting() ? $this->getPDFData() : null;
+        $data['attach']['data'] = $this->getEmailAttachmentSetting() ? null : $this->getPDFData();
         return $data;
     }
     public function send($data)


197) /var/www/app/Models/Estimate.php:357    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $data['attach']['data'] = $this->getEmailAttachmentSetting() ? $this->getPDFData() : null;
         return $data;
     }
-    public function send($data)
+    protected function send($data)
     {
         $data = $this->sendEstimateData($data);
         if ($this->status == Estimate::STATUS_DRAFT) {


198) /var/www/app/Models/Estimate.php:361    [M] Equal

--- Original
+++ New
@@ @@
     public function send($data)
     {
         $data = $this->sendEstimateData($data);
-        if ($this->status == Estimate::STATUS_DRAFT) {
+        if ($this->status != Estimate::STATUS_DRAFT) {
             $this->status = Estimate::STATUS_SENT;
             $this->save();
         }


199) /var/www/app/Models/Estimate.php:363    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $data = $this->sendEstimateData($data);
         if ($this->status == Estimate::STATUS_DRAFT) {
             $this->status = Estimate::STATUS_SENT;
-            $this->save();
+            
         }
         \Mail::to($data['to'])->send(new SendEstimateMail($data));
         return ['success' => true, 'type' => 'send'];


200) /var/www/app/Models/Estimate.php:366    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->status = Estimate::STATUS_SENT;
             $this->save();
         }
-        \Mail::to($data['to'])->send(new SendEstimateMail($data));
+        
         return ['success' => true, 'type' => 'send'];
     }
     public function getPDFData()


201) /var/www/app/Models/Estimate.php:368    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $this->save();
         }
         \Mail::to($data['to'])->send(new SendEstimateMail($data));
-        return ['success' => true, 'type' => 'send'];
+        return ['type' => 'send'];
     }
     public function getPDFData()
     {


202) /var/www/app/Models/Estimate.php:369    [M] TrueValue

--- Original
+++ New
@@ @@
             $this->save();
         }
         \Mail::to($data['to'])->send(new SendEstimateMail($data));
-        return ['success' => true, 'type' => 'send'];
+        return ['success' => false, 'type' => 'send'];
     }
     public function getPDFData()
     {


203) /var/www/app/Models/Estimate.php:455    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $format = CompanySetting::getSetting('estimate_billing_address_format', $this->company_id);
         return $this->getFormattedString($format);
     }
-    public function getNotes()
+    protected function getNotes()
     {
         return $this->getFormattedString($this->notes);
     }


204) /var/www/app/Models/Estimate.php:460    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->getFormattedString($this->notes);
     }
-    public function getEmailAttachmentSetting()
+    protected function getEmailAttachmentSetting()
     {
         $estimateAsAttachment = CompanySetting::getSetting('estimate_email_attachment', $this->company_id);
         if ($estimateAsAttachment == 'NO') {


205) /var/www/app/Models/Estimate.php:464    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     public function getEmailAttachmentSetting()
     {
         $estimateAsAttachment = CompanySetting::getSetting('estimate_email_attachment', $this->company_id);
-        if ($estimateAsAttachment == 'NO') {
+        if ($estimateAsAttachment = 'NO') {
             return false;
         }
         return true;


206) /var/www/app/Models/Estimate.php:464    [M] Equal

--- Original
+++ New
@@ @@
     public function getEmailAttachmentSetting()
     {
         $estimateAsAttachment = CompanySetting::getSetting('estimate_email_attachment', $this->company_id);
-        if ($estimateAsAttachment == 'NO') {
+        if ($estimateAsAttachment != 'NO') {
             return false;
         }
         return true;


207) /var/www/app/Models/Estimate.php:465    [M] FalseValue

--- Original
+++ New
@@ @@
     {
         $estimateAsAttachment = CompanySetting::getSetting('estimate_email_attachment', $this->company_id);
         if ($estimateAsAttachment == 'NO') {
-            return false;
+            return true;
         }
         return true;
     }


208) /var/www/app/Models/Estimate.php:471    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return true;
     }
-    public function getEmailBody($body)
+    protected function getEmailBody($body)
     {
         $values = array_merge($this->getFieldsArray(), $this->getExtraFields());
         $body = strtr($body, $values);


209) /var/www/app/Models/Estimate.php:473    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
     }
     public function getEmailBody($body)
     {
-        $values = array_merge($this->getFieldsArray(), $this->getExtraFields());
+        $values = $this->getFieldsArray();
         $body = strtr($body, $values);
         return preg_replace('/{(.*?)}/', '', $body);
     }


210) /var/www/app/Models/Estimate.php:473    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
     }
     public function getEmailBody($body)
     {
-        $values = array_merge($this->getFieldsArray(), $this->getExtraFields());
+        $values = $this->getExtraFields();
         $body = strtr($body, $values);
         return preg_replace('/{(.*?)}/', '', $body);
     }


211) /var/www/app/Models/Estimate.php:477    [M] FunctionCall

--- Original
+++ New
@@ @@
     {
         $values = array_merge($this->getFieldsArray(), $this->getExtraFields());
         $body = strtr($body, $values);
-        return preg_replace('/{(.*?)}/', '', $body);
+        preg_replace('/{(.*?)}/', '', $body);
+        return null;
     }
     public function getExtraFields()
     {


212) /var/www/app/Models/Estimate.php:480    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $body = strtr($body, $values);
         return preg_replace('/{(.*?)}/', '', $body);
     }
-    public function getExtraFields()
+    protected function getExtraFields()
     {
         return ['{ESTIMATE_DATE}' => $this->formattedEstimateDate, '{ESTIMATE_EXPIRY_DATE}' => $this->formattedExpiryDate, '{ESTIMATE_NUMBER}' => $this->estimate_number, '{ESTIMATE_REF_NUMBER}' => $this->reference_number];
     }


213) /var/www/app/Models/Estimate.php:482    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getExtraFields()
     {
-        return ['{ESTIMATE_DATE}' => $this->formattedEstimateDate, '{ESTIMATE_EXPIRY_DATE}' => $this->formattedExpiryDate, '{ESTIMATE_NUMBER}' => $this->estimate_number, '{ESTIMATE_REF_NUMBER}' => $this->reference_number];
+        return ['{ESTIMATE_EXPIRY_DATE}' => $this->formattedExpiryDate, '{ESTIMATE_NUMBER}' => $this->estimate_number, '{ESTIMATE_REF_NUMBER}' => $this->reference_number];
     }
     public static function estimateTemplates()
     {


214) /var/www/app/Models/Estimate.php:483    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function getExtraFields()
     {
-        return ['{ESTIMATE_DATE}' => $this->formattedEstimateDate, '{ESTIMATE_EXPIRY_DATE}' => $this->formattedExpiryDate, '{ESTIMATE_NUMBER}' => $this->estimate_number, '{ESTIMATE_REF_NUMBER}' => $this->reference_number];
+        return ['{ESTIMATE_DATE}' > $this->formattedEstimateDate, '{ESTIMATE_EXPIRY_DATE}' => $this->formattedExpiryDate, '{ESTIMATE_NUMBER}' => $this->estimate_number, '{ESTIMATE_REF_NUMBER}' => $this->reference_number];
     }
     public static function estimateTemplates()
     {


215) /var/www/app/Models/Estimate.php:484    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function getExtraFields()
     {
-        return ['{ESTIMATE_DATE}' => $this->formattedEstimateDate, '{ESTIMATE_EXPIRY_DATE}' => $this->formattedExpiryDate, '{ESTIMATE_NUMBER}' => $this->estimate_number, '{ESTIMATE_REF_NUMBER}' => $this->reference_number];
+        return ['{ESTIMATE_DATE}' => $this->formattedEstimateDate, '{ESTIMATE_EXPIRY_DATE}' > $this->formattedExpiryDate, '{ESTIMATE_NUMBER}' => $this->estimate_number, '{ESTIMATE_REF_NUMBER}' => $this->reference_number];
     }
     public static function estimateTemplates()
     {


216) /var/www/app/Models/Estimate.php:485    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function getExtraFields()
     {
-        return ['{ESTIMATE_DATE}' => $this->formattedEstimateDate, '{ESTIMATE_EXPIRY_DATE}' => $this->formattedExpiryDate, '{ESTIMATE_NUMBER}' => $this->estimate_number, '{ESTIMATE_REF_NUMBER}' => $this->reference_number];
+        return ['{ESTIMATE_DATE}' => $this->formattedEstimateDate, '{ESTIMATE_EXPIRY_DATE}' => $this->formattedExpiryDate, '{ESTIMATE_NUMBER}' > $this->estimate_number, '{ESTIMATE_REF_NUMBER}' => $this->reference_number];
     }
     public static function estimateTemplates()
     {


217) /var/www/app/Models/Estimate.php:486    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function getExtraFields()
     {
-        return ['{ESTIMATE_DATE}' => $this->formattedEstimateDate, '{ESTIMATE_EXPIRY_DATE}' => $this->formattedExpiryDate, '{ESTIMATE_NUMBER}' => $this->estimate_number, '{ESTIMATE_REF_NUMBER}' => $this->reference_number];
+        return ['{ESTIMATE_DATE}' => $this->formattedEstimateDate, '{ESTIMATE_EXPIRY_DATE}' => $this->formattedExpiryDate, '{ESTIMATE_NUMBER}' => $this->estimate_number, '{ESTIMATE_REF_NUMBER}' > $this->reference_number];
     }
     public static function estimateTemplates()
     {


218) /var/www/app/Models/Estimate.php:490    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return ['{ESTIMATE_DATE}' => $this->formattedEstimateDate, '{ESTIMATE_EXPIRY_DATE}' => $this->formattedExpiryDate, '{ESTIMATE_NUMBER}' => $this->estimate_number, '{ESTIMATE_REF_NUMBER}' => $this->reference_number];
     }
-    public static function estimateTemplates()
+    protected static function estimateTemplates()
     {
         $templates = Storage::disk('views')->files('/app/pdf/estimate');
         $estimateTemplates = [];


219) /var/www/app/Models/Estimate.php:495    [M] Foreach_

--- Original
+++ New
@@ @@
     {
         $templates = Storage::disk('views')->files('/app/pdf/estimate');
         $estimateTemplates = [];
-        foreach ($templates as $key => $template) {
+        foreach (array() as $key => $template) {
             $templateName = Str::before(basename($template), '.blade.php');
             $estimateTemplates[$key]['name'] = $templateName;
             $estimateTemplates[$key]['path'] = vite_asset('/img/PDF/' . $templateName . '.png');


220) /var/www/app/Models/Estimate.php:498    [M] Concat

--- Original
+++ New
@@ @@
         foreach ($templates as $key => $template) {
             $templateName = Str::before(basename($template), '.blade.php');
             $estimateTemplates[$key]['name'] = $templateName;
-            $estimateTemplates[$key]['path'] = vite_asset('/img/PDF/' . $templateName . '.png');
+            $estimateTemplates[$key]['path'] = vite_asset($templateName . '/img/PDF/' . '.png');
         }
         return $estimateTemplates;
     }


221) /var/www/app/Models/Estimate.php:498    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         foreach ($templates as $key => $template) {
             $templateName = Str::before(basename($template), '.blade.php');
             $estimateTemplates[$key]['name'] = $templateName;
-            $estimateTemplates[$key]['path'] = vite_asset('/img/PDF/' . $templateName . '.png');
+            $estimateTemplates[$key]['path'] = vite_asset($templateName . '.png');
         }
         return $estimateTemplates;
     }


222) /var/www/app/Models/Estimate.php:498    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         foreach ($templates as $key => $template) {
             $templateName = Str::before(basename($template), '.blade.php');
             $estimateTemplates[$key]['name'] = $templateName;
-            $estimateTemplates[$key]['path'] = vite_asset('/img/PDF/' . $templateName . '.png');
+            $estimateTemplates[$key]['path'] = vite_asset('/img/PDF/' . '.png');
         }
         return $estimateTemplates;
     }


223) /var/www/app/Models/Estimate.php:498    [M] Concat

--- Original
+++ New
@@ @@
         foreach ($templates as $key => $template) {
             $templateName = Str::before(basename($template), '.blade.php');
             $estimateTemplates[$key]['name'] = $templateName;
-            $estimateTemplates[$key]['path'] = vite_asset('/img/PDF/' . $templateName . '.png');
+            $estimateTemplates[$key]['path'] = vite_asset('/img/PDF/' . '.png' . $templateName);
         }
         return $estimateTemplates;
     }


224) /var/www/app/Models/Estimate.php:498    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         foreach ($templates as $key => $template) {
             $templateName = Str::before(basename($template), '.blade.php');
             $estimateTemplates[$key]['name'] = $templateName;
-            $estimateTemplates[$key]['path'] = vite_asset('/img/PDF/' . $templateName . '.png');
+            $estimateTemplates[$key]['path'] = vite_asset('/img/PDF/' . $templateName);
         }
         return $estimateTemplates;
     }


225) /var/www/app/Models/Estimate.php:504    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $estimateTemplates;
     }
-    public function getInvoiceTemplateName()
+    protected function getInvoiceTemplateName()
     {
         $templateName = Str::replace('estimate', 'invoice', $this->template_name);
         $name = [];


226) /var/www/app/Models/Estimate.php:510    [M] Foreach_

--- Original
+++ New
@@ @@
     {
         $templateName = Str::replace('estimate', 'invoice', $this->template_name);
         $name = [];
-        foreach (Invoice::invoiceTemplates() as $template) {
+        foreach (array() as $template) {
             $name[] = $template['name'];
         }
         if (in_array($templateName, $name) == false) {


227) /var/www/app/Models/Estimate.php:514    [M] FalseValue

--- Original
+++ New
@@ @@
         foreach (Invoice::invoiceTemplates() as $template) {
             $name[] = $template['name'];
         }
-        if (in_array($templateName, $name) == false) {
+        if (in_array($templateName, $name) == true) {
             $templateName = 'invoice1';
         }
         return $templateName;


228) /var/www/app/Models/Estimate.php:514    [M] Equal

--- Original
+++ New
@@ @@
         foreach (Invoice::invoiceTemplates() as $template) {
             $name[] = $template['name'];
         }
-        if (in_array($templateName, $name) == false) {
+        if (in_array($templateName, $name) != false) {
             $templateName = 'invoice1';
         }
         return $templateName;


229) /var/www/app/Models/Estimate.php:521    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $templateName;
     }
-    public function checkForEstimateConvertAction()
+    protected function checkForEstimateConvertAction()
     {
         $convertEstimateAction = CompanySetting::getSetting('estimate_convert_action', $this->company_id);
         if ($convertEstimateAction === 'delete_estimate') {


230) /var/www/app/Models/Estimate.php:528    [M] Identical

--- Original
+++ New
@@ @@
     public function checkForEstimateConvertAction()
     {
         $convertEstimateAction = CompanySetting::getSetting('estimate_convert_action', $this->company_id);
-        if ($convertEstimateAction === 'delete_estimate') {
+        if ($convertEstimateAction !== 'delete_estimate') {
             $this->delete();
         }
         if ($convertEstimateAction === 'mark_estimate_as_accepted') {


231) /var/www/app/Models/Estimate.php:532    [M] Identical

--- Original
+++ New
@@ @@
         if ($convertEstimateAction === 'delete_estimate') {
             $this->delete();
         }
-        if ($convertEstimateAction === 'mark_estimate_as_accepted') {
+        if ($convertEstimateAction !== 'mark_estimate_as_accepted') {
             $this->status = self::STATUS_ACCEPTED;
             $this->save();
         }


232) /var/www/app/Models/Estimate.php:537    [M] TrueValue

--- Original
+++ New
@@ @@
             $this->status = self::STATUS_ACCEPTED;
             $this->save();
         }
-        return true;
+        return false;
     }
 }


233) /var/www/app/Models/EstimateItem.php:37    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Item::class);
     }
-    public function taxes()
+    protected function taxes()
     {
         return $this->hasMany(Tax::class);
     }


234) /var/www/app/Models/ExchangeRateLog.php:30    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Company::class);
     }
-    public static function addExchangeRateLog($model)
+    protected static function addExchangeRateLog($model)
     {
         $data = ['exchange_rate' => $model->exchange_rate, 'company_id' => $model->company_id, 'base_currency_id' => $model->currency_id, 'currency_id' => CompanySetting::getSetting('currency', $model->company_id)];
         return self::create($data);
     }
 }


235) /var/www/app/Models/ExchangeRateLog.php:32    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public static function addExchangeRateLog($model)
     {
-        $data = ['exchange_rate' => $model->exchange_rate, 'company_id' => $model->company_id, 'base_currency_id' => $model->currency_id, 'currency_id' => CompanySetting::getSetting('currency', $model->company_id)];
+        $data = ['company_id' => $model->company_id, 'base_currency_id' => $model->currency_id, 'currency_id' => CompanySetting::getSetting('currency', $model->company_id)];
         return self::create($data);
     }
 }


236) /var/www/app/Models/ExchangeRateLog.php:33    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public static function addExchangeRateLog($model)
     {
-        $data = ['exchange_rate' => $model->exchange_rate, 'company_id' => $model->company_id, 'base_currency_id' => $model->currency_id, 'currency_id' => CompanySetting::getSetting('currency', $model->company_id)];
+        $data = ['exchange_rate' > $model->exchange_rate, 'company_id' => $model->company_id, 'base_currency_id' => $model->currency_id, 'currency_id' => CompanySetting::getSetting('currency', $model->company_id)];
         return self::create($data);
     }
 }


237) /var/www/app/Models/ExchangeRateLog.php:34    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public static function addExchangeRateLog($model)
     {
-        $data = ['exchange_rate' => $model->exchange_rate, 'company_id' => $model->company_id, 'base_currency_id' => $model->currency_id, 'currency_id' => CompanySetting::getSetting('currency', $model->company_id)];
+        $data = ['exchange_rate' => $model->exchange_rate, 'company_id' > $model->company_id, 'base_currency_id' => $model->currency_id, 'currency_id' => CompanySetting::getSetting('currency', $model->company_id)];
         return self::create($data);
     }
 }


238) /var/www/app/Models/ExchangeRateLog.php:35    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public static function addExchangeRateLog($model)
     {
-        $data = ['exchange_rate' => $model->exchange_rate, 'company_id' => $model->company_id, 'base_currency_id' => $model->currency_id, 'currency_id' => CompanySetting::getSetting('currency', $model->company_id)];
+        $data = ['exchange_rate' => $model->exchange_rate, 'company_id' => $model->company_id, 'base_currency_id' > $model->currency_id, 'currency_id' => CompanySetting::getSetting('currency', $model->company_id)];
         return self::create($data);
     }
 }


239) /var/www/app/Models/Expense.php:202    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orderBy($orderByField, $orderBy);
     }
-    public function scopeWhereCompany($query)
+    protected function scopeWhereCompany($query)
     {
         $query->where('expenses.company_id', request()->header('company'));
     }


240) /var/www/app/Models/Expense.php:204    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query)
     {
-        $query->where('expenses.company_id', request()->header('company'));
+        
     }
     public function scopeWhereCompanyId($query, $company)
     {


241) /var/www/app/Models/ExpenseCategory.php:22    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @var array
      */
     protected $appends = ['amount', 'formattedCreatedAt'];
-    public function expenses()
+    protected function expenses()
     {
         return $this->hasMany(Expense::class);
     }


242) /var/www/app/Models/ExpenseCategory.php:27    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Expense::class);
     }
-    public function company()
+    protected function company()
     {
         return $this->belongsTo(Company::class);
     }


243) /var/www/app/Models/ExpenseCategory.php:32    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Company::class);
     }
-    public function getFormattedCreatedAtAttribute($value)
+    protected function getFormattedCreatedAtAttribute($value)
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->created_at)->format($dateFormat);


244) /var/www/app/Models/ExpenseCategory.php:39    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->created_at)->format($dateFormat);
     }
-    public function getAmountAttribute()
+    protected function getAmountAttribute()
     {
         return $this->expenses()->sum('amount');
     }


245) /var/www/app/Models/FileDisk.php:23    [M] PublicVisibility

--- Original
+++ New
@@ @@
     public const DISK_TYPE_REMOTE = 'REMOTE';
     protected $guarded = ['id'];
     protected $casts = ['set_as_default' => 'boolean'];
-    public function setCredentialsAttribute($value)
+    protected function setCredentialsAttribute($value)
     {
         $this->attributes['credentials'] = json_encode($value);
     }


246) /var/www/app/Models/FileDisk.php:78    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereOrder($field, $orderBy);
         }
     }
-    public function setConfig()
+    protected function setConfig()
     {
         $driver = $this->driver;
         $credentials = collect(json_decode($this['credentials']));


247) /var/www/app/Models/FileDisk.php:84    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $driver = $this->driver;
         $credentials = collect(json_decode($this['credentials']));
-        self::setFilesystem($credentials, $driver);
+        
     }
     public function setAsDefault()
     {


248) /var/www/app/Models/FileDisk.php:92    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->set_as_default;
     }
-    public static function setFilesystem($credentials, $driver)
+    protected static function setFilesystem($credentials, $driver)
     {
         $prefix = env('DYNAMIC_DISK_PREFIX', 'temp_');
         config(['filesystems.default' => $prefix . $driver]);


249) /var/www/app/Models/FileDisk.php:96    [M] Concat

--- Original
+++ New
@@ @@
     public static function setFilesystem($credentials, $driver)
     {
         $prefix = env('DYNAMIC_DISK_PREFIX', 'temp_');
-        config(['filesystems.default' => $prefix . $driver]);
+        config(['filesystems.default' => $driver . $prefix]);
         $disks = config('filesystems.disks.' . $driver);
         foreach ($disks as $key => $value) {
             if ($credentials->has($key)) {


250) /var/www/app/Models/FileDisk.php:96    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     public static function setFilesystem($credentials, $driver)
     {
         $prefix = env('DYNAMIC_DISK_PREFIX', 'temp_');
-        config(['filesystems.default' => $prefix . $driver]);
+        config(['filesystems.default' => $driver]);
         $disks = config('filesystems.disks.' . $driver);
         foreach ($disks as $key => $value) {
             if ($credentials->has($key)) {


251) /var/www/app/Models/FileDisk.php:96    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     public static function setFilesystem($credentials, $driver)
     {
         $prefix = env('DYNAMIC_DISK_PREFIX', 'temp_');
-        config(['filesystems.default' => $prefix . $driver]);
+        config(['filesystems.default' => $prefix]);
         $disks = config('filesystems.disks.' . $driver);
         foreach ($disks as $key => $value) {
             if ($credentials->has($key)) {


252) /var/www/app/Models/FileDisk.php:96    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public static function setFilesystem($credentials, $driver)
     {
         $prefix = env('DYNAMIC_DISK_PREFIX', 'temp_');
-        config(['filesystems.default' => $prefix . $driver]);
+        config([]);
         $disks = config('filesystems.disks.' . $driver);
         foreach ($disks as $key => $value) {
             if ($credentials->has($key)) {


253) /var/www/app/Models/FileDisk.php:96    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
     public static function setFilesystem($credentials, $driver)
     {
         $prefix = env('DYNAMIC_DISK_PREFIX', 'temp_');
-        config(['filesystems.default' => $prefix . $driver]);
+        
         $disks = config('filesystems.disks.' . $driver);
         foreach ($disks as $key => $value) {
             if ($credentials->has($key)) {


254) /var/www/app/Models/FileDisk.php:98    [M] Concat

--- Original
+++ New
@@ @@
     {
         $prefix = env('DYNAMIC_DISK_PREFIX', 'temp_');
         config(['filesystems.default' => $prefix . $driver]);
-        $disks = config('filesystems.disks.' . $driver);
+        $disks = config($driver . 'filesystems.disks.');
         foreach ($disks as $key => $value) {
             if ($credentials->has($key)) {
                 $disks[$key] = $credentials[$key];


255) /var/www/app/Models/FileDisk.php:98    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         $prefix = env('DYNAMIC_DISK_PREFIX', 'temp_');
         config(['filesystems.default' => $prefix . $driver]);
-        $disks = config('filesystems.disks.' . $driver);
+        $disks = config($driver);
         foreach ($disks as $key => $value) {
             if ($credentials->has($key)) {
                 $disks[$key] = $credentials[$key];


256) /var/www/app/Models/FileDisk.php:98    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         $prefix = env('DYNAMIC_DISK_PREFIX', 'temp_');
         config(['filesystems.default' => $prefix . $driver]);
-        $disks = config('filesystems.disks.' . $driver);
+        $disks = config('filesystems.disks.');
         foreach ($disks as $key => $value) {
             if ($credentials->has($key)) {
                 $disks[$key] = $credentials[$key];


257) /var/www/app/Models/FileDisk.php:100    [M] Foreach_

--- Original
+++ New
@@ @@
         $prefix = env('DYNAMIC_DISK_PREFIX', 'temp_');
         config(['filesystems.default' => $prefix . $driver]);
         $disks = config('filesystems.disks.' . $driver);
-        foreach ($disks as $key => $value) {
+        foreach (array() as $key => $value) {
             if ($credentials->has($key)) {
                 $disks[$key] = $credentials[$key];
             }


258) /var/www/app/Models/FileDisk.php:106    [M] Concat

--- Original
+++ New
@@ @@
                 $disks[$key] = $credentials[$key];
             }
         }
-        config(['filesystems.disks.' . $prefix . $driver => $disks]);
+        config([$prefix . 'filesystems.disks.' . $driver => $disks]);
     }
     public static function validateCredentials($credentials, $disk)
     {


259) /var/www/app/Models/FileDisk.php:106    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 $disks[$key] = $credentials[$key];
             }
         }
-        config(['filesystems.disks.' . $prefix . $driver => $disks]);
+        config([$prefix . $driver => $disks]);
     }
     public static function validateCredentials($credentials, $disk)
     {


260) /var/www/app/Models/FileDisk.php:106    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 $disks[$key] = $credentials[$key];
             }
         }
-        config(['filesystems.disks.' . $prefix . $driver => $disks]);
+        config(['filesystems.disks.' . $driver => $disks]);
     }
     public static function validateCredentials($credentials, $disk)
     {


261) /var/www/app/Models/FileDisk.php:106    [M] Concat

--- Original
+++ New
@@ @@
                 $disks[$key] = $credentials[$key];
             }
         }
-        config(['filesystems.disks.' . $prefix . $driver => $disks]);
+        config(['filesystems.disks.' . $driver . $prefix => $disks]);
     }
     public static function validateCredentials($credentials, $disk)
     {


262) /var/www/app/Models/FileDisk.php:106    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 $disks[$key] = $credentials[$key];
             }
         }
-        config(['filesystems.disks.' . $prefix . $driver => $disks]);
+        config(['filesystems.disks.' . $prefix => $disks]);
     }
     public static function validateCredentials($credentials, $disk)
     {


263) /var/www/app/Models/FileDisk.php:106    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $disks[$key] = $credentials[$key];
             }
         }
-        config(['filesystems.disks.' . $prefix . $driver => $disks]);
+        config([]);
     }
     public static function validateCredentials($credentials, $disk)
     {


264) /var/www/app/Models/FileDisk.php:106    [M] FunctionCallRemoval

--- Original
+++ New
@@ @@
                 $disks[$key] = $credentials[$key];
             }
         }
-        config(['filesystems.disks.' . $prefix . $driver => $disks]);
+        
     }
     public static function validateCredentials($credentials, $disk)
     {


265) /var/www/app/Models/FileDisk.php:195    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->save();
         return $this;
     }
-    public function isSystem()
+    protected function isSystem()
     {
         return $this->type === self::DISK_TYPE_SYSTEM;
     }


266) /var/www/app/Models/FileDisk.php:197    [M] Identical

--- Original
+++ New
@@ @@
     }
     public function isSystem()
     {
-        return $this->type === self::DISK_TYPE_SYSTEM;
+        return $this->type !== self::DISK_TYPE_SYSTEM;
     }
     public function isRemote()
     {


267) /var/www/app/Models/Invoice.php:65    [M] PublicVisibility

--- Original
+++ New
@@ @@
     protected $casts = ['total' => 'integer', 'tax' => 'integer', 'sub_total' => 'integer', 'discount' => 'float', 'discount_val' => 'integer', 'exchange_rate' => 'float'];
     protected $guarded = ['id'];
     protected $appends = ['formattedCreatedAt', 'formattedInvoiceDate', 'formattedDueDate', 'invoicePdfUrl'];
-    public function transactions()
+    protected function transactions()
     {
         return $this->hasMany(Transaction::class);
     }


268) /var/www/app/Models/Invoice.php:75    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->morphMany('App\\Models\\EmailLog', 'mailable');
     }
-    public function items()
+    protected function items()
     {
         return $this->hasMany('Crater\\Models\\InvoiceItem');
     }


269) /var/www/app/Models/Invoice.php:80    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany('Crater\\Models\\InvoiceItem');
     }
-    public function taxes()
+    protected function taxes()
     {
         return $this->hasMany(Tax::class);
     }


270) /var/www/app/Models/Invoice.php:85    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Tax::class);
     }
-    public function payments()
+    protected function payments()
     {
         return $this->hasMany(Payment::class);
     }


271) /var/www/app/Models/Invoice.php:90    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Payment::class);
     }
-    public function currency()
+    protected function currency()
     {
         return $this->belongsTo(Currency::class);
     }


272) /var/www/app/Models/Invoice.php:95    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Currency::class);
     }
-    public function company()
+    protected function company()
     {
         return $this->belongsTo(Company::class);
     }


273) /var/www/app/Models/Invoice.php:100    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Company::class);
     }
-    public function customer()
+    protected function customer()
     {
         return $this->belongsTo(Customer::class, 'customer_id');
     }


274) /var/www/app/Models/Invoice.php:110    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(RecurringInvoice::class);
     }
-    public function creator()
+    protected function creator()
     {
         return $this->belongsTo(User::class, 'creator_id');
     }


275) /var/www/app/Models/Invoice.php:115    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(User::class, 'creator_id');
     }
-    public function getInvoicePdfUrlAttribute()
+    protected function getInvoicePdfUrlAttribute()
     {
         return url('/invoices/pdf/' . $this->unique_hash);
     }


276) /var/www/app/Models/Invoice.php:117    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function getInvoicePdfUrlAttribute()
     {
-        return url('/invoices/pdf/' . $this->unique_hash);
+        return url($this->unique_hash . '/invoices/pdf/');
     }
     public function getPaymentModuleEnabledAttribute()
     {


277) /var/www/app/Models/Invoice.php:117    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function getInvoicePdfUrlAttribute()
     {
-        return url('/invoices/pdf/' . $this->unique_hash);
+        return url($this->unique_hash);
     }
     public function getPaymentModuleEnabledAttribute()
     {


278) /var/www/app/Models/Invoice.php:117    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function getInvoicePdfUrlAttribute()
     {
-        return url('/invoices/pdf/' . $this->unique_hash);
+        return url('/invoices/pdf/');
     }
     public function getPaymentModuleEnabledAttribute()
     {


279) /var/www/app/Models/Invoice.php:117    [M] FunctionCall

--- Original
+++ New
@@ @@
     }
     public function getInvoicePdfUrlAttribute()
     {
-        return url('/invoices/pdf/' . $this->unique_hash);
+        url('/invoices/pdf/' . $this->unique_hash);
+        return null;
     }
     public function getPaymentModuleEnabledAttribute()
     {


280) /var/www/app/Models/Invoice.php:120    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return url('/invoices/pdf/' . $this->unique_hash);
     }
-    public function getPaymentModuleEnabledAttribute()
+    protected function getPaymentModuleEnabledAttribute()
     {
         if (Module::has('Payments')) {
             return Module::isEnabled('Payments');


281) /var/www/app/Models/Invoice.php:126    [M] FalseValue

--- Original
+++ New
@@ @@
         if (Module::has('Payments')) {
             return Module::isEnabled('Payments');
         }
-        return false;
+        return true;
     }
     public function getAllowEditAttribute()
     {


282) /var/www/app/Models/Invoice.php:129    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return false;
     }
-    public function getAllowEditAttribute()
+    protected function getAllowEditAttribute()
     {
         $retrospective_edit = CompanySetting::getSetting('retrospective_edits', $this->company_id);
         $allowed = true;


283) /var/www/app/Models/Invoice.php:133    [M] TrueValue

--- Original
+++ New
@@ @@
     public function getAllowEditAttribute()
     {
         $retrospective_edit = CompanySetting::getSetting('retrospective_edits', $this->company_id);
-        $allowed = true;
+        $allowed = false;
         $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
         if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;


284) /var/www/app/Models/Invoice.php:135    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $retrospective_edit = CompanySetting::getSetting('retrospective_edits', $this->company_id);
         $allowed = true;
-        $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
+        $status = [self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
         if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {


285) /var/www/app/Models/Invoice.php:142    [M] AssignmentEqual

--- Original
+++ New
@@ @@
         $retrospective_edit = CompanySetting::getSetting('retrospective_edits', $this->company_id);
         $allowed = true;
         $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
-        if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
+        if (($retrospective_edit = 'disable_on_invoice_sent') && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;


286) /var/www/app/Models/Invoice.php:142    [M] Equal

--- Original
+++ New
@@ @@
         $retrospective_edit = CompanySetting::getSetting('retrospective_edits', $this->company_id);
         $allowed = true;
         $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
-        if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
+        if ($retrospective_edit != 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;


287) /var/www/app/Models/Invoice.php:142    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $retrospective_edit = CompanySetting::getSetting('retrospective_edits', $this->company_id);
         $allowed = true;
         $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
-        if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
+        if (($retrospective_edit == 'disable_on_invoice_sent' || in_array($this->status, $status)) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;


288) /var/www/app/Models/Invoice.php:142    [M] Identical

--- Original
+++ New
@@ @@
         $retrospective_edit = CompanySetting::getSetting('retrospective_edits', $this->company_id);
         $allowed = true;
         $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
-        if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
+        if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status !== Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;


289) /var/www/app/Models/Invoice.php:142    [M] Identical

--- Original
+++ New
@@ @@
         $retrospective_edit = CompanySetting::getSetting('retrospective_edits', $this->company_id);
         $allowed = true;
         $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
-        if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
+        if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status !== Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;


290) /var/www/app/Models/Invoice.php:142    [M] LogicalOr

--- Original
+++ New
@@ @@
         $retrospective_edit = CompanySetting::getSetting('retrospective_edits', $this->company_id);
         $allowed = true;
         $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
-        if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
+        if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID && $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;


291) /var/www/app/Models/Invoice.php:142    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $retrospective_edit = CompanySetting::getSetting('retrospective_edits', $this->company_id);
         $allowed = true;
         $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
-        if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
+        if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) || ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;


292) /var/www/app/Models/Invoice.php:144    [M] AssignmentEqual

--- Original
+++ New
@@ @@
         $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
         if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
-        } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
+        } elseif (($retrospective_edit = 'disable_on_invoice_partial_paid') && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {
             $allowed = false;


293) /var/www/app/Models/Invoice.php:144    [M] Equal

--- Original
+++ New
@@ @@
         $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
         if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
-        } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
+        } elseif ($retrospective_edit != 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {
             $allowed = false;


294) /var/www/app/Models/Invoice.php:144    [M] Identical

--- Original
+++ New
@@ @@
         $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
         if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
-        } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
+        } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status !== Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {
             $allowed = false;


295) /var/www/app/Models/Invoice.php:144    [M] Identical

--- Original
+++ New
@@ @@
         $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
         if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
-        } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
+        } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status !== Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {
             $allowed = false;


296) /var/www/app/Models/Invoice.php:144    [M] LogicalOr

--- Original
+++ New
@@ @@
         $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
         if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
-        } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
+        } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID && $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {
             $allowed = false;


297) /var/www/app/Models/Invoice.php:144    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
         if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
-        } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
+        } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' || ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {
             $allowed = false;


298) /var/www/app/Models/Invoice.php:146    [M] AssignmentEqual

--- Original
+++ New
@@ @@
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
-        } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {
+        } elseif (($retrospective_edit = 'disable_on_invoice_paid') && $this->paid_status === Invoice::STATUS_PAID) {
             $allowed = false;
         }
         return $allowed;


299) /var/www/app/Models/Invoice.php:146    [M] Equal

--- Original
+++ New
@@ @@
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
-        } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {
+        } elseif ($retrospective_edit != 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {
             $allowed = false;
         }
         return $allowed;


300) /var/www/app/Models/Invoice.php:146    [M] Identical

--- Original
+++ New
@@ @@
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
-        } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {
+        } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status !== Invoice::STATUS_PAID) {
             $allowed = false;
         }
         return $allowed;


301) /var/www/app/Models/Invoice.php:146    [M] LogicalAnd

--- Original
+++ New
@@ @@
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
-        } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {
+        } elseif ($retrospective_edit == 'disable_on_invoice_paid' || $this->paid_status === Invoice::STATUS_PAID) {
             $allowed = false;
         }
         return $allowed;


302) /var/www/app/Models/Invoice.php:153    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $allowed;
     }
-    public function getPreviousStatus()
+    protected function getPreviousStatus()
     {
         if ($this->viewed) {
             return self::STATUS_VIEWED;


303) /var/www/app/Models/Invoice.php:169    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->getNotes();
     }
-    public function getFormattedCreatedAtAttribute($value)
+    protected function getFormattedCreatedAtAttribute($value)
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->created_at)->format($dateFormat);


304) /var/www/app/Models/Invoice.php:176    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->created_at)->format($dateFormat);
     }
-    public function getFormattedDueDateAttribute($value)
+    protected function getFormattedDueDateAttribute($value)
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->due_date)->format($dateFormat);


305) /var/www/app/Models/Invoice.php:183    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->due_date)->format($dateFormat);
     }
-    public function getFormattedInvoiceDateAttribute($value)
+    protected function getFormattedInvoiceDateAttribute($value)
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->invoice_date)->format($dateFormat);


306) /var/www/app/Models/Invoice.php:190    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->invoice_date)->format($dateFormat);
     }
-    public function scopeWhereStatus($query, $status)
+    protected function scopeWhereStatus($query, $status)
     {
         return $query->where('invoices.status', $status);
     }


307) /var/www/app/Models/Invoice.php:208    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->whereIn('invoices.paid_status', [self::STATUS_UNPAID, self::STATUS_PARTIALLY_PAID]);
     }
-    public function scopeWhereInvoiceNumber($query, $invoiceNumber)
+    protected function scopeWhereInvoiceNumber($query, $invoiceNumber)
     {
         return $query->where('invoices.invoice_number', 'LIKE', '%' . $invoiceNumber . '%');
     }


308) /var/www/app/Models/Invoice.php:210    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereInvoiceNumber($query, $invoiceNumber)
     {
-        return $query->where('invoices.invoice_number', 'LIKE', '%' . $invoiceNumber . '%');
+        return $query->where('invoices.invoice_number', 'LIKE', $invoiceNumber . '%' . '%');
     }
     public function scopeInvoicesBetween($query, $start, $end)
     {


309) /var/www/app/Models/Invoice.php:210    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereInvoiceNumber($query, $invoiceNumber)
     {
-        return $query->where('invoices.invoice_number', 'LIKE', '%' . $invoiceNumber . '%');
+        return $query->where('invoices.invoice_number', 'LIKE', $invoiceNumber . '%');
     }
     public function scopeInvoicesBetween($query, $start, $end)
     {


310) /var/www/app/Models/Invoice.php:210    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereInvoiceNumber($query, $invoiceNumber)
     {
-        return $query->where('invoices.invoice_number', 'LIKE', '%' . $invoiceNumber . '%');
+        return $query->where('invoices.invoice_number', 'LIKE', '%' . '%');
     }
     public function scopeInvoicesBetween($query, $start, $end)
     {


311) /var/www/app/Models/Invoice.php:210    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereInvoiceNumber($query, $invoiceNumber)
     {
-        return $query->where('invoices.invoice_number', 'LIKE', '%' . $invoiceNumber . '%');
+        return $query->where('invoices.invoice_number', 'LIKE', '%' . '%' . $invoiceNumber);
     }
     public function scopeInvoicesBetween($query, $start, $end)
     {


312) /var/www/app/Models/Invoice.php:210    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereInvoiceNumber($query, $invoiceNumber)
     {
-        return $query->where('invoices.invoice_number', 'LIKE', '%' . $invoiceNumber . '%');
+        return $query->where('invoices.invoice_number', 'LIKE', '%' . $invoiceNumber);
     }
     public function scopeInvoicesBetween($query, $start, $end)
     {


313) /var/www/app/Models/Invoice.php:213    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('invoices.invoice_number', 'LIKE', '%' . $invoiceNumber . '%');
     }
-    public function scopeInvoicesBetween($query, $start, $end)
+    protected function scopeInvoicesBetween($query, $start, $end)
     {
         return $query->whereBetween('invoices.invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
     }


314) /var/www/app/Models/Invoice.php:217    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeInvoicesBetween($query, $start, $end)
     {
-        return $query->whereBetween('invoices.invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+        return $query->whereBetween('invoices.invoice_date', [$end->format('Y-m-d')]);
     }
     public function scopeWhereSearch($query, $search)
     {


315) /var/www/app/Models/Invoice.php:221    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->whereBetween('invoices.invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
     }
-    public function scopeWhereSearch($query, $search)
+    protected function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {


316) /var/www/app/Models/Invoice.php:223    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        foreach (explode(' ', $search) as $term) {
+        foreach (array() as $term) {
             $query->whereHas('customer', function ($query) use($term) {
                 $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });


317) /var/www/app/Models/Invoice.php:224    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
-            });
+            
         }
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)


318) /var/www/app/Models/Invoice.php:225    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%' . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


319) /var/www/app/Models/Invoice.php:225    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


320) /var/www/app/Models/Invoice.php:225    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


321) /var/www/app/Models/Invoice.php:225    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%' . $term)->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


322) /var/www/app/Models/Invoice.php:225    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term)->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


323) /var/www/app/Models/Invoice.php:225    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                
             });
         }
     }


324) /var/www/app/Models/Invoice.php:226    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', $term . '%' . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


325) /var/www/app/Models/Invoice.php:226    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


326) /var/www/app/Models/Invoice.php:226    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


327) /var/www/app/Models/Invoice.php:226    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . '%' . $term)->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


328) /var/www/app/Models/Invoice.php:226    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term)->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


329) /var/www/app/Models/Invoice.php:227    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', $term . '%' . '%');
             });
         }
     }


330) /var/www/app/Models/Invoice.php:227    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', $term . '%');
             });
         }
     }


331) /var/www/app/Models/Invoice.php:227    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . '%');
             });
         }
     }


332) /var/www/app/Models/Invoice.php:227    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . '%' . $term);
             });
         }
     }


333) /var/www/app/Models/Invoice.php:227    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term);
             });
         }
     }


334) /var/www/app/Models/Invoice.php:237    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orderBy($orderByField, $orderBy);
     }
-    public function scopeApplyFilters($query, array $filters)
+    protected function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('search')) {


335) /var/www/app/Models/Invoice.php:242    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $filters = collect($filters);
         if ($filters->get('search')) {
-            $query->whereSearch($filters->get('search'));
+            
         }
         if ($filters->get('status')) {
             if ($filters->get('status') == self::STATUS_UNPAID || $filters->get('status') == self::STATUS_PARTIALLY_PAID || $filters->get('status') == self::STATUS_PAID) {


336) /var/www/app/Models/Invoice.php:247    [M] Equal

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
         if ($filters->get('status')) {
-            if ($filters->get('status') == self::STATUS_UNPAID || $filters->get('status') == self::STATUS_PARTIALLY_PAID || $filters->get('status') == self::STATUS_PAID) {
+            if ($filters->get('status') != self::STATUS_UNPAID || $filters->get('status') == self::STATUS_PARTIALLY_PAID || $filters->get('status') == self::STATUS_PAID) {
                 $query->wherePaidStatus($filters->get('status'));
             } elseif ($filters->get('status') == 'DUE') {
                 $query->whereDueStatus($filters->get('status'));


337) /var/www/app/Models/Invoice.php:247    [M] LogicalOr

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
         if ($filters->get('status')) {
-            if ($filters->get('status') == self::STATUS_UNPAID || $filters->get('status') == self::STATUS_PARTIALLY_PAID || $filters->get('status') == self::STATUS_PAID) {
+            if ($filters->get('status') == self::STATUS_UNPAID && $filters->get('status') == self::STATUS_PARTIALLY_PAID || $filters->get('status') == self::STATUS_PAID) {
                 $query->wherePaidStatus($filters->get('status'));
             } elseif ($filters->get('status') == 'DUE') {
                 $query->whereDueStatus($filters->get('status'));


338) /var/www/app/Models/Invoice.php:247    [M] LogicalOr

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
         if ($filters->get('status')) {
-            if ($filters->get('status') == self::STATUS_UNPAID || $filters->get('status') == self::STATUS_PARTIALLY_PAID || $filters->get('status') == self::STATUS_PAID) {
+            if (($filters->get('status') == self::STATUS_UNPAID || $filters->get('status') == self::STATUS_PARTIALLY_PAID) && $filters->get('status') == self::STATUS_PAID) {
                 $query->wherePaidStatus($filters->get('status'));
             } elseif ($filters->get('status') == 'DUE') {
                 $query->whereDueStatus($filters->get('status'));


339) /var/www/app/Models/Invoice.php:248    [M] Equal

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
         if ($filters->get('status')) {
-            if ($filters->get('status') == self::STATUS_UNPAID || $filters->get('status') == self::STATUS_PARTIALLY_PAID || $filters->get('status') == self::STATUS_PAID) {
+            if ($filters->get('status') == self::STATUS_UNPAID || $filters->get('status') != self::STATUS_PARTIALLY_PAID || $filters->get('status') == self::STATUS_PAID) {
                 $query->wherePaidStatus($filters->get('status'));
             } elseif ($filters->get('status') == 'DUE') {
                 $query->whereDueStatus($filters->get('status'));


340) /var/www/app/Models/Invoice.php:249    [M] Equal

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
         if ($filters->get('status')) {
-            if ($filters->get('status') == self::STATUS_UNPAID || $filters->get('status') == self::STATUS_PARTIALLY_PAID || $filters->get('status') == self::STATUS_PAID) {
+            if ($filters->get('status') == self::STATUS_UNPAID || $filters->get('status') == self::STATUS_PARTIALLY_PAID || $filters->get('status') != self::STATUS_PAID) {
                 $query->wherePaidStatus($filters->get('status'));
             } elseif ($filters->get('status') == 'DUE') {
                 $query->whereDueStatus($filters->get('status'));


341) /var/www/app/Models/Invoice.php:252    [M] Equal

--- Original
+++ New
@@ @@
         if ($filters->get('status')) {
             if ($filters->get('status') == self::STATUS_UNPAID || $filters->get('status') == self::STATUS_PARTIALLY_PAID || $filters->get('status') == self::STATUS_PAID) {
                 $query->wherePaidStatus($filters->get('status'));
-            } elseif ($filters->get('status') == 'DUE') {
+            } elseif ($filters->get('status') != 'DUE') {
                 $query->whereDueStatus($filters->get('status'));
             } else {
                 $query->whereStatus($filters->get('status'));


342) /var/www/app/Models/Invoice.php:255    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             } elseif ($filters->get('status') == 'DUE') {
                 $query->whereDueStatus($filters->get('status'));
             } else {
-                $query->whereStatus($filters->get('status'));
+                
             }
         }
         if ($filters->get('paid_status')) {


343) /var/www/app/Models/Invoice.php:268    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereInvoice($filters->get('invoice_id'));
         }
         if ($filters->get('invoice_number')) {
-            $query->whereInvoiceNumber($filters->get('invoice_number'));
+            
         }
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));


344) /var/www/app/Models/Invoice.php:271    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if ($filters->get('invoice_number')) {
             $query->whereInvoiceNumber($filters->get('invoice_number'));
         }
-        if ($filters->get('from_date') && $filters->get('to_date')) {
+        if ($filters->get('from_date') || $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
             $query->invoicesBetween($start, $end);


345) /var/www/app/Models/Invoice.php:274    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
-            $query->invoicesBetween($start, $end);
+            
         }
         if ($filters->get('customer_id')) {
             $query->whereCustomer($filters->get('customer_id'));


346) /var/www/app/Models/Invoice.php:281    [M] LogicalOr

--- Original
+++ New
@@ @@
         if ($filters->get('customer_id')) {
             $query->whereCustomer($filters->get('customer_id'));
         }
-        if ($filters->get('orderByField') || $filters->get('orderBy')) {
+        if ($filters->get('orderByField') && $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'desc';
             $query->whereOrder($field, $orderBy);


347) /var/www/app/Models/Invoice.php:293    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orWhere('id', $invoice_id);
     }
-    public function scopeWhereCompany($query)
+    protected function scopeWhereCompany($query)
     {
         $query->where('invoices.company_id', request()->header('company'));
     }


348) /var/www/app/Models/Invoice.php:295    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query)
     {
-        $query->where('invoices.company_id', request()->header('company'));
+        
     }
     public function scopeWhereCompanyId($query, $company)
     {


349) /var/www/app/Models/Invoice.php:308    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('invoices.customer_id', $customer_id);
     }
-    public function scopePaginateData($query, $limit)
+    protected function scopePaginateData($query, $limit)
     {
         if ($limit == 'all') {
             return $query->get();


350) /var/www/app/Models/Invoice.php:310    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit = 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


351) /var/www/app/Models/Invoice.php:310    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit != 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


352) /var/www/app/Models/Invoice.php:317    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $query->paginate($limit);
     }
-    public static function createInvoice($request)
+    protected static function createInvoice($request)
     {
         $data = $request->getInvoicePayload();
         if ($request->has('invoiceSend')) {


353) /var/www/app/Models/Invoice.php:336    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $invoice->sequence_number = $serial->nextSequenceNumber;
         $invoice->customer_sequence_number = $serial->nextCustomerSequenceNumber;
         $invoice->unique_hash = Hashids::connection(Invoice::class)->encode($invoice->id);
-        $invoice->save();
+        
         self::createItems($invoice, $request->items);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $data['currency_id'] !== $company_currency) {


354) /var/www/app/Models/Invoice.php:338    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $invoice->customer_sequence_number = $serial->nextCustomerSequenceNumber;
         $invoice->unique_hash = Hashids::connection(Invoice::class)->encode($invoice->id);
         $invoice->save();
-        self::createItems($invoice, $request->items);
+        
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($invoice);


355) /var/www/app/Models/Invoice.php:342    [M] CastString

--- Original
+++ New
@@ @@
         $invoice->save();
         self::createItems($invoice, $request->items);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $data['currency_id'] !== $company_currency) {
+        if ($data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($invoice);
         }
         if ($request->has('taxes') && !empty($request->taxes)) {


356) /var/www/app/Models/Invoice.php:342    [M] NotIdentical

--- Original
+++ New
@@ @@
         $invoice->save();
         self::createItems($invoice, $request->items);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $data['currency_id'] !== $company_currency) {
+        if ((string) $data['currency_id'] === $company_currency) {
             ExchangeRateLog::addExchangeRateLog($invoice);
         }
         if ($request->has('taxes') && !empty($request->taxes)) {


357) /var/www/app/Models/Invoice.php:343    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         self::createItems($invoice, $request->items);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $data['currency_id'] !== $company_currency) {
-            ExchangeRateLog::addExchangeRateLog($invoice);
+            
         }
         if ($request->has('taxes') && !empty($request->taxes)) {
             self::createTaxes($invoice, $request->taxes);


358) /var/www/app/Models/Invoice.php:346    [M] LogicalNot

--- Original
+++ New
@@ @@
         if ((string) $data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($invoice);
         }
-        if ($request->has('taxes') && !empty($request->taxes)) {
+        if ($request->has('taxes') && empty($request->taxes)) {
             self::createTaxes($invoice, $request->taxes);
         }
         if ($request->customFields) {


359) /var/www/app/Models/Invoice.php:346    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if ((string) $data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($invoice);
         }
-        if ($request->has('taxes') && !empty($request->taxes)) {
+        if ($request->has('taxes') || !empty($request->taxes)) {
             self::createTaxes($invoice, $request->taxes);
         }
         if ($request->customFields) {


360) /var/www/app/Models/Invoice.php:347    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             ExchangeRateLog::addExchangeRateLog($invoice);
         }
         if ($request->has('taxes') && !empty($request->taxes)) {
-            self::createTaxes($invoice, $request->taxes);
+            
         }
         if ($request->customFields) {
             $invoice->addCustomFields($request->customFields);


361) /var/www/app/Models/Invoice.php:354    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         if ($request->customFields) {
             $invoice->addCustomFields($request->customFields);
         }
-        $invoice = Invoice::with(['items', 'items.fields', 'items.fields.customField', 'customer', 'taxes'])->find($invoice->id);
+        $invoice = Invoice::with(['items.fields', 'items.fields.customField', 'customer', 'taxes'])->find($invoice->id);
         return $invoice;
     }
     public function updateInvoice($request)


362) /var/www/app/Models/Invoice.php:366    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $invoice = Invoice::with(['items', 'items.fields', 'items.fields.customField', 'customer', 'taxes'])->find($invoice->id);
         return $invoice;
     }
-    public function updateInvoice($request)
+    protected function updateInvoice($request)
     {
         $serial = (new SerialNumberFormatter())->setModel($this)->setCompany($this->company_id)->setCustomer($request->customer_id)->setModelObject($this->id)->setNextNumbers();
         $data = $request->getInvoicePayload();


363) /var/www/app/Models/Invoice.php:378    [M] Minus

--- Original
+++ New
@@ @@
         $serial = (new SerialNumberFormatter())->setModel($this)->setCompany($this->company_id)->setCustomer($request->customer_id)->setModelObject($this->id)->setNextNumbers();
         $data = $request->getInvoicePayload();
         $oldTotal = $this->total;
-        $total_paid_amount = $this->total - $this->due_amount;
+        $total_paid_amount = $this->total + $this->due_amount;
         if ($total_paid_amount > 0 && $this->customer_id !== $request->customer_id) {
             return 'customer_cannot_be_changed_after_payment_is_added';
         }


364) /var/www/app/Models/Invoice.php:380    [M] GreaterThan

--- Original
+++ New
@@ @@
         $data = $request->getInvoicePayload();
         $oldTotal = $this->total;
         $total_paid_amount = $this->total - $this->due_amount;
-        if ($total_paid_amount > 0 && $this->customer_id !== $request->customer_id) {
+        if ($total_paid_amount >= 0 && $this->customer_id !== $request->customer_id) {
             return 'customer_cannot_be_changed_after_payment_is_added';
         }
         if ($request->total < $total_paid_amount) {


365) /var/www/app/Models/Invoice.php:380    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
         $data = $request->getInvoicePayload();
         $oldTotal = $this->total;
         $total_paid_amount = $this->total - $this->due_amount;
-        if ($total_paid_amount > 0 && $this->customer_id !== $request->customer_id) {
+        if ($total_paid_amount <= 0 && $this->customer_id !== $request->customer_id) {
             return 'customer_cannot_be_changed_after_payment_is_added';
         }
         if ($request->total < $total_paid_amount) {


366) /var/www/app/Models/Invoice.php:380    [M] NotIdentical

--- Original
+++ New
@@ @@
         $data = $request->getInvoicePayload();
         $oldTotal = $this->total;
         $total_paid_amount = $this->total - $this->due_amount;
-        if ($total_paid_amount > 0 && $this->customer_id !== $request->customer_id) {
+        if ($total_paid_amount > 0 && $this->customer_id === $request->customer_id) {
             return 'customer_cannot_be_changed_after_payment_is_added';
         }
         if ($request->total < $total_paid_amount) {


367) /var/www/app/Models/Invoice.php:380    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $data = $request->getInvoicePayload();
         $oldTotal = $this->total;
         $total_paid_amount = $this->total - $this->due_amount;
-        if ($total_paid_amount > 0 && $this->customer_id !== $request->customer_id) {
+        if ($total_paid_amount > 0 || $this->customer_id !== $request->customer_id) {
             return 'customer_cannot_be_changed_after_payment_is_added';
         }
         if ($request->total < $total_paid_amount) {


368) /var/www/app/Models/Invoice.php:384    [M] LessThan

--- Original
+++ New
@@ @@
         if ($total_paid_amount > 0 && $this->customer_id !== $request->customer_id) {
             return 'customer_cannot_be_changed_after_payment_is_added';
         }
-        if ($request->total < $total_paid_amount) {
+        if ($request->total <= $total_paid_amount) {
             return 'total_invoice_amount_must_be_more_than_paid_amount';
         }
         if ($oldTotal != $request->total) {


369) /var/www/app/Models/Invoice.php:384    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
         if ($total_paid_amount > 0 && $this->customer_id !== $request->customer_id) {
             return 'customer_cannot_be_changed_after_payment_is_added';
         }
-        if ($request->total < $total_paid_amount) {
+        if ($request->total >= $total_paid_amount) {
             return 'total_invoice_amount_must_be_more_than_paid_amount';
         }
         if ($oldTotal != $request->total) {


370) /var/www/app/Models/Invoice.php:388    [M] NotEqual

--- Original
+++ New
@@ @@
         if ($request->total < $total_paid_amount) {
             return 'total_invoice_amount_must_be_more_than_paid_amount';
         }
-        if ($oldTotal != $request->total) {
+        if ($oldTotal == $request->total) {
             $oldTotal = (int) round($request->total) - (int) $oldTotal;
         } else {
             $oldTotal = 0;


371) /var/www/app/Models/Invoice.php:389    [M] RoundingFamily

--- Original
+++ New
@@ @@
             return 'total_invoice_amount_must_be_more_than_paid_amount';
         }
         if ($oldTotal != $request->total) {
-            $oldTotal = (int) round($request->total) - (int) $oldTotal;
+            $oldTotal = (int) floor($request->total) - (int) $oldTotal;
         } else {
             $oldTotal = 0;
         }


372) /var/www/app/Models/Invoice.php:389    [M] RoundingFamily

--- Original
+++ New
@@ @@
             return 'total_invoice_amount_must_be_more_than_paid_amount';
         }
         if ($oldTotal != $request->total) {
-            $oldTotal = (int) round($request->total) - (int) $oldTotal;
+            $oldTotal = (int) ceil($request->total) - (int) $oldTotal;
         } else {
             $oldTotal = 0;
         }


373) /var/www/app/Models/Invoice.php:389    [M] CastInt

--- Original
+++ New
@@ @@
             return 'total_invoice_amount_must_be_more_than_paid_amount';
         }
         if ($oldTotal != $request->total) {
-            $oldTotal = (int) round($request->total) - (int) $oldTotal;
+            $oldTotal = round($request->total) - (int) $oldTotal;
         } else {
             $oldTotal = 0;
         }


374) /var/www/app/Models/Invoice.php:389    [M] CastInt

--- Original
+++ New
@@ @@
             return 'total_invoice_amount_must_be_more_than_paid_amount';
         }
         if ($oldTotal != $request->total) {
-            $oldTotal = (int) round($request->total) - (int) $oldTotal;
+            $oldTotal = (int) round($request->total) - $oldTotal;
         } else {
             $oldTotal = 0;
         }


375) /var/www/app/Models/Invoice.php:389    [M] Minus

--- Original
+++ New
@@ @@
             return 'total_invoice_amount_must_be_more_than_paid_amount';
         }
         if ($oldTotal != $request->total) {
-            $oldTotal = (int) round($request->total) - (int) $oldTotal;
+            $oldTotal = (int) round($request->total) + (int) $oldTotal;
         } else {
             $oldTotal = 0;
         }


376) /var/www/app/Models/Invoice.php:394    [M] Plus

--- Original
+++ New
@@ @@
         } else {
             $oldTotal = 0;
         }
-        $data['due_amount'] = $this->due_amount + $oldTotal;
+        $data['due_amount'] = $this->due_amount - $oldTotal;
         $data['base_due_amount'] = $data['due_amount'] * $data['exchange_rate'];
         $data['customer_sequence_number'] = $serial->nextCustomerSequenceNumber;
         $this->changeInvoiceStatus($data['due_amount']);


377) /var/www/app/Models/Invoice.php:395    [M] Multiplication

--- Original
+++ New
@@ @@
             $oldTotal = 0;
         }
         $data['due_amount'] = $this->due_amount + $oldTotal;
-        $data['base_due_amount'] = $data['due_amount'] * $data['exchange_rate'];
+        $data['base_due_amount'] = $data['due_amount'] / $data['exchange_rate'];
         $data['customer_sequence_number'] = $serial->nextCustomerSequenceNumber;
         $this->changeInvoiceStatus($data['due_amount']);
         $this->update($data);


378) /var/www/app/Models/Invoice.php:398    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $data['due_amount'] = $this->due_amount + $oldTotal;
         $data['base_due_amount'] = $data['due_amount'] * $data['exchange_rate'];
         $data['customer_sequence_number'] = $serial->nextCustomerSequenceNumber;
-        $this->changeInvoiceStatus($data['due_amount']);
+        
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $data['currency_id'] !== $company_currency) {


379) /var/www/app/Models/Invoice.php:400    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $data['base_due_amount'] = $data['due_amount'] * $data['exchange_rate'];
         $data['customer_sequence_number'] = $serial->nextCustomerSequenceNumber;
         $this->changeInvoiceStatus($data['due_amount']);
-        $this->update($data);
+        
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);


380) /var/www/app/Models/Invoice.php:404    [M] CastString

--- Original
+++ New
@@ @@
         $this->changeInvoiceStatus($data['due_amount']);
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $data['currency_id'] !== $company_currency) {
+        if ($data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);
         }
         $this->items->map(function ($item) {


381) /var/www/app/Models/Invoice.php:404    [M] NotIdentical

--- Original
+++ New
@@ @@
         $this->changeInvoiceStatus($data['due_amount']);
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
-        if ((string) $data['currency_id'] !== $company_currency) {
+        if ((string) $data['currency_id'] === $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);
         }
         $this->items->map(function ($item) {


382) /var/www/app/Models/Invoice.php:405    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->update($data);
         $company_currency = CompanySetting::getSetting('currency', $request->header('company'));
         if ((string) $data['currency_id'] !== $company_currency) {
-            ExchangeRateLog::addExchangeRateLog($this);
+            
         }
         $this->items->map(function ($item) {
             $fields = $item->fields()->get();


383) /var/www/app/Models/Invoice.php:408    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ((string) $data['currency_id'] !== $company_currency) {
             ExchangeRateLog::addExchangeRateLog($this);
         }
-        $this->items->map(function ($item) {
-            $fields = $item->fields()->get();
-            $fields->map(function ($field) {
-                $field->delete();
-            });
-        });
+        
         $this->items()->delete();
         $this->taxes()->delete();
         self::createItems($this, $request->items);


384) /var/www/app/Models/Invoice.php:411    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         $this->items->map(function ($item) {
             $fields = $item->fields()->get();
-            $fields->map(function ($field) {
-                $field->delete();
-            });
+            
         });
         $this->items()->delete();
         $this->taxes()->delete();


385) /var/www/app/Models/Invoice.php:416    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $field->delete();
             });
         });
-        $this->items()->delete();
+        
         $this->taxes()->delete();
         self::createItems($this, $request->items);
         if ($request->has('taxes') && !empty($request->taxes)) {


386) /var/www/app/Models/Invoice.php:417    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             });
         });
         $this->items()->delete();
-        $this->taxes()->delete();
+        
         self::createItems($this, $request->items);
         if ($request->has('taxes') && !empty($request->taxes)) {
             self::createTaxes($this, $request->taxes);


387) /var/www/app/Models/Invoice.php:419    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         });
         $this->items()->delete();
         $this->taxes()->delete();
-        self::createItems($this, $request->items);
+        
         if ($request->has('taxes') && !empty($request->taxes)) {
             self::createTaxes($this, $request->taxes);
         }


388) /var/www/app/Models/Invoice.php:421    [M] LogicalNot

--- Original
+++ New
@@ @@
         $this->items()->delete();
         $this->taxes()->delete();
         self::createItems($this, $request->items);
-        if ($request->has('taxes') && !empty($request->taxes)) {
+        if ($request->has('taxes') && empty($request->taxes)) {
             self::createTaxes($this, $request->taxes);
         }
         if ($request->customFields) {


389) /var/www/app/Models/Invoice.php:421    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $this->items()->delete();
         $this->taxes()->delete();
         self::createItems($this, $request->items);
-        if ($request->has('taxes') && !empty($request->taxes)) {
+        if ($request->has('taxes') || !empty($request->taxes)) {
             self::createTaxes($this, $request->taxes);
         }
         if ($request->customFields) {


390) /var/www/app/Models/Invoice.php:422    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->taxes()->delete();
         self::createItems($this, $request->items);
         if ($request->has('taxes') && !empty($request->taxes)) {
-            self::createTaxes($this, $request->taxes);
+            
         }
         if ($request->customFields) {
             $this->updateCustomFields($request->customFields);


391) /var/www/app/Models/Invoice.php:429    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         if ($request->customFields) {
             $this->updateCustomFields($request->customFields);
         }
-        $invoice = Invoice::with(['items', 'items.fields', 'items.fields.customField', 'customer', 'taxes'])->find($this->id);
+        $invoice = Invoice::with(['items.fields', 'items.fields.customField', 'customer', 'taxes'])->find($this->id);
         return $invoice;
     }
     public function sendInvoiceData($data)


392) /var/www/app/Models/Invoice.php:441    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $invoice = Invoice::with(['items', 'items.fields', 'items.fields.customField', 'customer', 'taxes'])->find($this->id);
         return $invoice;
     }
-    public function sendInvoiceData($data)
+    protected function sendInvoiceData($data)
     {
         $data['invoice'] = $this->toArray();
         $data['customer'] = $this->customer->toArray();


393) /var/www/app/Models/Invoice.php:448    [M] Ternary

--- Original
+++ New
@@ @@
         $data['company'] = Company::find($this->company_id);
         $data['subject'] = $this->getEmailString($data['subject']);
         $data['body'] = $this->getEmailString($data['body']);
-        $data['attach']['data'] = $this->getEmailAttachmentSetting() ? $this->getPDFData() : null;
+        $data['attach']['data'] = $this->getEmailAttachmentSetting() ? null : $this->getPDFData();
         return $data;
     }
     public function preview($data)


394) /var/www/app/Models/Invoice.php:463    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $data = $this->sendInvoiceData($data);
         return ['type' => 'preview', 'view' => new SendInvoiceMail($data)];
     }
-    public function send($data)
+    protected function send($data)
     {
         $data = $this->sendInvoiceData($data);
         \Mail::to($data['to'])->send(new SendInvoiceMail($data));


395) /var/www/app/Models/Invoice.php:467    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function send($data)
     {
         $data = $this->sendInvoiceData($data);
-        \Mail::to($data['to'])->send(new SendInvoiceMail($data));
+        
         if ($this->status == Invoice::STATUS_DRAFT) {
             $this->status = Invoice::STATUS_SENT;
             $this->sent = true;


396) /var/www/app/Models/Invoice.php:469    [M] Equal

--- Original
+++ New
@@ @@
     {
         $data = $this->sendInvoiceData($data);
         \Mail::to($data['to'])->send(new SendInvoiceMail($data));
-        if ($this->status == Invoice::STATUS_DRAFT) {
+        if ($this->status != Invoice::STATUS_DRAFT) {
             $this->status = Invoice::STATUS_SENT;
             $this->sent = true;
             $this->save();


397) /var/www/app/Models/Invoice.php:471    [M] TrueValue

--- Original
+++ New
@@ @@
         \Mail::to($data['to'])->send(new SendInvoiceMail($data));
         if ($this->status == Invoice::STATUS_DRAFT) {
             $this->status = Invoice::STATUS_SENT;
-            $this->sent = true;
+            $this->sent = false;
             $this->save();
         }
         return ['success' => true, 'type' => 'send'];


398) /var/www/app/Models/Invoice.php:472    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($this->status == Invoice::STATUS_DRAFT) {
             $this->status = Invoice::STATUS_SENT;
             $this->sent = true;
-            $this->save();
+            
         }
         return ['success' => true, 'type' => 'send'];
     }


399) /var/www/app/Models/Invoice.php:475    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             $this->sent = true;
             $this->save();
         }
-        return ['success' => true, 'type' => 'send'];
+        return ['type' => 'send'];
     }
     public static function createItems($invoice, $invoiceItems)
     {


400) /var/www/app/Models/Invoice.php:476    [M] TrueValue

--- Original
+++ New
@@ @@
             $this->sent = true;
             $this->save();
         }
-        return ['success' => true, 'type' => 'send'];
+        return ['success' => false, 'type' => 'send'];
     }
     public static function createItems($invoice, $invoiceItems)
     {


401) /var/www/app/Models/Invoice.php:481    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return ['success' => true, 'type' => 'send'];
     }
-    public static function createItems($invoice, $invoiceItems)
+    protected static function createItems($invoice, $invoiceItems)
     {
         $exchange_rate = $invoice->exchange_rate;
         foreach ($invoiceItems as $invoiceItem) {


402) /var/www/app/Models/Invoice.php:485    [M] Foreach_

--- Original
+++ New
@@ @@
     public static function createItems($invoice, $invoiceItems)
     {
         $exchange_rate = $invoice->exchange_rate;
-        foreach ($invoiceItems as $invoiceItem) {
+        foreach (array() as $invoiceItem) {
             $invoiceItem['company_id'] = $invoice->company_id;
             $invoiceItem['exchange_rate'] = $exchange_rate;
             $invoiceItem['base_price'] = $invoiceItem['price'] * $exchange_rate;


403) /var/www/app/Models/Invoice.php:488    [M] Multiplication

--- Original
+++ New
@@ @@
         foreach ($invoiceItems as $invoiceItem) {
             $invoiceItem['company_id'] = $invoice->company_id;
             $invoiceItem['exchange_rate'] = $exchange_rate;
-            $invoiceItem['base_price'] = $invoiceItem['price'] * $exchange_rate;
+            $invoiceItem['base_price'] = $invoiceItem['price'] / $exchange_rate;
             $invoiceItem['base_discount_val'] = $invoiceItem['discount_val'] * $exchange_rate;
             $invoiceItem['base_tax'] = $invoiceItem['tax'] * $exchange_rate;
             $invoiceItem['base_total'] = $invoiceItem['total'] * $exchange_rate;


404) /var/www/app/Models/Invoice.php:489    [M] Multiplication

--- Original
+++ New
@@ @@
             $invoiceItem['company_id'] = $invoice->company_id;
             $invoiceItem['exchange_rate'] = $exchange_rate;
             $invoiceItem['base_price'] = $invoiceItem['price'] * $exchange_rate;
-            $invoiceItem['base_discount_val'] = $invoiceItem['discount_val'] * $exchange_rate;
+            $invoiceItem['base_discount_val'] = $invoiceItem['discount_val'] / $exchange_rate;
             $invoiceItem['base_tax'] = $invoiceItem['tax'] * $exchange_rate;
             $invoiceItem['base_total'] = $invoiceItem['total'] * $exchange_rate;
             if (array_key_exists('recurring_invoice_id', $invoiceItem)) {


405) /var/www/app/Models/Invoice.php:490    [M] Multiplication

--- Original
+++ New
@@ @@
             $invoiceItem['exchange_rate'] = $exchange_rate;
             $invoiceItem['base_price'] = $invoiceItem['price'] * $exchange_rate;
             $invoiceItem['base_discount_val'] = $invoiceItem['discount_val'] * $exchange_rate;
-            $invoiceItem['base_tax'] = $invoiceItem['tax'] * $exchange_rate;
+            $invoiceItem['base_tax'] = $invoiceItem['tax'] / $exchange_rate;
             $invoiceItem['base_total'] = $invoiceItem['total'] * $exchange_rate;
             if (array_key_exists('recurring_invoice_id', $invoiceItem)) {
                 unset($invoiceItem['recurring_invoice_id']);


406) /var/www/app/Models/Invoice.php:491    [M] Multiplication

--- Original
+++ New
@@ @@
             $invoiceItem['base_price'] = $invoiceItem['price'] * $exchange_rate;
             $invoiceItem['base_discount_val'] = $invoiceItem['discount_val'] * $exchange_rate;
             $invoiceItem['base_tax'] = $invoiceItem['tax'] * $exchange_rate;
-            $invoiceItem['base_total'] = $invoiceItem['total'] * $exchange_rate;
+            $invoiceItem['base_total'] = $invoiceItem['total'] / $exchange_rate;
             if (array_key_exists('recurring_invoice_id', $invoiceItem)) {
                 unset($invoiceItem['recurring_invoice_id']);
             }


407) /var/www/app/Models/Invoice.php:499    [M] LogicalAnd

--- Original
+++ New
@@ @@
                 unset($invoiceItem['recurring_invoice_id']);
             }
             $item = $invoice->items()->create($invoiceItem);
-            if (array_key_exists('taxes', $invoiceItem) && $invoiceItem['taxes']) {
+            if (array_key_exists('taxes', $invoiceItem) || $invoiceItem['taxes']) {
                 foreach ($invoiceItem['taxes'] as $tax) {
                     $tax['company_id'] = $invoice->company_id;
                     $tax['exchange_rate'] = $invoice->exchange_rate;


408) /var/www/app/Models/Invoice.php:500    [M] Foreach_

--- Original
+++ New
@@ @@
             }
             $item = $invoice->items()->create($invoiceItem);
             if (array_key_exists('taxes', $invoiceItem) && $invoiceItem['taxes']) {
-                foreach ($invoiceItem['taxes'] as $tax) {
+                foreach (array() as $tax) {
                     $tax['company_id'] = $invoice->company_id;
                     $tax['exchange_rate'] = $invoice->exchange_rate;
                     $tax['base_amount'] = $tax['amount'] * $exchange_rate;


409) /var/www/app/Models/Invoice.php:503    [M] Multiplication

--- Original
+++ New
@@ @@
                 foreach ($invoiceItem['taxes'] as $tax) {
                     $tax['company_id'] = $invoice->company_id;
                     $tax['exchange_rate'] = $invoice->exchange_rate;
-                    $tax['base_amount'] = $tax['amount'] * $exchange_rate;
+                    $tax['base_amount'] = $tax['amount'] / $exchange_rate;
                     $tax['currency_id'] = $invoice->currency_id;
                     if (gettype($tax['amount']) !== "NULL") {
                         if (array_key_exists('recurring_invoice_id', $invoiceItem)) {


410) /var/www/app/Models/Invoice.php:506    [M] NotIdentical

--- Original
+++ New
@@ @@
                     $tax['exchange_rate'] = $invoice->exchange_rate;
                     $tax['base_amount'] = $tax['amount'] * $exchange_rate;
                     $tax['currency_id'] = $invoice->currency_id;
-                    if (gettype($tax['amount']) !== "NULL") {
+                    if (gettype($tax['amount']) === "NULL") {
                         if (array_key_exists('recurring_invoice_id', $invoiceItem)) {
                             unset($invoiceItem['recurring_invoice_id']);
                         }


411) /var/www/app/Models/Invoice.php:511    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                         if (array_key_exists('recurring_invoice_id', $invoiceItem)) {
                             unset($invoiceItem['recurring_invoice_id']);
                         }
-                        $item->taxes()->create($tax);
+                        
                     }
                 }
             }


412) /var/www/app/Models/Invoice.php:516    [M] LogicalAnd

--- Original
+++ New
@@ @@
                     }
                 }
             }
-            if (array_key_exists('custom_fields', $invoiceItem) && $invoiceItem['custom_fields']) {
+            if (array_key_exists('custom_fields', $invoiceItem) || $invoiceItem['custom_fields']) {
                 $item->addCustomFields($invoiceItem['custom_fields']);
             }
         }


413) /var/www/app/Models/Invoice.php:522    [M] PublicVisibility

--- Original
+++ New
@@ @@
             }
         }
     }
-    public static function createTaxes($invoice, $taxes)
+    protected static function createTaxes($invoice, $taxes)
     {
         $exchange_rate = $invoice->exchange_rate;
         foreach ($taxes as $tax) {


414) /var/www/app/Models/Invoice.php:526    [M] Foreach_

--- Original
+++ New
@@ @@
     public static function createTaxes($invoice, $taxes)
     {
         $exchange_rate = $invoice->exchange_rate;
-        foreach ($taxes as $tax) {
+        foreach (array() as $tax) {
             $tax['company_id'] = $invoice->company_id;
             $tax['exchange_rate'] = $invoice->exchange_rate;
             $tax['base_amount'] = $tax['amount'] * $exchange_rate;


415) /var/www/app/Models/Invoice.php:529    [M] Multiplication

--- Original
+++ New
@@ @@
         foreach ($taxes as $tax) {
             $tax['company_id'] = $invoice->company_id;
             $tax['exchange_rate'] = $invoice->exchange_rate;
-            $tax['base_amount'] = $tax['amount'] * $exchange_rate;
+            $tax['base_amount'] = $tax['amount'] / $exchange_rate;
             $tax['currency_id'] = $invoice->currency_id;
             if (gettype($tax['amount']) !== "NULL") {
                 if (array_key_exists('recurring_invoice_id', $tax)) {


416) /var/www/app/Models/Invoice.php:532    [M] NotIdentical

--- Original
+++ New
@@ @@
             $tax['exchange_rate'] = $invoice->exchange_rate;
             $tax['base_amount'] = $tax['amount'] * $exchange_rate;
             $tax['currency_id'] = $invoice->currency_id;
-            if (gettype($tax['amount']) !== "NULL") {
+            if (gettype($tax['amount']) === "NULL") {
                 if (array_key_exists('recurring_invoice_id', $tax)) {
                     unset($tax['recurring_invoice_id']);
                 }


417) /var/www/app/Models/Invoice.php:537    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 if (array_key_exists('recurring_invoice_id', $tax)) {
                     unset($tax['recurring_invoice_id']);
                 }
-                $invoice->taxes()->create($tax);
+                
             }
         }
     }


418) /var/www/app/Models/Invoice.php:590    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return PDF::loadView('app.pdf.invoice.' . $invoiceTemplate);
     }
-    public function getEmailAttachmentSetting()
+    protected function getEmailAttachmentSetting()
     {
         $invoiceAsAttachment = CompanySetting::getSetting('invoice_email_attachment', $this->company_id);
         if ($invoiceAsAttachment == 'NO') {


419) /var/www/app/Models/Invoice.php:594    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     public function getEmailAttachmentSetting()
     {
         $invoiceAsAttachment = CompanySetting::getSetting('invoice_email_attachment', $this->company_id);
-        if ($invoiceAsAttachment == 'NO') {
+        if ($invoiceAsAttachment = 'NO') {
             return false;
         }
         return true;


420) /var/www/app/Models/Invoice.php:594    [M] Equal

--- Original
+++ New
@@ @@
     public function getEmailAttachmentSetting()
     {
         $invoiceAsAttachment = CompanySetting::getSetting('invoice_email_attachment', $this->company_id);
-        if ($invoiceAsAttachment == 'NO') {
+        if ($invoiceAsAttachment != 'NO') {
             return false;
         }
         return true;


421) /var/www/app/Models/Invoice.php:595    [M] FalseValue

--- Original
+++ New
@@ @@
     {
         $invoiceAsAttachment = CompanySetting::getSetting('invoice_email_attachment', $this->company_id);
         if ($invoiceAsAttachment == 'NO') {
-            return false;
+            return true;
         }
         return true;
     }


422) /var/www/app/Models/Invoice.php:639    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->getFormattedString($this->notes);
     }
-    public function getEmailString($body)
+    protected function getEmailString($body)
     {
         $values = array_merge($this->getFieldsArray(), $this->getExtraFields());
         $body = strtr($body, $values);


423) /var/www/app/Models/Invoice.php:641    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
     }
     public function getEmailString($body)
     {
-        $values = array_merge($this->getFieldsArray(), $this->getExtraFields());
+        $values = $this->getFieldsArray();
         $body = strtr($body, $values);
         return preg_replace('/{(.*?)}/', '', $body);
     }


424) /var/www/app/Models/Invoice.php:641    [M] UnwrapArrayMerge

--- Original
+++ New
@@ @@
     }
     public function getEmailString($body)
     {
-        $values = array_merge($this->getFieldsArray(), $this->getExtraFields());
+        $values = $this->getExtraFields();
         $body = strtr($body, $values);
         return preg_replace('/{(.*?)}/', '', $body);
     }


425) /var/www/app/Models/Invoice.php:645    [M] FunctionCall

--- Original
+++ New
@@ @@
     {
         $values = array_merge($this->getFieldsArray(), $this->getExtraFields());
         $body = strtr($body, $values);
-        return preg_replace('/{(.*?)}/', '', $body);
+        preg_replace('/{(.*?)}/', '', $body);
+        return null;
     }
     public function getExtraFields()
     {


426) /var/www/app/Models/Invoice.php:648    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $body = strtr($body, $values);
         return preg_replace('/{(.*?)}/', '', $body);
     }
-    public function getExtraFields()
+    protected function getExtraFields()
     {
         return ['{INVOICE_DATE}' => $this->formattedInvoiceDate, '{INVOICE_DUE_DATE}' => $this->formattedDueDate, '{INVOICE_NUMBER}' => $this->invoice_number, '{INVOICE_REF_NUMBER}' => $this->reference_number];
     }


427) /var/www/app/Models/Invoice.php:650    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function getExtraFields()
     {
-        return ['{INVOICE_DATE}' => $this->formattedInvoiceDate, '{INVOICE_DUE_DATE}' => $this->formattedDueDate, '{INVOICE_NUMBER}' => $this->invoice_number, '{INVOICE_REF_NUMBER}' => $this->reference_number];
+        return ['{INVOICE_DUE_DATE}' => $this->formattedDueDate, '{INVOICE_NUMBER}' => $this->invoice_number, '{INVOICE_REF_NUMBER}' => $this->reference_number];
     }
     public static function invoiceTemplates()
     {


428) /var/www/app/Models/Invoice.php:651    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function getExtraFields()
     {
-        return ['{INVOICE_DATE}' => $this->formattedInvoiceDate, '{INVOICE_DUE_DATE}' => $this->formattedDueDate, '{INVOICE_NUMBER}' => $this->invoice_number, '{INVOICE_REF_NUMBER}' => $this->reference_number];
+        return ['{INVOICE_DATE}' > $this->formattedInvoiceDate, '{INVOICE_DUE_DATE}' => $this->formattedDueDate, '{INVOICE_NUMBER}' => $this->invoice_number, '{INVOICE_REF_NUMBER}' => $this->reference_number];
     }
     public static function invoiceTemplates()
     {


429) /var/www/app/Models/Invoice.php:652    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function getExtraFields()
     {
-        return ['{INVOICE_DATE}' => $this->formattedInvoiceDate, '{INVOICE_DUE_DATE}' => $this->formattedDueDate, '{INVOICE_NUMBER}' => $this->invoice_number, '{INVOICE_REF_NUMBER}' => $this->reference_number];
+        return ['{INVOICE_DATE}' => $this->formattedInvoiceDate, '{INVOICE_DUE_DATE}' > $this->formattedDueDate, '{INVOICE_NUMBER}' => $this->invoice_number, '{INVOICE_REF_NUMBER}' => $this->reference_number];
     }
     public static function invoiceTemplates()
     {


430) /var/www/app/Models/Invoice.php:653    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function getExtraFields()
     {
-        return ['{INVOICE_DATE}' => $this->formattedInvoiceDate, '{INVOICE_DUE_DATE}' => $this->formattedDueDate, '{INVOICE_NUMBER}' => $this->invoice_number, '{INVOICE_REF_NUMBER}' => $this->reference_number];
+        return ['{INVOICE_DATE}' => $this->formattedInvoiceDate, '{INVOICE_DUE_DATE}' => $this->formattedDueDate, '{INVOICE_NUMBER}' > $this->invoice_number, '{INVOICE_REF_NUMBER}' => $this->reference_number];
     }
     public static function invoiceTemplates()
     {


431) /var/www/app/Models/Invoice.php:654    [M] ArrayItem

--- Original
+++ New
@@ @@
     }
     public function getExtraFields()
     {
-        return ['{INVOICE_DATE}' => $this->formattedInvoiceDate, '{INVOICE_DUE_DATE}' => $this->formattedDueDate, '{INVOICE_NUMBER}' => $this->invoice_number, '{INVOICE_REF_NUMBER}' => $this->reference_number];
+        return ['{INVOICE_DATE}' => $this->formattedInvoiceDate, '{INVOICE_DUE_DATE}' => $this->formattedDueDate, '{INVOICE_NUMBER}' => $this->invoice_number, '{INVOICE_REF_NUMBER}' > $this->reference_number];
     }
     public static function invoiceTemplates()
     {


432) /var/www/app/Models/Invoice.php:658    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return ['{INVOICE_DATE}' => $this->formattedInvoiceDate, '{INVOICE_DUE_DATE}' => $this->formattedDueDate, '{INVOICE_NUMBER}' => $this->invoice_number, '{INVOICE_REF_NUMBER}' => $this->reference_number];
     }
-    public static function invoiceTemplates()
+    protected static function invoiceTemplates()
     {
         $templates = Storage::disk('views')->files('/app/pdf/invoice');
         $invoiceTemplates = [];


433) /var/www/app/Models/Invoice.php:663    [M] Foreach_

--- Original
+++ New
@@ @@
     {
         $templates = Storage::disk('views')->files('/app/pdf/invoice');
         $invoiceTemplates = [];
-        foreach ($templates as $key => $template) {
+        foreach (array() as $key => $template) {
             $templateName = Str::before(basename($template), '.blade.php');
             $invoiceTemplates[$key]['name'] = $templateName;
             $invoiceTemplates[$key]['path'] = vite_asset('img/PDF/' . $templateName . '.png');


434) /var/www/app/Models/Invoice.php:666    [M] Concat

--- Original
+++ New
@@ @@
         foreach ($templates as $key => $template) {
             $templateName = Str::before(basename($template), '.blade.php');
             $invoiceTemplates[$key]['name'] = $templateName;
-            $invoiceTemplates[$key]['path'] = vite_asset('img/PDF/' . $templateName . '.png');
+            $invoiceTemplates[$key]['path'] = vite_asset($templateName . 'img/PDF/' . '.png');
         }
         return $invoiceTemplates;
     }


435) /var/www/app/Models/Invoice.php:666    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         foreach ($templates as $key => $template) {
             $templateName = Str::before(basename($template), '.blade.php');
             $invoiceTemplates[$key]['name'] = $templateName;
-            $invoiceTemplates[$key]['path'] = vite_asset('img/PDF/' . $templateName . '.png');
+            $invoiceTemplates[$key]['path'] = vite_asset($templateName . '.png');
         }
         return $invoiceTemplates;
     }


436) /var/www/app/Models/Invoice.php:666    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         foreach ($templates as $key => $template) {
             $templateName = Str::before(basename($template), '.blade.php');
             $invoiceTemplates[$key]['name'] = $templateName;
-            $invoiceTemplates[$key]['path'] = vite_asset('img/PDF/' . $templateName . '.png');
+            $invoiceTemplates[$key]['path'] = vite_asset('img/PDF/' . '.png');
         }
         return $invoiceTemplates;
     }


437) /var/www/app/Models/Invoice.php:666    [M] Concat

--- Original
+++ New
@@ @@
         foreach ($templates as $key => $template) {
             $templateName = Str::before(basename($template), '.blade.php');
             $invoiceTemplates[$key]['name'] = $templateName;
-            $invoiceTemplates[$key]['path'] = vite_asset('img/PDF/' . $templateName . '.png');
+            $invoiceTemplates[$key]['path'] = vite_asset('img/PDF/' . '.png' . $templateName);
         }
         return $invoiceTemplates;
     }


438) /var/www/app/Models/Invoice.php:666    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         foreach ($templates as $key => $template) {
             $templateName = Str::before(basename($template), '.blade.php');
             $invoiceTemplates[$key]['name'] = $templateName;
-            $invoiceTemplates[$key]['path'] = vite_asset('img/PDF/' . $templateName . '.png');
+            $invoiceTemplates[$key]['path'] = vite_asset('img/PDF/' . $templateName);
         }
         return $invoiceTemplates;
     }


439) /var/www/app/Models/Invoice.php:688    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->base_due_amount = $this->due_amount * $this->exchange_rate;
         $this->changeInvoiceStatus($this->due_amount);
     }
-    public function changeInvoiceStatus($amount)
+    protected function changeInvoiceStatus($amount)
     {
         if ($amount < 0) {
             return ['error' => 'invalid_amount'];


440) /var/www/app/Models/Invoice.php:690    [M] LessThan

--- Original
+++ New
@@ @@
     }
     public function changeInvoiceStatus($amount)
     {
-        if ($amount < 0) {
+        if ($amount <= 0) {
             return ['error' => 'invalid_amount'];
         }
         if ($amount == 0) {


441) /var/www/app/Models/Invoice.php:690    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
     }
     public function changeInvoiceStatus($amount)
     {
-        if ($amount < 0) {
+        if ($amount >= 0) {
             return ['error' => 'invalid_amount'];
         }
         if ($amount == 0) {


442) /var/www/app/Models/Invoice.php:696    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if ($amount < 0) {
             return ['error' => 'invalid_amount'];
         }
-        if ($amount == 0) {
+        if ($amount == -1) {
             $this->status = Invoice::STATUS_COMPLETED;
             $this->paid_status = Invoice::STATUS_PAID;
             $this->overdue = false;


443) /var/www/app/Models/Invoice.php:696    [M] AssignmentEqual

--- Original
+++ New
@@ @@
         if ($amount < 0) {
             return ['error' => 'invalid_amount'];
         }
-        if ($amount == 0) {
+        if ($amount = 0) {
             $this->status = Invoice::STATUS_COMPLETED;
             $this->paid_status = Invoice::STATUS_PAID;
             $this->overdue = false;


444) /var/www/app/Models/Invoice.php:696    [M] Equal

--- Original
+++ New
@@ @@
         if ($amount < 0) {
             return ['error' => 'invalid_amount'];
         }
-        if ($amount == 0) {
+        if ($amount != 0) {
             $this->status = Invoice::STATUS_COMPLETED;
             $this->paid_status = Invoice::STATUS_PAID;
             $this->overdue = false;


445) /var/www/app/Models/Invoice.php:700    [M] AssignmentEqual

--- Original
+++ New
@@ @@
             $this->status = Invoice::STATUS_COMPLETED;
             $this->paid_status = Invoice::STATUS_PAID;
             $this->overdue = false;
-        } elseif ($amount == $this->total) {
+        } elseif ($amount = $this->total) {
             $this->status = $this->getPreviousStatus();
             $this->paid_status = Invoice::STATUS_UNPAID;
         } else {


446) /var/www/app/Models/Invoice.php:700    [M] Equal

--- Original
+++ New
@@ @@
             $this->status = Invoice::STATUS_COMPLETED;
             $this->paid_status = Invoice::STATUS_PAID;
             $this->overdue = false;
-        } elseif ($amount == $this->total) {
+        } elseif ($amount != $this->total) {
             $this->status = $this->getPreviousStatus();
             $this->paid_status = Invoice::STATUS_UNPAID;
         } else {


447) /var/www/app/Models/Invoice.php:708    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->status = $this->getPreviousStatus();
             $this->paid_status = Invoice::STATUS_PARTIALLY_PAID;
         }
-        $this->save();
+        
     }
     public static function deleteInvoices($ids)
     {


448) /var/www/app/Models/Invoice.php:711    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         $this->save();
     }
-    public static function deleteInvoices($ids)
+    protected static function deleteInvoices($ids)
     {
         foreach ($ids as $id) {
             $invoice = self::find($id);


449) /var/www/app/Models/Invoice.php:713    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public static function deleteInvoices($ids)
     {
-        foreach ($ids as $id) {
+        foreach (array() as $id) {
             $invoice = self::find($id);
             if ($invoice->transactions()->exists()) {
                 $invoice->transactions()->delete();


450) /var/www/app/Models/Invoice.php:720    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             if ($invoice->transactions()->exists()) {
                 $invoice->transactions()->delete();
             }
-            $invoice->delete();
+            
         }
         return true;
     }
 }


451) /var/www/app/Models/Invoice.php:723    [M] TrueValue

--- Original
+++ New
@@ @@
             }
             $invoice->delete();
         }
-        return true;
+        return false;
     }
 }


452) /var/www/app/Models/InvoiceItem.php:39    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Item::class);
     }
-    public function taxes()
+    protected function taxes()
     {
         return $this->hasMany(Tax::class);
     }


453) /var/www/app/Models/Payment.php:48    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     protected $casts = ['notes' => 'string', 'exchange_rate' => 'float'];
     protected static function booted()
     {
-        static::created(function ($payment) {
-            GeneratePaymentPdfJob::dispatch($payment);
-        });
+        
         static::updated(function ($payment) {
             GeneratePaymentPdfJob::dispatch($payment, true);
         });


454) /var/www/app/Models/Payment.php:49    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     protected static function booted()
     {
         static::created(function ($payment) {
-            GeneratePaymentPdfJob::dispatch($payment);
+            
         });
         static::updated(function ($payment) {
             GeneratePaymentPdfJob::dispatch($payment, true);


455) /var/www/app/Models/Payment.php:52    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         static::created(function ($payment) {
             GeneratePaymentPdfJob::dispatch($payment);
         });
-        static::updated(function ($payment) {
-            GeneratePaymentPdfJob::dispatch($payment, true);
-        });
+        
     }
     public function setSettingsAttribute($value)
     {


456) /var/www/app/Models/Payment.php:64    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $this->attributes['settings'] = json_encode($value);
         }
     }
-    public function getFormattedCreatedAtAttribute($value)
+    protected function getFormattedCreatedAtAttribute($value)
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->created_at)->format($dateFormat);


457) /var/www/app/Models/Payment.php:71    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->created_at)->format($dateFormat);
     }
-    public function getFormattedPaymentDateAttribute($value)
+    protected function getFormattedPaymentDateAttribute($value)
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->payment_date)->format($dateFormat);


458) /var/www/app/Models/Payment.php:78    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $dateFormat = CompanySetting::getSetting('carbon_date_format', $this->company_id);
         return Carbon::parse($this->payment_date)->format($dateFormat);
     }
-    public function getPaymentPdfUrlAttribute()
+    protected function getPaymentPdfUrlAttribute()
     {
         return url('/payments/pdf/' . $this->unique_hash);
     }


459) /var/www/app/Models/Payment.php:80    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function getPaymentPdfUrlAttribute()
     {
-        return url('/payments/pdf/' . $this->unique_hash);
+        return url($this->unique_hash . '/payments/pdf/');
     }
     public function transaction()
     {


460) /var/www/app/Models/Payment.php:80    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function getPaymentPdfUrlAttribute()
     {
-        return url('/payments/pdf/' . $this->unique_hash);
+        return url($this->unique_hash);
     }
     public function transaction()
     {


461) /var/www/app/Models/Payment.php:80    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function getPaymentPdfUrlAttribute()
     {
-        return url('/payments/pdf/' . $this->unique_hash);
+        return url('/payments/pdf/');
     }
     public function transaction()
     {


462) /var/www/app/Models/Payment.php:80    [M] FunctionCall

--- Original
+++ New
@@ @@
     }
     public function getPaymentPdfUrlAttribute()
     {
-        return url('/payments/pdf/' . $this->unique_hash);
+        url('/payments/pdf/' . $this->unique_hash);
+        return null;
     }
     public function transaction()
     {


463) /var/www/app/Models/Payment.php:83    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return url('/payments/pdf/' . $this->unique_hash);
     }
-    public function transaction()
+    protected function transaction()
     {
         return $this->belongsTo(Transaction::class);
     }


464) /var/www/app/Models/Payment.php:93    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->morphMany('App\\Models\\EmailLog', 'mailable');
     }
-    public function customer()
+    protected function customer()
     {
         return $this->belongsTo(Customer::class, 'customer_id');
     }


465) /var/www/app/Models/Payment.php:98    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Customer::class, 'customer_id');
     }
-    public function company()
+    protected function company()
     {
         return $this->belongsTo(Company::class);
     }


466) /var/www/app/Models/Payment.php:103    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Company::class);
     }
-    public function invoice()
+    protected function invoice()
     {
         return $this->belongsTo(Invoice::class);
     }


467) /var/www/app/Models/Payment.php:113    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo('Crater\\Models\\User', 'creator_id');
     }
-    public function currency()
+    protected function currency()
     {
         return $this->belongsTo(Currency::class);
     }


468) /var/www/app/Models/Payment.php:118    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Currency::class);
     }
-    public function paymentMethod()
+    protected function paymentMethod()
     {
         return $this->belongsTo(PaymentMethod::class);
     }


469) /var/www/app/Models/Payment.php:287    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('payments.payment_method_id', $paymentMethodId);
     }
-    public function scopePaginateData($query, $limit)
+    protected function scopePaginateData($query, $limit)
     {
         if ($limit == 'all') {
             return $query->get();


470) /var/www/app/Models/Payment.php:289    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit = 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


471) /var/www/app/Models/Payment.php:289    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit != 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


472) /var/www/app/Models/Payment.php:296    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $query->paginate($limit);
     }
-    public function scopeApplyFilters($query, array $filters)
+    protected function scopeApplyFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('search')) {


473) /var/www/app/Models/Payment.php:320    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if ($filters->get('customer_id')) {
             $query->whereCustomer($filters->get('customer_id'));
         }
-        if ($filters->get('from_date') && $filters->get('to_date')) {
+        if ($filters->get('from_date') || $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
             $query->paymentsBetween($start, $end);


474) /var/www/app/Models/Payment.php:326    [M] LogicalOr

--- Original
+++ New
@@ @@
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
             $query->paymentsBetween($start, $end);
         }
-        if ($filters->get('orderByField') || $filters->get('orderBy')) {
+        if ($filters->get('orderByField') && $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'desc';
             $query->whereOrder($field, $orderBy);


475) /var/www/app/Models/Payment.php:351    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orWhere('id', $payment_id);
     }
-    public function scopeWhereCompany($query)
+    protected function scopeWhereCompany($query)
     {
         $query->where('payments.company_id', request()->header('company'));
     }


476) /var/www/app/Models/Payment.php:353    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query)
     {
-        $query->where('payments.company_id', request()->header('company'));
+        
     }
     public function scopeWhereCustomer($query, $customer_id)
     {


477) /var/www/app/Models/PaymentMethod.php:39    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Expense::class);
     }
-    public function company()
+    protected function company()
     {
         return $this->belongsTo(Company::class);
     }


478) /var/www/app/Models/Setting.php:14    [M] PublicVisibility

--- Original
+++ New
@@ @@
 {
     use HasFactory;
     protected $fillable = ['option', 'value'];
-    public static function setSetting($key, $setting)
+    protected static function setSetting($key, $setting)
     {
         $old = self::whereOption($key)->first();
         if ($old) {


479) /var/www/app/Models/Setting.php:20    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $old = self::whereOption($key)->first();
         if ($old) {
             $old->value = $setting;
-            $old->save();
+            
             return;
         }
         $set = new Setting();


480) /var/www/app/Models/Setting.php:28    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $set = new Setting();
         $set->option = $key;
         $set->value = $setting;
-        $set->save();
+        
     }
     public static function setSettings($settings)
     {


481) /var/www/app/Models/Tax.php:23    [M] PublicVisibility

--- Original
+++ New
@@ @@
     use HasFactory;
     protected $guarded = ['id'];
     protected $casts = ['amount' => 'integer', 'percent' => 'float'];
-    public function taxType()
+    protected function taxType()
     {
         return $this->belongsTo(TaxType::class);
     }


482) /var/www/app/Models/Tax.php:43    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Estimate::class);
     }
-    public function currency()
+    protected function currency()
     {
         return $this->belongsTo(Currency::class);
     }


483) /var/www/app/Models/Tax.php:48    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Currency::class);
     }
-    public function invoiceItem()
+    protected function invoiceItem()
     {
         return $this->belongsTo(InvoiceItem::class);
     }


484) /var/www/app/Models/TaxType.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Tax::class);
     }
-    public function company()
+    protected function company()
     {
         return $this->belongsTo(Company::class);
     }


485) /var/www/app/Models/TaxType.php:34    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Company::class);
     }
-    public function scopeWhereCompany($query)
+    protected function scopeWhereCompany($query)
     {
         $query->where('company_id', request()->header('company'));
     }


486) /var/www/app/Models/TaxType.php:36    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query)
     {
-        $query->where('company_id', request()->header('company'));
+        
     }
     public function scopeWhereTaxType($query, $tax_type_id)
     {


487) /var/www/app/Models/Transaction.php:26    [M] PublicVisibility

--- Original
+++ New
@@ @@
     public const PENDING = 'PENDING';
     public const FAILED = 'FAILED';
     public const SUCCESS = 'SUCCESS';
-    public function payments()
+    protected function payments()
     {
         return $this->hasMany(Payment::class);
     }


488) /var/www/app/Models/Transaction.php:31    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Payment::class);
     }
-    public function invoice()
+    protected function invoice()
     {
         return $this->belongsTo(Invoice::class);
     }


489) /var/www/app/Models/Transaction.php:36    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Invoice::class);
     }
-    public function company()
+    protected function company()
     {
         return $this->belongsTo(Company::class);
     }


490) /var/www/app/Models/Transaction.php:41    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Company::class);
     }
-    public function completeTransaction()
+    protected function completeTransaction()
     {
         $this->status = self::SUCCESS;
         $this->save();


491) /var/www/app/Models/Transaction.php:44    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function completeTransaction()
     {
         $this->status = self::SUCCESS;
-        $this->save();
+        
     }
     public function failedTransaction()
     {


492) /var/www/app/Models/Transaction.php:47    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->status = self::SUCCESS;
         $this->save();
     }
-    public function failedTransaction()
+    protected function failedTransaction()
     {
         $this->status = self::FAILED;
         $this->save();


493) /var/www/app/Models/Transaction.php:50    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function failedTransaction()
     {
         $this->status = self::FAILED;
-        $this->save();
+        
     }
     public static function createTransaction($data)
     {


494) /var/www/app/Models/Transaction.php:53    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->status = self::FAILED;
         $this->save();
     }
-    public static function createTransaction($data)
+    protected static function createTransaction($data)
     {
         $transaction = self::create($data);
         $transaction->unique_hash = Hashids::connection(Transaction::class)->encode($transaction->id);


495) /var/www/app/Models/Transaction.php:57    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $transaction = self::create($data);
         $transaction->unique_hash = Hashids::connection(Transaction::class)->encode($transaction->id);
-        $transaction->save();
+        
         return $transaction;
     }
     public function isExpired()


496) /var/www/app/Models/Transaction.php:62    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $transaction->save();
         return $transaction;
     }
-    public function isExpired()
+    protected function isExpired()
     {
         $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->company_id);
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->company_id);


497) /var/www/app/Models/Transaction.php:69    [M] AssignmentEqual

--- Original
+++ New
@@ @@
         $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->company_id);
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->company_id);
         $expiryDate = $this->updated_at->addDays($linkexpiryDays);
-        if ($checkExpiryLinks == 'YES' && $this->status == self::SUCCESS && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
+        if (($checkExpiryLinks = 'YES') && $this->status == self::SUCCESS && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
             return true;
         }
         return false;
     }
 }


498) /var/www/app/Models/Transaction.php:69    [M] Equal

--- Original
+++ New
@@ @@
         $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->company_id);
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->company_id);
         $expiryDate = $this->updated_at->addDays($linkexpiryDays);
-        if ($checkExpiryLinks == 'YES' && $this->status == self::SUCCESS && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
+        if ($checkExpiryLinks != 'YES' && $this->status == self::SUCCESS && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
             return true;
         }
         return false;
     }
 }


499) /var/www/app/Models/Transaction.php:69    [M] Equal

--- Original
+++ New
@@ @@
         $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->company_id);
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->company_id);
         $expiryDate = $this->updated_at->addDays($linkexpiryDays);
-        if ($checkExpiryLinks == 'YES' && $this->status == self::SUCCESS && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
+        if ($checkExpiryLinks == 'YES' && $this->status != self::SUCCESS && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
             return true;
         }
         return false;
     }
 }


500) /var/www/app/Models/Transaction.php:69    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->company_id);
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->company_id);
         $expiryDate = $this->updated_at->addDays($linkexpiryDays);
-        if ($checkExpiryLinks == 'YES' && $this->status == self::SUCCESS && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
+        if (($checkExpiryLinks == 'YES' || $this->status == self::SUCCESS) && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
             return true;
         }
         return false;
     }
 }


501) /var/www/app/Models/Transaction.php:69    [M] GreaterThan

--- Original
+++ New
@@ @@
         $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->company_id);
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->company_id);
         $expiryDate = $this->updated_at->addDays($linkexpiryDays);
-        if ($checkExpiryLinks == 'YES' && $this->status == self::SUCCESS && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
+        if ($checkExpiryLinks == 'YES' && $this->status == self::SUCCESS && Carbon::now()->format('Y-m-d') >= $expiryDate->format('Y-m-d')) {
             return true;
         }
         return false;
     }
 }


502) /var/www/app/Models/Transaction.php:69    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
         $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->company_id);
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->company_id);
         $expiryDate = $this->updated_at->addDays($linkexpiryDays);
-        if ($checkExpiryLinks == 'YES' && $this->status == self::SUCCESS && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
+        if ($checkExpiryLinks == 'YES' && $this->status == self::SUCCESS && Carbon::now()->format('Y-m-d') <= $expiryDate->format('Y-m-d')) {
             return true;
         }
         return false;
     }
 }


503) /var/www/app/Models/Transaction.php:69    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->company_id);
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->company_id);
         $expiryDate = $this->updated_at->addDays($linkexpiryDays);
-        if ($checkExpiryLinks == 'YES' && $this->status == self::SUCCESS && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
+        if ($checkExpiryLinks == 'YES' && $this->status == self::SUCCESS || Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
             return true;
         }
         return false;
     }
 }


504) /var/www/app/Models/Transaction.php:70    [M] TrueValue

--- Original
+++ New
@@ @@
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->company_id);
         $expiryDate = $this->updated_at->addDays($linkexpiryDays);
         if ($checkExpiryLinks == 'YES' && $this->status == self::SUCCESS && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
-            return true;
+            return false;
         }
         return false;
     }
 }


505) /var/www/app/Models/Transaction.php:73    [M] FalseValue

--- Original
+++ New
@@ @@
         if ($checkExpiryLinks == 'YES' && $this->status == self::SUCCESS && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
             return true;
         }
-        return false;
+        return true;
     }
 }


506) /var/www/app/Models/Unit.php:19    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Item::class);
     }
-    public function company()
+    protected function company()
     {
         return $this->belongsTo(Company::class);
     }


507) /var/www/app/Models/User.php:67    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->where('email', $username)->first();
     }
-    public function setPasswordAttribute($value)
+    protected function setPasswordAttribute($value)
     {
         if ($value != null) {
             $this->attributes['password'] = bcrypt($value);


508) /var/www/app/Models/User.php:69    [M] NotEqual

--- Original
+++ New
@@ @@
     }
     public function setPasswordAttribute($value)
     {
-        if ($value != null) {
+        if ($value == null) {
             $this->attributes['password'] = bcrypt($value);
         }
     }


509) /var/www/app/Models/User.php:88    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $password = $request->password;
         return \Auth::attempt(['email' => $email, 'password' => $password], $remember);
     }
-    public function getFormattedCreatedAtAttribute($value)
+    protected function getFormattedCreatedAtAttribute($value)
     {
         $dateFormat = CompanySetting::getSetting('carbon_date_format', request()->header('company'));
         return Carbon::parse($this->created_at)->format($dateFormat);


510) /var/www/app/Models/User.php:110    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(RecurringInvoice::class, 'creator_id');
     }
-    public function currency()
+    protected function currency()
     {
         return $this->belongsTo(Currency::class, 'currency_id');
     }


511) /var/www/app/Models/User.php:120    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo('Crater\\Models\\User', 'creator_id');
     }
-    public function companies()
+    protected function companies()
     {
         return $this->belongsToMany(Company::class, 'user_company', 'user_id', 'company_id');
     }


512) /var/www/app/Models/User.php:145    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Item::class, 'creator_id');
     }
-    public function settings()
+    protected function settings()
     {
         return $this->hasMany(UserSetting::class, 'user_id');
     }


513) /var/www/app/Models/User.php:271    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
         });
     }
-    public function getAvatarAttribute()
+    protected function getAvatarAttribute()
     {
         $avatar = $this->getMedia('admin_avatar')->first();
         if ($avatar) {


514) /var/www/app/Models/User.php:279    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if ($avatar) {
             return asset($avatar->getUrl());
         }
-        return 0;
+        return -1;
     }
     public function setSettings($settings)
     {


515) /var/www/app/Models/User.php:279    [M] IncrementInteger

--- Original
+++ New
@@ @@
         if ($avatar) {
             return asset($avatar->getUrl());
         }
-        return 0;
+        return 1;
     }
     public function setSettings($settings)
     {


516) /var/www/app/Models/User.php:282    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return 0;
     }
-    public function setSettings($settings)
+    protected function setSettings($settings)
     {
         foreach ($settings as $key => $value) {
             $this->settings()->updateOrCreate(['key' => $key], ['key' => $key, 'value' => $value]);


517) /var/www/app/Models/User.php:284    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function setSettings($settings)
     {
-        foreach ($settings as $key => $value) {
+        foreach (array() as $key => $value) {
             $this->settings()->updateOrCreate(['key' => $key], ['key' => $key, 'value' => $value]);
         }
     }


518) /var/www/app/Models/User.php:285    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function setSettings($settings)
     {
         foreach ($settings as $key => $value) {
-            $this->settings()->updateOrCreate(['key' => $key], ['key' => $key, 'value' => $value]);
+            
         }
     }
     public function hasCompany($company_id)


519) /var/www/app/Models/User.php:286    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function setSettings($settings)
     {
         foreach ($settings as $key => $value) {
-            $this->settings()->updateOrCreate(['key' => $key], ['key' => $key, 'value' => $value]);
+            $this->settings()->updateOrCreate([], ['key' => $key, 'value' => $value]);
         }
     }
     public function hasCompany($company_id)


520) /var/www/app/Models/User.php:289    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function setSettings($settings)
     {
         foreach ($settings as $key => $value) {
-            $this->settings()->updateOrCreate(['key' => $key], ['key' => $key, 'value' => $value]);
+            $this->settings()->updateOrCreate(['key' => $key], ['value' => $value]);
         }
     }
     public function hasCompany($company_id)


521) /var/www/app/Models/User.php:297    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $this->settings()->updateOrCreate(['key' => $key], ['key' => $key, 'value' => $value]);
         }
     }
-    public function hasCompany($company_id)
+    protected function hasCompany($company_id)
     {
         $companies = $this->companies()->pluck('company_id')->toArray();
         return in_array($company_id, $companies);


522) /var/www/app/Models/User.php:301    [M] FunctionCall

--- Original
+++ New
@@ @@
     public function hasCompany($company_id)
     {
         $companies = $this->companies()->pluck('company_id')->toArray();
-        return in_array($company_id, $companies);
+        in_array($company_id, $companies);
+        return null;
     }
     public function getAllSettings()
     {


523) /var/www/app/Models/User.php:318    [M] PublicVisibility

--- Original
+++ New
@@ @@
             return [$item['key'] => $item['value']];
         });
     }
-    public function isOwner()
+    protected function isOwner()
     {
         if (Schema::hasColumn('companies', 'owner_id')) {
             $company = Company::find(request()->header('company'));


524) /var/www/app/Models/User.php:323    [M] Equal

--- Original
+++ New
@@ @@
     {
         if (Schema::hasColumn('companies', 'owner_id')) {
             $company = Company::find(request()->header('company'));
-            if ($company && $this->id == $company->owner_id) {
+            if ($company && $this->id != $company->owner_id) {
                 return true;
             }
         } else {


525) /var/www/app/Models/User.php:323    [M] LogicalAnd

--- Original
+++ New
@@ @@
     {
         if (Schema::hasColumn('companies', 'owner_id')) {
             $company = Company::find(request()->header('company'));
-            if ($company && $this->id == $company->owner_id) {
+            if ($company || $this->id == $company->owner_id) {
                 return true;
             }
         } else {


526) /var/www/app/Models/User.php:324    [M] TrueValue

--- Original
+++ New
@@ @@
         if (Schema::hasColumn('companies', 'owner_id')) {
             $company = Company::find(request()->header('company'));
             if ($company && $this->id == $company->owner_id) {
-                return true;
+                return false;
             }
         } else {
             return $this->role == 'super admin' || $this->role == 'admin';


Not Covered mutants:
====================

1) /var/www/app/Models/Address.php:33    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Customer::class);
     }
-    public function company()
+    protected function company()
     {
         return $this->belongsTo(Company::class);
     }


2) /var/www/app/Models/Company.php:66    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Customer::class);
     }
-    public function owner()
+    protected function owner()
     {
         return $this->belongsTo(User::class, 'owner_id');
     }


3) /var/www/app/Models/Company.php:81    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(RecurringInvoice::class);
     }
-    public function customFields()
+    protected function customFields()
     {
         return $this->hasMany(CustomField::class);
     }


4) /var/www/app/Models/Company.php:86    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(CustomField::class);
     }
-    public function customFieldValues()
+    protected function customFieldValues()
     {
         return $this->hasMany(CustomFieldValue::class);
     }


5) /var/www/app/Models/Company.php:91    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(CustomFieldValue::class);
     }
-    public function exchangeRateLogs()
+    protected function exchangeRateLogs()
     {
         return $this->hasMany(ExchangeRateLog::class);
     }


6) /var/www/app/Models/Company.php:96    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(ExchangeRateLog::class);
     }
-    public function exchangeRateProviders()
+    protected function exchangeRateProviders()
     {
         return $this->hasMany(ExchangeRateProvider::class);
     }


7) /var/www/app/Models/Company.php:111    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Expense::class);
     }
-    public function units()
+    protected function units()
     {
         return $this->hasMany(Unit::class);
     }


8) /var/www/app/Models/Company.php:116    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Unit::class);
     }
-    public function expenseCategories()
+    protected function expenseCategories()
     {
         return $this->hasMany(ExpenseCategory::class);
     }


9) /var/www/app/Models/Company.php:121    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(ExpenseCategory::class);
     }
-    public function taxTypes()
+    protected function taxTypes()
     {
         return $this->hasMany(TaxType::class);
     }


10) /var/www/app/Models/Company.php:136    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Payment::class);
     }
-    public function paymentMethods()
+    protected function paymentMethods()
     {
         return $this->hasMany(PaymentMethod::class);
     }


11) /var/www/app/Models/Company.php:151    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasOne(Address::class);
     }
-    public function users()
+    protected function users()
     {
         return $this->belongsToMany(User::class, 'user_company', 'company_id', 'user_id');
     }


12) /var/www/app/Models/Company.php:265    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->setupDefaultSettings();
         return true;
     }
-    public function deleteCompany($user)
+    protected function deleteCompany($user)
     {
         if ($this->exchangeRateLogs()->exists()) {
             $this->exchangeRateLogs()->delete();


13) /var/www/app/Models/Company.php:268    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function deleteCompany($user)
     {
         if ($this->exchangeRateLogs()->exists()) {
-            $this->exchangeRateLogs()->delete();
+            
         }
         if ($this->exchangeRateProviders()->exists()) {
             $this->exchangeRateProviders()->delete();


14) /var/www/app/Models/Company.php:272    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->exchangeRateLogs()->delete();
         }
         if ($this->exchangeRateProviders()->exists()) {
-            $this->exchangeRateProviders()->delete();
+            
         }
         if ($this->expenses()->exists()) {
             $this->expenses()->delete();


15) /var/www/app/Models/Company.php:276    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->exchangeRateProviders()->delete();
         }
         if ($this->expenses()->exists()) {
-            $this->expenses()->delete();
+            
         }
         if ($this->expenseCategories()->exists()) {
             $this->expenseCategories()->delete();


16) /var/www/app/Models/Company.php:280    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->expenses()->delete();
         }
         if ($this->expenseCategories()->exists()) {
-            $this->expenseCategories()->delete();
+            
         }
         if ($this->payments()->exists()) {
             $this->payments()->delete();


17) /var/www/app/Models/Company.php:284    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->expenseCategories()->delete();
         }
         if ($this->payments()->exists()) {
-            $this->payments()->delete();
+            
         }
         if ($this->paymentMethods()->exists()) {
             $this->paymentMethods()->delete();


18) /var/www/app/Models/Company.php:288    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->payments()->delete();
         }
         if ($this->paymentMethods()->exists()) {
-            $this->paymentMethods()->delete();
+            
         }
         if ($this->customFieldValues()->exists()) {
             $this->customFieldValues()->delete();


19) /var/www/app/Models/Company.php:292    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->paymentMethods()->delete();
         }
         if ($this->customFieldValues()->exists()) {
-            $this->customFieldValues()->delete();
+            
         }
         if ($this->customFields()->exists()) {
             $this->customFields()->delete();


20) /var/www/app/Models/Company.php:297    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->customFieldValues()->delete();
         }
         if ($this->customFields()->exists()) {
-            $this->customFields()->delete();
+            
         }
         if ($this->invoices()->exists()) {
             $this->invoices->map(function ($invoice) {


21) /var/www/app/Models/Company.php:301    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->customFields()->delete();
         }
         if ($this->invoices()->exists()) {
-            $this->invoices->map(function ($invoice) {
-                $this->checkModelData($invoice);
-                if ($invoice->transactions()->exists()) {
-                    $invoice->transactions()->delete();
-                }
-            });
+            
             $this->invoices()->delete();
         }
         if ($this->recurringInvoices()->exists()) {


22) /var/www/app/Models/Company.php:302    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         if ($this->invoices()->exists()) {
             $this->invoices->map(function ($invoice) {
-                $this->checkModelData($invoice);
+                
                 if ($invoice->transactions()->exists()) {
                     $invoice->transactions()->delete();
                 }


23) /var/www/app/Models/Company.php:305    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->invoices->map(function ($invoice) {
                 $this->checkModelData($invoice);
                 if ($invoice->transactions()->exists()) {
-                    $invoice->transactions()->delete();
+                    
                 }
             });
             $this->invoices()->delete();


24) /var/www/app/Models/Company.php:309    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     $invoice->transactions()->delete();
                 }
             });
-            $this->invoices()->delete();
+            
         }
         if ($this->recurringInvoices()->exists()) {
             $this->recurringInvoices->map(function ($recurringInvoice) {


25) /var/www/app/Models/Company.php:313    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->invoices()->delete();
         }
         if ($this->recurringInvoices()->exists()) {
-            $this->recurringInvoices->map(function ($recurringInvoice) {
-                $this->checkModelData($recurringInvoice);
-            });
+            
             $this->recurringInvoices()->delete();
         }
         if ($this->estimates()->exists()) {


26) /var/www/app/Models/Company.php:314    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         if ($this->recurringInvoices()->exists()) {
             $this->recurringInvoices->map(function ($recurringInvoice) {
-                $this->checkModelData($recurringInvoice);
+                
             });
             $this->recurringInvoices()->delete();
         }


27) /var/www/app/Models/Company.php:317    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->recurringInvoices->map(function ($recurringInvoice) {
                 $this->checkModelData($recurringInvoice);
             });
-            $this->recurringInvoices()->delete();
+            
         }
         if ($this->estimates()->exists()) {
             $this->estimates->map(function ($estimate) {


28) /var/www/app/Models/Company.php:321    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->recurringInvoices()->delete();
         }
         if ($this->estimates()->exists()) {
-            $this->estimates->map(function ($estimate) {
-                $this->checkModelData($estimate);
-            });
+            
             $this->estimates()->delete();
         }
         if ($this->items()->exists()) {


29) /var/www/app/Models/Company.php:322    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         if ($this->estimates()->exists()) {
             $this->estimates->map(function ($estimate) {
-                $this->checkModelData($estimate);
+                
             });
             $this->estimates()->delete();
         }


30) /var/www/app/Models/Company.php:325    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->estimates->map(function ($estimate) {
                 $this->checkModelData($estimate);
             });
-            $this->estimates()->delete();
+            
         }
         if ($this->items()->exists()) {
             $this->items()->delete();


31) /var/www/app/Models/Company.php:329    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->estimates()->delete();
         }
         if ($this->items()->exists()) {
-            $this->items()->delete();
+            
         }
         if ($this->taxTypes()->exists()) {
             $this->taxTypes()->delete();


32) /var/www/app/Models/Company.php:333    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->items()->delete();
         }
         if ($this->taxTypes()->exists()) {
-            $this->taxTypes()->delete();
+            
         }
         if ($this->customers()->exists()) {
             $this->customers->map(function ($customer) {


33) /var/www/app/Models/Company.php:337    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->taxTypes()->delete();
         }
         if ($this->customers()->exists()) {
-            $this->customers->map(function ($customer) {
-                if ($customer->addresses()->exists()) {
-                    $customer->addresses()->delete();
-                }
-                $customer->delete();
-            });
+            
         }
         $roles = Role::when($this->id, function ($query) {
             return $query->where('scope', $this->id);


34) /var/www/app/Models/Company.php:339    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($this->customers()->exists()) {
             $this->customers->map(function ($customer) {
                 if ($customer->addresses()->exists()) {
-                    $customer->addresses()->delete();
+                    
                 }
                 $customer->delete();
             });


35) /var/www/app/Models/Company.php:342    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 if ($customer->addresses()->exists()) {
                     $customer->addresses()->delete();
                 }
-                $customer->delete();
+                
             });
         }
         $roles = Role::when($this->id, function ($query) {


36) /var/www/app/Models/Company.php:351    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             return $query->where('scope', $this->id);
         })->get();
         if ($roles) {
-            $roles->map(function ($role) {
-                $role->delete();
-            });
+            
         }
         if ($this->users()->exists()) {
             $user->companies()->detach($this->id);


37) /var/www/app/Models/Company.php:352    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         })->get();
         if ($roles) {
             $roles->map(function ($role) {
-                $role->delete();
+                
             });
         }
         if ($this->users()->exists()) {


38) /var/www/app/Models/Company.php:357    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             });
         }
         if ($this->users()->exists()) {
-            $user->companies()->detach($this->id);
+            
         }
         $this->settings()->delete();
         $this->address()->delete();


39) /var/www/app/Models/Company.php:360    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($this->users()->exists()) {
             $user->companies()->detach($this->id);
         }
-        $this->settings()->delete();
+        
         $this->address()->delete();
         $this->delete();
         return true;


40) /var/www/app/Models/Company.php:362    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $user->companies()->detach($this->id);
         }
         $this->settings()->delete();
-        $this->address()->delete();
+        
         $this->delete();
         return true;
     }


41) /var/www/app/Models/Company.php:364    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         $this->settings()->delete();
         $this->address()->delete();
-        $this->delete();
+        
         return true;
     }
     public function checkModelData($model)


42) /var/www/app/Models/Company.php:366    [M] TrueValue

--- Original
+++ New
@@ @@
         $this->settings()->delete();
         $this->address()->delete();
         $this->delete();
-        return true;
+        return false;
     }
     public function checkModelData($model)
     {


43) /var/www/app/Models/Company.php:369    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->delete();
         return true;
     }
-    public function checkModelData($model)
+    protected function checkModelData($model)
     {
         $model->items->map(function ($item) {
             if ($item->taxes()->exists()) {


44) /var/www/app/Models/Company.php:371    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function checkModelData($model)
     {
-        $model->items->map(function ($item) {
-            if ($item->taxes()->exists()) {
-                $item->taxes()->delete();
-            }
-            $item->delete();
-        });
+        
         if ($model->taxes()->exists()) {
             $model->taxes()->delete();
         }


45) /var/www/app/Models/Company.php:373    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $model->items->map(function ($item) {
             if ($item->taxes()->exists()) {
-                $item->taxes()->delete();
+                
             }
             $item->delete();
         });


46) /var/www/app/Models/Company.php:376    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             if ($item->taxes()->exists()) {
                 $item->taxes()->delete();
             }
-            $item->delete();
+            
         });
         if ($model->taxes()->exists()) {
             $model->taxes()->delete();


47) /var/www/app/Models/Company.php:380    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $item->delete();
         });
         if ($model->taxes()->exists()) {
-            $model->taxes()->delete();
+            
         }
     }
     public function hasTransactions()


48) /var/www/app/Models/CompanySetting.php:41    [M] PublicVisibility

--- Original
+++ New
@@ @@
             self::updateOrCreate(['option' => $key, 'company_id' => $company_id], ['option' => $key, 'company_id' => $company_id, 'value' => $value]);
         }
     }
-    public static function getAllSettings($company_id)
+    protected static function getAllSettings($company_id)
     {
         return static::whereCompany($company_id)->get()->mapWithKeys(function ($item) {
             return [$item['option'] => $item['value']];


49) /var/www/app/Models/CompanySetting.php:44    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public static function getAllSettings($company_id)
     {
         return static::whereCompany($company_id)->get()->mapWithKeys(function ($item) {
-            return [$item['option'] => $item['value']];
+            return [];
         });
     }
     public static function getSettings($settings, $company_id)


50) /var/www/app/Models/CustomField.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
     protected $dates = ['date_answer', 'date_time_answer'];
     protected $appends = ['defaultAnswer'];
     protected $casts = ['options' => 'array'];
-    public function setTimeAnswerAttribute($value)
+    protected function setTimeAnswerAttribute($value)
     {
         if ($value && $value != null) {
             $this->attributes['time_answer'] = date("H:i:s", strtotime($value));


51) /var/www/app/Models/CustomField.php:31    [M] NotEqual

--- Original
+++ New
@@ @@
     protected $casts = ['options' => 'array'];
     public function setTimeAnswerAttribute($value)
     {
-        if ($value && $value != null) {
+        if ($value && $value == null) {
             $this->attributes['time_answer'] = date("H:i:s", strtotime($value));
         }
     }


52) /var/www/app/Models/CustomField.php:31    [M] LogicalAnd

--- Original
+++ New
@@ @@
     protected $casts = ['options' => 'array'];
     public function setTimeAnswerAttribute($value)
     {
-        if ($value && $value != null) {
+        if ($value || $value != null) {
             $this->attributes['time_answer'] = date("H:i:s", strtotime($value));
         }
     }


53) /var/www/app/Models/CustomField.php:36    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $this->attributes['time_answer'] = date("H:i:s", strtotime($value));
         }
     }
-    public function setOptionsAttribute($value)
+    protected function setOptionsAttribute($value)
     {
         $this->attributes['options'] = json_encode($value);
     }


54) /var/www/app/Models/CustomField.php:68    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('custom_fields.company_id', request()->header('company'));
     }
-    public function scopeWhereSearch($query, $search)
+    protected function scopeWhereSearch($query, $search)
     {
         $query->where(function ($query) use($search) {
             $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . $search . '%');


55) /var/www/app/Models/CustomField.php:70    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where(function ($query) use($search) {
-            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
-        });
+        
     }
     public function scopePaginateData($query, $limit)
     {


56) /var/www/app/Models/CustomField.php:71    [M] Concat

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         $query->where(function ($query) use($search) {
-            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
+            $query->where('label', 'LIKE', $search . '%' . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
         });
     }
     public function scopePaginateData($query, $limit)


57) /var/www/app/Models/CustomField.php:71    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         $query->where(function ($query) use($search) {
-            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
+            $query->where('label', 'LIKE', $search . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
         });
     }
     public function scopePaginateData($query, $limit)


58) /var/www/app/Models/CustomField.php:71    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         $query->where(function ($query) use($search) {
-            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
+            $query->where('label', 'LIKE', '%' . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
         });
     }
     public function scopePaginateData($query, $limit)


59) /var/www/app/Models/CustomField.php:71    [M] Concat

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         $query->where(function ($query) use($search) {
-            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
+            $query->where('label', 'LIKE', '%' . '%' . $search)->orWhere('name', 'LIKE', '%' . $search . '%');
         });
     }
     public function scopePaginateData($query, $limit)


60) /var/www/app/Models/CustomField.php:71    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         $query->where(function ($query) use($search) {
-            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
+            $query->where('label', 'LIKE', '%' . $search)->orWhere('name', 'LIKE', '%' . $search . '%');
         });
     }
     public function scopePaginateData($query, $limit)


61) /var/www/app/Models/CustomField.php:71    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         $query->where(function ($query) use($search) {
-            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
+            
         });
     }
     public function scopePaginateData($query, $limit)


62) /var/www/app/Models/CustomField.php:72    [M] Concat

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         $query->where(function ($query) use($search) {
-            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
+            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', $search . '%' . '%');
         });
     }
     public function scopePaginateData($query, $limit)


63) /var/www/app/Models/CustomField.php:72    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         $query->where(function ($query) use($search) {
-            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
+            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', $search . '%');
         });
     }
     public function scopePaginateData($query, $limit)


64) /var/www/app/Models/CustomField.php:72    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         $query->where(function ($query) use($search) {
-            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
+            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . '%');
         });
     }
     public function scopePaginateData($query, $limit)


65) /var/www/app/Models/CustomField.php:72    [M] Concat

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         $query->where(function ($query) use($search) {
-            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
+            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . '%' . $search);
         });
     }
     public function scopePaginateData($query, $limit)


66) /var/www/app/Models/CustomField.php:72    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         $query->where(function ($query) use($search) {
-            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . $search . '%');
+            $query->where('label', 'LIKE', '%' . $search . '%')->orWhere('name', 'LIKE', '%' . $search);
         });
     }
     public function scopePaginateData($query, $limit)


67) /var/www/app/Models/CustomField.php:90    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $filters = collect($filters);
         if ($filters->get('type')) {
-            $query->whereType($filters->get('type'));
+            
         }
         if ($filters->get('search')) {
             $query->whereSearch($filters->get('search'));


68) /var/www/app/Models/CustomField.php:94    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereType($filters->get('type'));
         }
         if ($filters->get('search')) {
-            $query->whereSearch($filters->get('search'));
+            
         }
     }
     public function scopeWhereType($query, $type)


69) /var/www/app/Models/CustomField.php:98    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
     }
-    public function scopeWhereType($query, $type)
+    protected function scopeWhereType($query, $type)
     {
         $query->where('custom_fields.model_type', $type);
     }


70) /var/www/app/Models/CustomField.php:100    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereType($query, $type)
     {
-        $query->where('custom_fields.model_type', $type);
+        
     }
     public static function createCustomField($request)
     {


71) /var/www/app/Models/Customer.php:96    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Currency::class);
     }
-    public function creator()
+    protected function creator()
     {
         return $this->belongsTo(Customer::class, 'creator_id');
     }


72) /var/www/app/Models/Customer.php:118    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function sendPasswordResetNotification($token)
     {
-        $this->notify(new CustomerMailResetPasswordNotification($token));
+        
     }
     public function getAvatarAttribute()
     {


73) /var/www/app/Models/Customer.php:126    [M] FunctionCall

--- Original
+++ New
@@ @@
     {
         $avatar = $this->getMedia('customer_avatar')->first();
         if ($avatar) {
-            return asset($avatar->getUrl());
+            asset($avatar->getUrl());
+            return null;
         }
         return 0;
     }


74) /var/www/app/Models/Customer.php:138    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         foreach ($ids as $id) {
             $customer = self::find($id);
             if ($customer->estimates()->exists()) {
-                $customer->estimates()->delete();
+                
             }
             if ($customer->invoices()->exists()) {
                 $customer->invoices->map(function ($invoice) {


75) /var/www/app/Models/Customer.php:142    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $customer->estimates()->delete();
             }
             if ($customer->invoices()->exists()) {
-                $customer->invoices->map(function ($invoice) {
-                    if ($invoice->transactions()->exists()) {
-                        $invoice->transactions()->delete();
-                    }
-                    $invoice->delete();
-                });
+                
             }
             if ($customer->payments()->exists()) {
                 $customer->payments()->delete();


76) /var/www/app/Models/Customer.php:144    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             if ($customer->invoices()->exists()) {
                 $customer->invoices->map(function ($invoice) {
                     if ($invoice->transactions()->exists()) {
-                        $invoice->transactions()->delete();
+                        
                     }
                     $invoice->delete();
                 });


77) /var/www/app/Models/Customer.php:146    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     if ($invoice->transactions()->exists()) {
                         $invoice->transactions()->delete();
                     }
-                    $invoice->delete();
+                    
                 });
             }
             if ($customer->payments()->exists()) {


78) /var/www/app/Models/Customer.php:151    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 });
             }
             if ($customer->payments()->exists()) {
-                $customer->payments()->delete();
+                
             }
             if ($customer->addresses()->exists()) {
                 $customer->addresses()->delete();


79) /var/www/app/Models/Customer.php:155    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $customer->payments()->delete();
             }
             if ($customer->addresses()->exists()) {
-                $customer->addresses()->delete();
+                
             }
             if ($customer->expenses()->exists()) {
                 $customer->expenses()->delete();


80) /var/www/app/Models/Customer.php:159    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $customer->addresses()->delete();
             }
             if ($customer->expenses()->exists()) {
-                $customer->expenses()->delete();
+                
             }
             if ($customer->recurringInvoices()->exists()) {
                 foreach ($customer->recurringInvoices as $recurringInvoice) {


81) /var/www/app/Models/Customer.php:163    [M] Foreach_

--- Original
+++ New
@@ @@
                 $customer->expenses()->delete();
             }
             if ($customer->recurringInvoices()->exists()) {
-                foreach ($customer->recurringInvoices as $recurringInvoice) {
+                foreach (array() as $recurringInvoice) {
                     if ($recurringInvoice->items()->exists()) {
                         $recurringInvoice->items()->delete();
                     }


82) /var/www/app/Models/Customer.php:165    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             if ($customer->recurringInvoices()->exists()) {
                 foreach ($customer->recurringInvoices as $recurringInvoice) {
                     if ($recurringInvoice->items()->exists()) {
-                        $recurringInvoice->items()->delete();
+                        
                     }
                     $recurringInvoice->delete();
                 }


83) /var/www/app/Models/Customer.php:168    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     if ($recurringInvoice->items()->exists()) {
                         $recurringInvoice->items()->delete();
                     }
-                    $recurringInvoice->delete();
+                    
                 }
             }
             $customer->delete();


84) /var/www/app/Models/Customer.php:197    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         $customFields = $request->customFields;
         if ($customFields) {
-            $customer->addCustomFields($customFields);
+            
         }
         $customer = Customer::with('billingAddress', 'shippingAddress', 'fields')->find($customer->id);
         return $customer;


85) /var/www/app/Models/Customer.php:232    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         $customFields = $request->customFields;
         if ($customFields) {
-            $customer->updateCustomFields($customFields);
+            
         }
         $customer = Customer::with('billingAddress', 'shippingAddress', 'fields')->find($customer->id);
         return $customer;


86) /var/www/app/Models/Customer.php:254    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('customers.company_id', request()->header('company'));
     }
-    public function scopeWhereContactName($query, $contactName)
+    protected function scopeWhereContactName($query, $contactName)
     {
         return $query->where('contact_name', 'LIKE', '%' . $contactName . '%');
     }


87) /var/www/app/Models/Customer.php:256    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereContactName($query, $contactName)
     {
-        return $query->where('contact_name', 'LIKE', '%' . $contactName . '%');
+        return $query->where('contact_name', 'LIKE', $contactName . '%' . '%');
     }
     public function scopeWhereDisplayName($query, $displayName)
     {


88) /var/www/app/Models/Customer.php:256    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereContactName($query, $contactName)
     {
-        return $query->where('contact_name', 'LIKE', '%' . $contactName . '%');
+        return $query->where('contact_name', 'LIKE', $contactName . '%');
     }
     public function scopeWhereDisplayName($query, $displayName)
     {


89) /var/www/app/Models/Customer.php:256    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereContactName($query, $contactName)
     {
-        return $query->where('contact_name', 'LIKE', '%' . $contactName . '%');
+        return $query->where('contact_name', 'LIKE', '%' . '%');
     }
     public function scopeWhereDisplayName($query, $displayName)
     {


90) /var/www/app/Models/Customer.php:256    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereContactName($query, $contactName)
     {
-        return $query->where('contact_name', 'LIKE', '%' . $contactName . '%');
+        return $query->where('contact_name', 'LIKE', '%' . '%' . $contactName);
     }
     public function scopeWhereDisplayName($query, $displayName)
     {


91) /var/www/app/Models/Customer.php:256    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereContactName($query, $contactName)
     {
-        return $query->where('contact_name', 'LIKE', '%' . $contactName . '%');
+        return $query->where('contact_name', 'LIKE', '%' . $contactName);
     }
     public function scopeWhereDisplayName($query, $displayName)
     {


92) /var/www/app/Models/Customer.php:259    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('contact_name', 'LIKE', '%' . $contactName . '%');
     }
-    public function scopeWhereDisplayName($query, $displayName)
+    protected function scopeWhereDisplayName($query, $displayName)
     {
         return $query->where('name', 'LIKE', '%' . $displayName . '%');
     }


93) /var/www/app/Models/Customer.php:261    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereDisplayName($query, $displayName)
     {
-        return $query->where('name', 'LIKE', '%' . $displayName . '%');
+        return $query->where('name', 'LIKE', $displayName . '%' . '%');
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {


94) /var/www/app/Models/Customer.php:261    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereDisplayName($query, $displayName)
     {
-        return $query->where('name', 'LIKE', '%' . $displayName . '%');
+        return $query->where('name', 'LIKE', $displayName . '%');
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {


95) /var/www/app/Models/Customer.php:261    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereDisplayName($query, $displayName)
     {
-        return $query->where('name', 'LIKE', '%' . $displayName . '%');
+        return $query->where('name', 'LIKE', '%' . '%');
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {


96) /var/www/app/Models/Customer.php:261    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereDisplayName($query, $displayName)
     {
-        return $query->where('name', 'LIKE', '%' . $displayName . '%');
+        return $query->where('name', 'LIKE', '%' . '%' . $displayName);
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {


97) /var/www/app/Models/Customer.php:261    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereDisplayName($query, $displayName)
     {
-        return $query->where('name', 'LIKE', '%' . $displayName . '%');
+        return $query->where('name', 'LIKE', '%' . $displayName);
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {


98) /var/www/app/Models/Customer.php:264    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('name', 'LIKE', '%' . $displayName . '%');
     }
-    public function scopeWhereOrder($query, $orderByField, $orderBy)
+    protected function scopeWhereOrder($query, $orderByField, $orderBy)
     {
         $query->orderBy($orderByField, $orderBy);
     }


99) /var/www/app/Models/Customer.php:266    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {
-        $query->orderBy($orderByField, $orderBy);
+        
     }
     public function scopeWhereSearch($query, $search)
     {


100) /var/www/app/Models/Customer.php:280    [M] PublicVisibility

--- Original
+++ New
@@ @@
             });
         }
     }
-    public function scopeWherePhone($query, $phone)
+    protected function scopeWherePhone($query, $phone)
     {
         return $query->where('phone', 'LIKE', '%' . $phone . '%');
     }


101) /var/www/app/Models/Customer.php:282    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWherePhone($query, $phone)
     {
-        return $query->where('phone', 'LIKE', '%' . $phone . '%');
+        return $query->where('phone', 'LIKE', $phone . '%' . '%');
     }
     public function scopeWhereCustomer($query, $customer_id)
     {


102) /var/www/app/Models/Customer.php:282    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWherePhone($query, $phone)
     {
-        return $query->where('phone', 'LIKE', '%' . $phone . '%');
+        return $query->where('phone', 'LIKE', $phone . '%');
     }
     public function scopeWhereCustomer($query, $customer_id)
     {


103) /var/www/app/Models/Customer.php:282    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWherePhone($query, $phone)
     {
-        return $query->where('phone', 'LIKE', '%' . $phone . '%');
+        return $query->where('phone', 'LIKE', '%' . '%');
     }
     public function scopeWhereCustomer($query, $customer_id)
     {


104) /var/www/app/Models/Customer.php:282    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWherePhone($query, $phone)
     {
-        return $query->where('phone', 'LIKE', '%' . $phone . '%');
+        return $query->where('phone', 'LIKE', '%' . '%' . $phone);
     }
     public function scopeWhereCustomer($query, $customer_id)
     {


105) /var/www/app/Models/Customer.php:282    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWherePhone($query, $phone)
     {
-        return $query->where('phone', 'LIKE', '%' . $phone . '%');
+        return $query->where('phone', 'LIKE', '%' . $phone);
     }
     public function scopeWhereCustomer($query, $customer_id)
     {


106) /var/www/app/Models/Customer.php:285    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('phone', 'LIKE', '%' . $phone . '%');
     }
-    public function scopeWhereCustomer($query, $customer_id)
+    protected function scopeWhereCustomer($query, $customer_id)
     {
         $query->orWhere('customers.id', $customer_id);
     }


107) /var/www/app/Models/Customer.php:287    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCustomer($query, $customer_id)
     {
-        $query->orWhere('customers.id', $customer_id);
+        
     }
     public function scopeApplyInvoiceFilters($query, array $filters)
     {


108) /var/www/app/Models/Customer.php:290    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orWhere('customers.id', $customer_id);
     }
-    public function scopeApplyInvoiceFilters($query, array $filters)
+    protected function scopeApplyInvoiceFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('from_date') && $filters->get('to_date')) {


109) /var/www/app/Models/Customer.php:294    [M] LogicalAnd

--- Original
+++ New
@@ @@
     public function scopeApplyInvoiceFilters($query, array $filters)
     {
         $filters = collect($filters);
-        if ($filters->get('from_date') && $filters->get('to_date')) {
+        if ($filters->get('from_date') || $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
             $query->invoicesBetween($start, $end);


110) /var/www/app/Models/Customer.php:297    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
-            $query->invoicesBetween($start, $end);
+            
         }
     }
     public function scopeInvoicesBetween($query, $start, $end)


111) /var/www/app/Models/Customer.php:301    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->invoicesBetween($start, $end);
         }
     }
-    public function scopeInvoicesBetween($query, $start, $end)
+    protected function scopeInvoicesBetween($query, $start, $end)
     {
         $query->whereHas('invoices', function ($query) use($start, $end) {
             $query->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);


112) /var/www/app/Models/Customer.php:303    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeInvoicesBetween($query, $start, $end)
     {
-        $query->whereHas('invoices', function ($query) use($start, $end) {
-            $query->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
-        });
+        
     }
     public function scopeApplyFilters($query, array $filters)
     {


113) /var/www/app/Models/Customer.php:304    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function scopeInvoicesBetween($query, $start, $end)
     {
         $query->whereHas('invoices', function ($query) use($start, $end) {
-            $query->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+            
         });
     }
     public function scopeApplyFilters($query, array $filters)


114) /var/www/app/Models/Customer.php:306    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function scopeInvoicesBetween($query, $start, $end)
     {
         $query->whereHas('invoices', function ($query) use($start, $end) {
-            $query->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+            $query->whereBetween('invoice_date', [$end->format('Y-m-d')]);
         });
     }
     public function scopeApplyFilters($query, array $filters)


115) /var/www/app/Models/Customer.php:320    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
         if ($filters->get('contact_name')) {
-            $query->whereContactName($filters->get('contact_name'));
+            
         }
         if ($filters->get('display_name')) {
             $query->whereDisplayName($filters->get('display_name'));


116) /var/www/app/Models/Customer.php:324    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereContactName($filters->get('contact_name'));
         }
         if ($filters->get('display_name')) {
-            $query->whereDisplayName($filters->get('display_name'));
+            
         }
         if ($filters->get('customer_id')) {
             $query->whereCustomer($filters->get('customer_id'));


117) /var/www/app/Models/Customer.php:328    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereDisplayName($filters->get('display_name'));
         }
         if ($filters->get('customer_id')) {
-            $query->whereCustomer($filters->get('customer_id'));
+            
         }
         if ($filters->get('phone')) {
             $query->wherePhone($filters->get('phone'));


118) /var/www/app/Models/Customer.php:332    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereCustomer($filters->get('customer_id'));
         }
         if ($filters->get('phone')) {
-            $query->wherePhone($filters->get('phone'));
+            
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'name';


119) /var/www/app/Models/Customer.php:336    [M] Ternary

--- Original
+++ New
@@ @@
             $query->wherePhone($filters->get('phone'));
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
-            $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'name';
+            $field = $filters->get('orderByField') ? 'name' : $filters->get('orderByField');
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
             $query->whereOrder($field, $orderBy);
         }
     }
 }


120) /var/www/app/Models/Customer.php:337    [M] Ternary

--- Original
+++ New
@@ @@
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'name';
-            $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
+            $orderBy = $filters->get('orderBy') ? 'asc' : $filters->get('orderBy');
             $query->whereOrder($field, $orderBy);
         }
     }
 }


121) /var/www/app/Models/Customer.php:338    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'name';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
-            $query->whereOrder($field, $orderBy);
+            
         }
     }
 }


122) /var/www/app/Models/EmailLog.php:15    [M] PublicVisibility

--- Original
+++ New
@@ @@
 {
     use HasFactory;
     protected $guarded = ['id'];
-    public function mailable()
+    protected function mailable()
     {
         return $this->morphTo();
     }


123) /var/www/app/Models/EmailLog.php:20    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->morphTo();
     }
-    public function isExpired()
+    protected function isExpired()
     {
         $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->mailable()->get()->toArray()[0]['company_id']);
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->mailable()->get()->toArray()[0]['company_id']);


124) /var/www/app/Models/EmailLog.php:22    [M] IncrementInteger

--- Original
+++ New
@@ @@
     }
     public function isExpired()
     {
-        $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->mailable()->get()->toArray()[0]['company_id']);
+        $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->mailable()->get()->toArray()[1]['company_id']);
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->mailable()->get()->toArray()[0]['company_id']);
         $expiryDate = $this->created_at->addDays($linkexpiryDays);
         if ($checkExpiryLinks == 'YES' && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {


125) /var/www/app/Models/EmailLog.php:23    [M] IncrementInteger

--- Original
+++ New
@@ @@
     public function isExpired()
     {
         $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->mailable()->get()->toArray()[0]['company_id']);
-        $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->mailable()->get()->toArray()[0]['company_id']);
+        $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->mailable()->get()->toArray()[1]['company_id']);
         $expiryDate = $this->created_at->addDays($linkexpiryDays);
         if ($checkExpiryLinks == 'YES' && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
             return true;


126) /var/www/app/Models/EmailLog.php:27    [M] AssignmentEqual

--- Original
+++ New
@@ @@
         $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->mailable()->get()->toArray()[0]['company_id']);
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->mailable()->get()->toArray()[0]['company_id']);
         $expiryDate = $this->created_at->addDays($linkexpiryDays);
-        if ($checkExpiryLinks == 'YES' && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
+        if (($checkExpiryLinks = 'YES') && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
             return true;
         }
         return false;
     }
 }


127) /var/www/app/Models/EmailLog.php:27    [M] Equal

--- Original
+++ New
@@ @@
         $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->mailable()->get()->toArray()[0]['company_id']);
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->mailable()->get()->toArray()[0]['company_id']);
         $expiryDate = $this->created_at->addDays($linkexpiryDays);
-        if ($checkExpiryLinks == 'YES' && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
+        if ($checkExpiryLinks != 'YES' && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
             return true;
         }
         return false;
     }
 }


128) /var/www/app/Models/EmailLog.php:27    [M] GreaterThan

--- Original
+++ New
@@ @@
         $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->mailable()->get()->toArray()[0]['company_id']);
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->mailable()->get()->toArray()[0]['company_id']);
         $expiryDate = $this->created_at->addDays($linkexpiryDays);
-        if ($checkExpiryLinks == 'YES' && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
+        if ($checkExpiryLinks == 'YES' && Carbon::now()->format('Y-m-d') >= $expiryDate->format('Y-m-d')) {
             return true;
         }
         return false;
     }
 }


129) /var/www/app/Models/EmailLog.php:27    [M] GreaterThanNegotiation

--- Original
+++ New
@@ @@
         $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->mailable()->get()->toArray()[0]['company_id']);
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->mailable()->get()->toArray()[0]['company_id']);
         $expiryDate = $this->created_at->addDays($linkexpiryDays);
-        if ($checkExpiryLinks == 'YES' && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
+        if ($checkExpiryLinks == 'YES' && Carbon::now()->format('Y-m-d') <= $expiryDate->format('Y-m-d')) {
             return true;
         }
         return false;
     }
 }


130) /var/www/app/Models/EmailLog.php:27    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $linkexpiryDays = CompanySetting::getSetting('link_expiry_days', $this->mailable()->get()->toArray()[0]['company_id']);
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->mailable()->get()->toArray()[0]['company_id']);
         $expiryDate = $this->created_at->addDays($linkexpiryDays);
-        if ($checkExpiryLinks == 'YES' && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
+        if ($checkExpiryLinks == 'YES' || Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
             return true;
         }
         return false;
     }
 }


131) /var/www/app/Models/EmailLog.php:28    [M] TrueValue

--- Original
+++ New
@@ @@
         $checkExpiryLinks = CompanySetting::getSetting('automatically_expire_public_links', $this->mailable()->get()->toArray()[0]['company_id']);
         $expiryDate = $this->created_at->addDays($linkexpiryDays);
         if ($checkExpiryLinks == 'YES' && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
-            return true;
+            return false;
         }
         return false;
     }
 }


132) /var/www/app/Models/EmailLog.php:31    [M] FalseValue

--- Original
+++ New
@@ @@
         if ($checkExpiryLinks == 'YES' && Carbon::now()->format('Y-m-d') > $expiryDate->format('Y-m-d')) {
             return true;
         }
-        return false;
+        return true;
     }
 }


133) /var/www/app/Models/Estimate.php:64    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return url('/estimates/pdf/' . $this->unique_hash);
     }
-    public function emailLogs()
+    protected function emailLogs()
     {
         return $this->morphMany('App\\Models\\EmailLog', 'mailable');
     }


134) /var/www/app/Models/Estimate.php:121    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->whereBetween('estimates.estimate_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
     }
-    public function scopeWhereStatus($query, $status)
+    protected function scopeWhereStatus($query, $status)
     {
         return $query->where('estimates.status', $status);
     }


135) /var/www/app/Models/Estimate.php:131    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('estimates.estimate_number', 'LIKE', '%' . $estimateNumber . '%');
     }
-    public function scopeWhereEstimate($query, $estimate_id)
+    protected function scopeWhereEstimate($query, $estimate_id)
     {
         $query->orWhere('id', $estimate_id);
     }


136) /var/www/app/Models/Estimate.php:133    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereEstimate($query, $estimate_id)
     {
-        $query->orWhere('id', $estimate_id);
+        
     }
     public function scopeWhereSearch($query, $search)
     {


137) /var/www/app/Models/Estimate.php:160    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereEstimateNumber($filters->get('estimate_number'));
         }
         if ($filters->get('status')) {
-            $query->whereStatus($filters->get('status'));
+            
         }
         if ($filters->get('estimate_id')) {
             $query->whereEstimate($filters->get('estimate_id'));


138) /var/www/app/Models/Estimate.php:164    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereStatus($filters->get('status'));
         }
         if ($filters->get('estimate_id')) {
-            $query->whereEstimate($filters->get('estimate_id'));
+            
         }
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));


139) /var/www/app/Models/Estimate.php:174    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->estimatesBetween($start, $end);
         }
         if ($filters->get('customer_id')) {
-            $query->whereCustomer($filters->get('customer_id'));
+            
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';


140) /var/www/app/Models/Estimate.php:178    [M] Ternary

--- Original
+++ New
@@ @@
             $query->whereCustomer($filters->get('customer_id'));
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
-            $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
+            $field = $filters->get('orderByField') ? 'sequence_number' : $filters->get('orderByField');
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'desc';
             $query->whereOrder($field, $orderBy);
         }


141) /var/www/app/Models/Estimate.php:179    [M] Ternary

--- Original
+++ New
@@ @@
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
-            $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'desc';
+            $orderBy = $filters->get('orderBy') ? 'desc' : $filters->get('orderBy');
             $query->whereOrder($field, $orderBy);
         }
     }


142) /var/www/app/Models/Estimate.php:180    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'desc';
-            $query->whereOrder($field, $orderBy);
+            
         }
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)


143) /var/www/app/Models/Estimate.php:184    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereOrder($field, $orderBy);
         }
     }
-    public function scopeWhereOrder($query, $orderByField, $orderBy)
+    protected function scopeWhereOrder($query, $orderByField, $orderBy)
     {
         $query->orderBy($orderByField, $orderBy);
     }


144) /var/www/app/Models/Estimate.php:186    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {
-        $query->orderBy($orderByField, $orderBy);
+        
     }
     public function scopeWhereCompany($query)
     {


145) /var/www/app/Models/Estimate.php:243    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         $customFields = $request->customFields;
         if ($customFields) {
-            $estimate->addCustomFields($customFields);
+            
         }
         return $estimate;
     }


146) /var/www/app/Models/Estimate.php:274    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->items->map(function ($item) {
             $fields = $item->fields()->get();
             $fields->map(function ($field) {
-                $field->delete();
+                
             });
         });
         $this->items()->delete();


147) /var/www/app/Models/Estimate.php:288    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             self::createTaxes($this, $request, $this->exchange_rate);
         }
         if ($request->customFields) {
-            $this->updateCustomFields($request->customFields);
+            
         }
         return Estimate::with(['items.taxes', 'items.fields', 'items.fields.customField', 'customer', 'taxes'])->find($this->id);
     }


148) /var/www/app/Models/Estimate.php:325    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 }
             }
             if (array_key_exists('custom_fields', $estimateItem) && $estimateItem['custom_fields']) {
-                $item->addCustomFields($estimateItem['custom_fields']);
+                
             }
         }
     }


149) /var/www/app/Models/Estimate.php:374    [M] PublicVisibility

--- Original
+++ New
@@ @@
         \Mail::to($data['to'])->send(new SendEstimateMail($data));
         return ['success' => true, 'type' => 'send'];
     }
-    public function getPDFData()
+    protected function getPDFData()
     {
         $taxes = collect();
         if ($this->tax_per_item === 'YES') {


150) /var/www/app/Models/Estimate.php:378    [M] Identical

--- Original
+++ New
@@ @@
     public function getPDFData()
     {
         $taxes = collect();
-        if ($this->tax_per_item === 'YES') {
+        if ($this->tax_per_item !== 'YES') {
             foreach ($this->items as $item) {
                 foreach ($item->taxes as $tax) {
                     $found = $taxes->filter(function ($item) use($tax) {


151) /var/www/app/Models/Estimate.php:379    [M] Foreach_

--- Original
+++ New
@@ @@
     {
         $taxes = collect();
         if ($this->tax_per_item === 'YES') {
-            foreach ($this->items as $item) {
+            foreach (array() as $item) {
                 foreach ($item->taxes as $tax) {
                     $found = $taxes->filter(function ($item) use($tax) {
                         return $item->tax_type_id == $tax->tax_type_id;


152) /var/www/app/Models/Estimate.php:380    [M] Foreach_

--- Original
+++ New
@@ @@
         $taxes = collect();
         if ($this->tax_per_item === 'YES') {
             foreach ($this->items as $item) {
-                foreach ($item->taxes as $tax) {
+                foreach (array() as $tax) {
                     $found = $taxes->filter(function ($item) use($tax) {
                         return $item->tax_type_id == $tax->tax_type_id;
                     })->first();


153) /var/www/app/Models/Estimate.php:382    [M] Equal

--- Original
+++ New
@@ @@
             foreach ($this->items as $item) {
                 foreach ($item->taxes as $tax) {
                     $found = $taxes->filter(function ($item) use($tax) {
-                        return $item->tax_type_id == $tax->tax_type_id;
+                        return $item->tax_type_id != $tax->tax_type_id;
                     })->first();
                     if ($found) {
                         $found->amount += $tax->amount;


154) /var/www/app/Models/Estimate.php:386    [M] Assignment

--- Original
+++ New
@@ @@
                         return $item->tax_type_id == $tax->tax_type_id;
                     })->first();
                     if ($found) {
-                        $found->amount += $tax->amount;
+                        $found->amount = $tax->amount;
                     } else {
                         $taxes->push($tax);
                     }


155) /var/www/app/Models/Estimate.php:386    [M] PlusEqual

--- Original
+++ New
@@ @@
                         return $item->tax_type_id == $tax->tax_type_id;
                     })->first();
                     if ($found) {
-                        $found->amount += $tax->amount;
+                        $found->amount -= $tax->amount;
                     } else {
                         $taxes->push($tax);
                     }


156) /var/www/app/Models/Estimate.php:388    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     if ($found) {
                         $found->amount += $tax->amount;
                     } else {
-                        $taxes->push($tax);
+                        
                     }
                 }
             }


157) /var/www/app/Models/Estimate.php:400    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $company = Company::find($this->company_id);
         $locale = CompanySetting::getSetting('language', $company->id);
         $customFields = CustomField::where('model_type', 'Item')->get();
-        App::setLocale($locale);
+        
         $logo = $company->logo_path;
         view()->share(['estimate' => $this, 'customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'taxes' => $taxes]);
         if (request()->has('preview')) {


158) /var/www/app/Models/Estimate.php:404    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $customFields = CustomField::where('model_type', 'Item')->get();
         App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['estimate' => $this, 'customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'taxes' => $taxes]);
+        view()->share(['customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'taxes' => $taxes]);
         if (request()->has('preview')) {
             return view('app.pdf.estimate.' . $estimateTemplate);
         }


159) /var/www/app/Models/Estimate.php:404    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $customFields = CustomField::where('model_type', 'Item')->get();
         App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['estimate' => $this, 'customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'taxes' => $taxes]);
+        
         if (request()->has('preview')) {
             return view('app.pdf.estimate.' . $estimateTemplate);
         }


160) /var/www/app/Models/Estimate.php:408    [M] ArrayItem

--- Original
+++ New
@@ @@
         $customFields = CustomField::where('model_type', 'Item')->get();
         App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['estimate' => $this, 'customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'taxes' => $taxes]);
+        view()->share(['estimate' => $this, 'customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' > $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'taxes' => $taxes]);
         if (request()->has('preview')) {
             return view('app.pdf.estimate.' . $estimateTemplate);
         }


161) /var/www/app/Models/Estimate.php:409    [M] ArrayItem

--- Original
+++ New
@@ @@
         $customFields = CustomField::where('model_type', 'Item')->get();
         App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['estimate' => $this, 'customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'taxes' => $taxes]);
+        view()->share(['estimate' => $this, 'customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' => $this->getCompanyAddress(), 'shipping_address' > $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'taxes' => $taxes]);
         if (request()->has('preview')) {
             return view('app.pdf.estimate.' . $estimateTemplate);
         }


162) /var/www/app/Models/Estimate.php:410    [M] ArrayItem

--- Original
+++ New
@@ @@
         $customFields = CustomField::where('model_type', 'Item')->get();
         App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['estimate' => $this, 'customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'taxes' => $taxes]);
+        view()->share(['estimate' => $this, 'customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' > $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'taxes' => $taxes]);
         if (request()->has('preview')) {
             return view('app.pdf.estimate.' . $estimateTemplate);
         }


163) /var/www/app/Models/Estimate.php:411    [M] ArrayItem

--- Original
+++ New
@@ @@
         $customFields = CustomField::where('model_type', 'Item')->get();
         App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['estimate' => $this, 'customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'taxes' => $taxes]);
+        view()->share(['estimate' => $this, 'customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' > $this->getNotes(), 'taxes' => $taxes]);
         if (request()->has('preview')) {
             return view('app.pdf.estimate.' . $estimateTemplate);
         }


164) /var/www/app/Models/Estimate.php:416    [M] Concat

--- Original
+++ New
@@ @@
         $logo = $company->logo_path;
         view()->share(['estimate' => $this, 'customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'taxes' => $taxes]);
         if (request()->has('preview')) {
-            return view('app.pdf.estimate.' . $estimateTemplate);
+            return view($estimateTemplate . 'app.pdf.estimate.');
         }
         return PDF::loadView('app.pdf.estimate.' . $estimateTemplate);
     }


165) /var/www/app/Models/Estimate.php:416    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $logo = $company->logo_path;
         view()->share(['estimate' => $this, 'customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'taxes' => $taxes]);
         if (request()->has('preview')) {
-            return view('app.pdf.estimate.' . $estimateTemplate);
+            return view($estimateTemplate);
         }
         return PDF::loadView('app.pdf.estimate.' . $estimateTemplate);
     }


166) /var/www/app/Models/Estimate.php:416    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $logo = $company->logo_path;
         view()->share(['estimate' => $this, 'customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'taxes' => $taxes]);
         if (request()->has('preview')) {
-            return view('app.pdf.estimate.' . $estimateTemplate);
+            return view('app.pdf.estimate.');
         }
         return PDF::loadView('app.pdf.estimate.' . $estimateTemplate);
     }


167) /var/www/app/Models/Estimate.php:416    [M] FunctionCall

--- Original
+++ New
@@ @@
         $logo = $company->logo_path;
         view()->share(['estimate' => $this, 'customFields' => $customFields, 'logo' => $logo ?? null, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'taxes' => $taxes]);
         if (request()->has('preview')) {
-            return view('app.pdf.estimate.' . $estimateTemplate);
+            view('app.pdf.estimate.' . $estimateTemplate);
+            return null;
         }
         return PDF::loadView('app.pdf.estimate.' . $estimateTemplate);
     }


168) /var/www/app/Models/Estimate.php:419    [M] Concat

--- Original
+++ New
@@ @@
         if (request()->has('preview')) {
             return view('app.pdf.estimate.' . $estimateTemplate);
         }
-        return PDF::loadView('app.pdf.estimate.' . $estimateTemplate);
+        return PDF::loadView($estimateTemplate . 'app.pdf.estimate.');
     }
     public function getCompanyAddress()
     {


169) /var/www/app/Models/Estimate.php:419    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         if (request()->has('preview')) {
             return view('app.pdf.estimate.' . $estimateTemplate);
         }
-        return PDF::loadView('app.pdf.estimate.' . $estimateTemplate);
+        return PDF::loadView($estimateTemplate);
     }
     public function getCompanyAddress()
     {


170) /var/www/app/Models/Estimate.php:419    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         if (request()->has('preview')) {
             return view('app.pdf.estimate.' . $estimateTemplate);
         }
-        return PDF::loadView('app.pdf.estimate.' . $estimateTemplate);
+        return PDF::loadView('app.pdf.estimate.');
     }
     public function getCompanyAddress()
     {


171) /var/www/app/Models/Estimate.php:422    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return PDF::loadView('app.pdf.estimate.' . $estimateTemplate);
     }
-    public function getCompanyAddress()
+    protected function getCompanyAddress()
     {
         if ($this->company && !$this->company->address()->exists()) {
             return false;


172) /var/www/app/Models/Estimate.php:424    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function getCompanyAddress()
     {
-        if ($this->company && !$this->company->address()->exists()) {
+        if ($this->company && $this->company->address()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('estimate_company_address_format', $this->company_id);


173) /var/www/app/Models/Estimate.php:424    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function getCompanyAddress()
     {
-        if ($this->company && !$this->company->address()->exists()) {
+        if ($this->company || !$this->company->address()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('estimate_company_address_format', $this->company_id);


174) /var/www/app/Models/Estimate.php:425    [M] FalseValue

--- Original
+++ New
@@ @@
     public function getCompanyAddress()
     {
         if ($this->company && !$this->company->address()->exists()) {
-            return false;
+            return true;
         }
         $format = CompanySetting::getSetting('estimate_company_address_format', $this->company_id);
         return $this->getFormattedString($format);


175) /var/www/app/Models/Estimate.php:433    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $format = CompanySetting::getSetting('estimate_company_address_format', $this->company_id);
         return $this->getFormattedString($format);
     }
-    public function getCustomerShippingAddress()
+    protected function getCustomerShippingAddress()
     {
         if ($this->customer && !$this->customer->shippingAddress()->exists()) {
             return false;


176) /var/www/app/Models/Estimate.php:435    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function getCustomerShippingAddress()
     {
-        if ($this->customer && !$this->customer->shippingAddress()->exists()) {
+        if ($this->customer && $this->customer->shippingAddress()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('estimate_shipping_address_format', $this->company_id);


177) /var/www/app/Models/Estimate.php:435    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function getCustomerShippingAddress()
     {
-        if ($this->customer && !$this->customer->shippingAddress()->exists()) {
+        if ($this->customer || !$this->customer->shippingAddress()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('estimate_shipping_address_format', $this->company_id);


178) /var/www/app/Models/Estimate.php:436    [M] FalseValue

--- Original
+++ New
@@ @@
     public function getCustomerShippingAddress()
     {
         if ($this->customer && !$this->customer->shippingAddress()->exists()) {
-            return false;
+            return true;
         }
         $format = CompanySetting::getSetting('estimate_shipping_address_format', $this->company_id);
         return $this->getFormattedString($format);


179) /var/www/app/Models/Estimate.php:444    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $format = CompanySetting::getSetting('estimate_shipping_address_format', $this->company_id);
         return $this->getFormattedString($format);
     }
-    public function getCustomerBillingAddress()
+    protected function getCustomerBillingAddress()
     {
         if ($this->customer && !$this->customer->billingAddress()->exists()) {
             return false;


180) /var/www/app/Models/Estimate.php:446    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function getCustomerBillingAddress()
     {
-        if ($this->customer && !$this->customer->billingAddress()->exists()) {
+        if ($this->customer && $this->customer->billingAddress()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('estimate_billing_address_format', $this->company_id);


181) /var/www/app/Models/Estimate.php:446    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function getCustomerBillingAddress()
     {
-        if ($this->customer && !$this->customer->billingAddress()->exists()) {
+        if ($this->customer || !$this->customer->billingAddress()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('estimate_billing_address_format', $this->company_id);


182) /var/www/app/Models/Estimate.php:447    [M] FalseValue

--- Original
+++ New
@@ @@
     public function getCustomerBillingAddress()
     {
         if ($this->customer && !$this->customer->billingAddress()->exists()) {
-            return false;
+            return true;
         }
         $format = CompanySetting::getSetting('estimate_billing_address_format', $this->company_id);
         return $this->getFormattedString($format);


183) /var/www/app/Models/Estimate.php:468    [M] TrueValue

--- Original
+++ New
@@ @@
         if ($estimateAsAttachment == 'NO') {
             return false;
         }
-        return true;
+        return false;
     }
     public function getEmailBody($body)
     {


184) /var/www/app/Models/Estimate.php:529    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $convertEstimateAction = CompanySetting::getSetting('estimate_convert_action', $this->company_id);
         if ($convertEstimateAction === 'delete_estimate') {
-            $this->delete();
+            
         }
         if ($convertEstimateAction === 'mark_estimate_as_accepted') {
             $this->status = self::STATUS_ACCEPTED;


185) /var/www/app/Models/Estimate.php:534    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         if ($convertEstimateAction === 'mark_estimate_as_accepted') {
             $this->status = self::STATUS_ACCEPTED;
-            $this->save();
+            
         }
         return true;
     }
 }


186) /var/www/app/Models/EstimateItem.php:42    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Tax::class);
     }
-    public function scopeWhereCompany($query, $company_id)
+    protected function scopeWhereCompany($query, $company_id)
     {
         $query->where('company_id', $company_id);
     }
 }


187) /var/www/app/Models/EstimateItem.php:44    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query, $company_id)
     {
-        $query->where('company_id', $company_id);
+        
     }
 }


188) /var/www/app/Models/ExchangeRateLog.php:20    [M] PublicVisibility

--- Original
+++ New
@@ @@
     use HasFactory;
     protected $guarded = ['id'];
     protected $casts = ['exchange_rate' => 'float'];
-    public function currency()
+    protected function currency()
     {
         return $this->belongsTo(Currency::class);
     }


189) /var/www/app/Models/ExchangeRateProvider.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
     use HasFactory;
     protected $guarded = ['id'];
     protected $casts = ['currencies' => 'array', 'driver_config' => 'array', 'active' => 'boolean'];
-    public function company()
+    protected function company()
     {
         return $this->belongsTo(Company::class);
     }


190) /var/www/app/Models/ExchangeRateProvider.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Company::class);
     }
-    public function setCurrenciesAttribute($value)
+    protected function setCurrenciesAttribute($value)
     {
         $this->attributes['currencies'] = json_encode($value);
     }


191) /var/www/app/Models/ExchangeRateProvider.php:34    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->attributes['currencies'] = json_encode($value);
     }
-    public function setDriverConfigAttribute($value)
+    protected function setDriverConfigAttribute($value)
     {
         $this->attributes['driver_config'] = json_encode($value);
     }


192) /var/www/app/Models/ExchangeRateProvider.php:39    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->attributes['driver_config'] = json_encode($value);
     }
-    public function scopeWhereCompany($query)
+    protected function scopeWhereCompany($query)
     {
         $query->where('exchange_rate_providers.company_id', request()->header('company'));
     }


193) /var/www/app/Models/ExchangeRateProvider.php:41    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query)
     {
-        $query->where('exchange_rate_providers.company_id', request()->header('company'));
+        
     }
     public static function createFromRequest(ExchangeRateProviderRequest $request)
     {


194) /var/www/app/Models/ExchangeRateProvider.php:44    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('exchange_rate_providers.company_id', request()->header('company'));
     }
-    public static function createFromRequest(ExchangeRateProviderRequest $request)
+    protected static function createFromRequest(ExchangeRateProviderRequest $request)
     {
         $exchangeRateProvider = self::create($request->getExchangeRateProviderPayload());
         return $exchangeRateProvider;


195) /var/www/app/Models/ExchangeRateProvider.php:51    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $exchangeRateProvider = self::create($request->getExchangeRateProviderPayload());
         return $exchangeRateProvider;
     }
-    public function updateFromRequest(ExchangeRateProviderRequest $request)
+    protected function updateFromRequest(ExchangeRateProviderRequest $request)
     {
         $this->update($request->getExchangeRateProviderPayload());
         return $this;


196) /var/www/app/Models/ExchangeRateProvider.php:53    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function updateFromRequest(ExchangeRateProviderRequest $request)
     {
-        $this->update($request->getExchangeRateProviderPayload());
+        
         return $this;
     }
     public static function checkActiveCurrencies($request)


197) /var/www/app/Models/ExchangeRateProvider.php:55    [M] This

--- Original
+++ New
@@ @@
     public function updateFromRequest(ExchangeRateProviderRequest $request)
     {
         $this->update($request->getExchangeRateProviderPayload());
-        return $this;
+        return null;
     }
     public static function checkActiveCurrencies($request)
     {


198) /var/www/app/Models/ExchangeRateProvider.php:58    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->update($request->getExchangeRateProviderPayload());
         return $this;
     }
-    public static function checkActiveCurrencies($request)
+    protected static function checkActiveCurrencies($request)
     {
         $query = ExchangeRateProvider::whereJsonContains('currencies', $request->currencies)->where('active', true)->get();
         return $query;


199) /var/www/app/Models/ExchangeRateProvider.php:61    [M] TrueValue

--- Original
+++ New
@@ @@
     }
     public static function checkActiveCurrencies($request)
     {
-        $query = ExchangeRateProvider::whereJsonContains('currencies', $request->currencies)->where('active', true)->get();
+        $query = ExchangeRateProvider::whereJsonContains('currencies', $request->currencies)->where('active', false)->get();
         return $query;
     }
     public function checkUpdateActiveCurrencies($request)


200) /var/www/app/Models/ExchangeRateProvider.php:67    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $query = ExchangeRateProvider::whereJsonContains('currencies', $request->currencies)->where('active', true)->get();
         return $query;
     }
-    public function checkUpdateActiveCurrencies($request)
+    protected function checkUpdateActiveCurrencies($request)
     {
         $query = ExchangeRateProvider::where('active', $request->active)->where('id', '<>', $this->id)->whereJsonContains('currencies', $request->currencies)->get();
         return $query;


201) /var/www/app/Models/ExchangeRateProvider.php:77    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $query = ExchangeRateProvider::where('active', $request->active)->where('id', '<>', $this->id)->whereJsonContains('currencies', $request->currencies)->get();
         return $query;
     }
-    public static function checkExchangeRateProviderStatus($request)
+    protected static function checkExchangeRateProviderStatus($request)
     {
         switch ($request['driver']) {
             case 'currency_freak':


202) /var/www/app/Models/ExchangeRateProvider.php:81    [M] Concat

--- Original
+++ New
@@ @@
     {
         switch ($request['driver']) {
             case 'currency_freak':
-                $url = "https://api.currencyfreaks.com/latest?apikey=" . $request['key'] . "&symbols=INR&base=USD";
+                $url = $request['key'] . "https://api.currencyfreaks.com/latest?apikey=" . "&symbols=INR&base=USD";
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
                     if ($response["success"] == false) {


203) /var/www/app/Models/ExchangeRateProvider.php:81    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         switch ($request['driver']) {
             case 'currency_freak':
-                $url = "https://api.currencyfreaks.com/latest?apikey=" . $request['key'] . "&symbols=INR&base=USD";
+                $url = $request['key'] . "&symbols=INR&base=USD";
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
                     if ($response["success"] == false) {


204) /var/www/app/Models/ExchangeRateProvider.php:81    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         switch ($request['driver']) {
             case 'currency_freak':
-                $url = "https://api.currencyfreaks.com/latest?apikey=" . $request['key'] . "&symbols=INR&base=USD";
+                $url = "https://api.currencyfreaks.com/latest?apikey=" . "&symbols=INR&base=USD";
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
                     if ($response["success"] == false) {


205) /var/www/app/Models/ExchangeRateProvider.php:81    [M] Concat

--- Original
+++ New
@@ @@
     {
         switch ($request['driver']) {
             case 'currency_freak':
-                $url = "https://api.currencyfreaks.com/latest?apikey=" . $request['key'] . "&symbols=INR&base=USD";
+                $url = "https://api.currencyfreaks.com/latest?apikey=" . "&symbols=INR&base=USD" . $request['key'];
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
                     if ($response["success"] == false) {


206) /var/www/app/Models/ExchangeRateProvider.php:81    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         switch ($request['driver']) {
             case 'currency_freak':
-                $url = "https://api.currencyfreaks.com/latest?apikey=" . $request['key'] . "&symbols=INR&base=USD";
+                $url = "https://api.currencyfreaks.com/latest?apikey=" . $request['key'];
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
                     if ($response["success"] == false) {


207) /var/www/app/Models/ExchangeRateProvider.php:85    [M] FalseValue

--- Original
+++ New
@@ @@
                 $url = "https://api.currencyfreaks.com/latest?apikey=" . $request['key'] . "&symbols=INR&base=USD";
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
-                    if ($response["success"] == false) {
+                    if ($response["success"] == true) {
                         return respondJson($response["error"]["message"], $response["error"]["message"]);
                     }
                 }


208) /var/www/app/Models/ExchangeRateProvider.php:85    [M] Equal

--- Original
+++ New
@@ @@
                 $url = "https://api.currencyfreaks.com/latest?apikey=" . $request['key'] . "&symbols=INR&base=USD";
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
-                    if ($response["success"] == false) {
+                    if ($response["success"] != false) {
                         return respondJson($response["error"]["message"], $response["error"]["message"]);
                     }
                 }


209) /var/www/app/Models/ExchangeRateProvider.php:86    [M] FunctionCall

--- Original
+++ New
@@ @@
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
                     if ($response["success"] == false) {
-                        return respondJson($response["error"]["message"], $response["error"]["message"]);
+                        respondJson($response["error"]["message"], $response["error"]["message"]);
+                        return null;
                     }
                 }
                 return response()->json(['exchangeRate' => array_values($response["rates"])], 200);


210) /var/www/app/Models/ExchangeRateProvider.php:90    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                         return respondJson($response["error"]["message"], $response["error"]["message"]);
                     }
                 }
-                return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
+                return response()->json([], 200);
                 break;
             case 'currency_layer':
                 $url = "http://api.currencylayer.com/live?access_key=" . $request['key'] . "&source=INR&currencies=USD";


211) /var/www/app/Models/ExchangeRateProvider.php:91    [M] UnwrapArrayValues

--- Original
+++ New
@@ @@
                         return respondJson($response["error"]["message"], $response["error"]["message"]);
                     }
                 }
-                return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
+                return response()->json(['exchangeRate' => $response["rates"]], 200);
                 break;
             case 'currency_layer':
                 $url = "http://api.currencylayer.com/live?access_key=" . $request['key'] . "&source=INR&currencies=USD";


212) /var/www/app/Models/ExchangeRateProvider.php:91    [M] ArrayItem

--- Original
+++ New
@@ @@
                         return respondJson($response["error"]["message"], $response["error"]["message"]);
                     }
                 }
-                return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
+                return response()->json(['exchangeRate' > array_values($response["rates"])], 200);
                 break;
             case 'currency_layer':
                 $url = "http://api.currencylayer.com/live?access_key=" . $request['key'] . "&source=INR&currencies=USD";


213) /var/www/app/Models/ExchangeRateProvider.php:92    [M] DecrementInteger

--- Original
+++ New
@@ @@
                         return respondJson($response["error"]["message"], $response["error"]["message"]);
                     }
                 }
-                return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
+                return response()->json(['exchangeRate' => array_values($response["rates"])], 199);
                 break;
             case 'currency_layer':
                 $url = "http://api.currencylayer.com/live?access_key=" . $request['key'] . "&source=INR&currencies=USD";


214) /var/www/app/Models/ExchangeRateProvider.php:92    [M] IncrementInteger

--- Original
+++ New
@@ @@
                         return respondJson($response["error"]["message"], $response["error"]["message"]);
                     }
                 }
-                return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
+                return response()->json(['exchangeRate' => array_values($response["rates"])], 201);
                 break;
             case 'currency_layer':
                 $url = "http://api.currencylayer.com/live?access_key=" . $request['key'] . "&source=INR&currencies=USD";


215) /var/www/app/Models/ExchangeRateProvider.php:97    [M] Concat

--- Original
+++ New
@@ @@
                 return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
                 break;
             case 'currency_layer':
-                $url = "http://api.currencylayer.com/live?access_key=" . $request['key'] . "&source=INR&currencies=USD";
+                $url = $request['key'] . "http://api.currencylayer.com/live?access_key=" . "&source=INR&currencies=USD";
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
                     if ($response["success"] == false) {


216) /var/www/app/Models/ExchangeRateProvider.php:97    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
                 break;
             case 'currency_layer':
-                $url = "http://api.currencylayer.com/live?access_key=" . $request['key'] . "&source=INR&currencies=USD";
+                $url = $request['key'] . "&source=INR&currencies=USD";
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
                     if ($response["success"] == false) {


217) /var/www/app/Models/ExchangeRateProvider.php:97    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
                 break;
             case 'currency_layer':
-                $url = "http://api.currencylayer.com/live?access_key=" . $request['key'] . "&source=INR&currencies=USD";
+                $url = "http://api.currencylayer.com/live?access_key=" . "&source=INR&currencies=USD";
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
                     if ($response["success"] == false) {


218) /var/www/app/Models/ExchangeRateProvider.php:97    [M] Concat

--- Original
+++ New
@@ @@
                 return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
                 break;
             case 'currency_layer':
-                $url = "http://api.currencylayer.com/live?access_key=" . $request['key'] . "&source=INR&currencies=USD";
+                $url = "http://api.currencylayer.com/live?access_key=" . "&source=INR&currencies=USD" . $request['key'];
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
                     if ($response["success"] == false) {


219) /var/www/app/Models/ExchangeRateProvider.php:97    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
                 break;
             case 'currency_layer':
-                $url = "http://api.currencylayer.com/live?access_key=" . $request['key'] . "&source=INR&currencies=USD";
+                $url = "http://api.currencylayer.com/live?access_key=" . $request['key'];
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
                     if ($response["success"] == false) {


220) /var/www/app/Models/ExchangeRateProvider.php:101    [M] FalseValue

--- Original
+++ New
@@ @@
                 $url = "http://api.currencylayer.com/live?access_key=" . $request['key'] . "&source=INR&currencies=USD";
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
-                    if ($response["success"] == false) {
+                    if ($response["success"] == true) {
                         return respondJson($response["error"]["info"], $response["error"]["info"]);
                     }
                 }


221) /var/www/app/Models/ExchangeRateProvider.php:101    [M] Equal

--- Original
+++ New
@@ @@
                 $url = "http://api.currencylayer.com/live?access_key=" . $request['key'] . "&source=INR&currencies=USD";
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
-                    if ($response["success"] == false) {
+                    if ($response["success"] != false) {
                         return respondJson($response["error"]["info"], $response["error"]["info"]);
                     }
                 }


222) /var/www/app/Models/ExchangeRateProvider.php:102    [M] FunctionCall

--- Original
+++ New
@@ @@
                 $response = Http::get($url)->json();
                 if (array_key_exists('success', $response)) {
                     if ($response["success"] == false) {
-                        return respondJson($response["error"]["info"], $response["error"]["info"]);
+                        respondJson($response["error"]["info"], $response["error"]["info"]);
+                        return null;
                     }
                 }
                 return response()->json(['exchangeRate' => array_values($response['quotes'])], 200);


223) /var/www/app/Models/ExchangeRateProvider.php:106    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                         return respondJson($response["error"]["info"], $response["error"]["info"]);
                     }
                 }
-                return response()->json(['exchangeRate' => array_values($response['quotes'])], 200);
+                return response()->json([], 200);
                 break;
             case 'open_exchange_rate':
                 $url = "https://openexchangerates.org/api/latest.json?app_id=" . $request['key'] . "&base=INR&symbols=USD";


224) /var/www/app/Models/ExchangeRateProvider.php:107    [M] UnwrapArrayValues

--- Original
+++ New
@@ @@
                         return respondJson($response["error"]["info"], $response["error"]["info"]);
                     }
                 }
-                return response()->json(['exchangeRate' => array_values($response['quotes'])], 200);
+                return response()->json(['exchangeRate' => $response['quotes']], 200);
                 break;
             case 'open_exchange_rate':
                 $url = "https://openexchangerates.org/api/latest.json?app_id=" . $request['key'] . "&base=INR&symbols=USD";


225) /var/www/app/Models/ExchangeRateProvider.php:107    [M] ArrayItem

--- Original
+++ New
@@ @@
                         return respondJson($response["error"]["info"], $response["error"]["info"]);
                     }
                 }
-                return response()->json(['exchangeRate' => array_values($response['quotes'])], 200);
+                return response()->json(['exchangeRate' > array_values($response['quotes'])], 200);
                 break;
             case 'open_exchange_rate':
                 $url = "https://openexchangerates.org/api/latest.json?app_id=" . $request['key'] . "&base=INR&symbols=USD";


226) /var/www/app/Models/ExchangeRateProvider.php:108    [M] DecrementInteger

--- Original
+++ New
@@ @@
                         return respondJson($response["error"]["info"], $response["error"]["info"]);
                     }
                 }
-                return response()->json(['exchangeRate' => array_values($response['quotes'])], 200);
+                return response()->json(['exchangeRate' => array_values($response['quotes'])], 199);
                 break;
             case 'open_exchange_rate':
                 $url = "https://openexchangerates.org/api/latest.json?app_id=" . $request['key'] . "&base=INR&symbols=USD";


227) /var/www/app/Models/ExchangeRateProvider.php:108    [M] IncrementInteger

--- Original
+++ New
@@ @@
                         return respondJson($response["error"]["info"], $response["error"]["info"]);
                     }
                 }
-                return response()->json(['exchangeRate' => array_values($response['quotes'])], 200);
+                return response()->json(['exchangeRate' => array_values($response['quotes'])], 201);
                 break;
             case 'open_exchange_rate':
                 $url = "https://openexchangerates.org/api/latest.json?app_id=" . $request['key'] . "&base=INR&symbols=USD";


228) /var/www/app/Models/ExchangeRateProvider.php:113    [M] Concat

--- Original
+++ New
@@ @@
                 return response()->json(['exchangeRate' => array_values($response['quotes'])], 200);
                 break;
             case 'open_exchange_rate':
-                $url = "https://openexchangerates.org/api/latest.json?app_id=" . $request['key'] . "&base=INR&symbols=USD";
+                $url = $request['key'] . "https://openexchangerates.org/api/latest.json?app_id=" . "&base=INR&symbols=USD";
                 $response = Http::get($url)->json();
                 if (array_key_exists("error", $response)) {
                     return respondJson($response['message'], $response["description"]);


229) /var/www/app/Models/ExchangeRateProvider.php:113    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 return response()->json(['exchangeRate' => array_values($response['quotes'])], 200);
                 break;
             case 'open_exchange_rate':
-                $url = "https://openexchangerates.org/api/latest.json?app_id=" . $request['key'] . "&base=INR&symbols=USD";
+                $url = $request['key'] . "&base=INR&symbols=USD";
                 $response = Http::get($url)->json();
                 if (array_key_exists("error", $response)) {
                     return respondJson($response['message'], $response["description"]);


230) /var/www/app/Models/ExchangeRateProvider.php:113    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 return response()->json(['exchangeRate' => array_values($response['quotes'])], 200);
                 break;
             case 'open_exchange_rate':
-                $url = "https://openexchangerates.org/api/latest.json?app_id=" . $request['key'] . "&base=INR&symbols=USD";
+                $url = "https://openexchangerates.org/api/latest.json?app_id=" . "&base=INR&symbols=USD";
                 $response = Http::get($url)->json();
                 if (array_key_exists("error", $response)) {
                     return respondJson($response['message'], $response["description"]);


231) /var/www/app/Models/ExchangeRateProvider.php:113    [M] Concat

--- Original
+++ New
@@ @@
                 return response()->json(['exchangeRate' => array_values($response['quotes'])], 200);
                 break;
             case 'open_exchange_rate':
-                $url = "https://openexchangerates.org/api/latest.json?app_id=" . $request['key'] . "&base=INR&symbols=USD";
+                $url = "https://openexchangerates.org/api/latest.json?app_id=" . "&base=INR&symbols=USD" . $request['key'];
                 $response = Http::get($url)->json();
                 if (array_key_exists("error", $response)) {
                     return respondJson($response['message'], $response["description"]);


232) /var/www/app/Models/ExchangeRateProvider.php:113    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 return response()->json(['exchangeRate' => array_values($response['quotes'])], 200);
                 break;
             case 'open_exchange_rate':
-                $url = "https://openexchangerates.org/api/latest.json?app_id=" . $request['key'] . "&base=INR&symbols=USD";
+                $url = "https://openexchangerates.org/api/latest.json?app_id=" . $request['key'];
                 $response = Http::get($url)->json();
                 if (array_key_exists("error", $response)) {
                     return respondJson($response['message'], $response["description"]);


233) /var/www/app/Models/ExchangeRateProvider.php:117    [M] FunctionCall

--- Original
+++ New
@@ @@
                 $url = "https://openexchangerates.org/api/latest.json?app_id=" . $request['key'] . "&base=INR&symbols=USD";
                 $response = Http::get($url)->json();
                 if (array_key_exists("error", $response)) {
-                    return respondJson($response['message'], $response["description"]);
+                    respondJson($response['message'], $response["description"]);
+                    return null;
                 }
                 return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
                 break;


234) /var/www/app/Models/ExchangeRateProvider.php:120    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 if (array_key_exists("error", $response)) {
                     return respondJson($response['message'], $response["description"]);
                 }
-                return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
+                return response()->json([], 200);
                 break;
             case 'currency_converter':
                 $url = self::getCurrencyConverterUrl($request['driver_config']);


235) /var/www/app/Models/ExchangeRateProvider.php:121    [M] UnwrapArrayValues

--- Original
+++ New
@@ @@
                 if (array_key_exists("error", $response)) {
                     return respondJson($response['message'], $response["description"]);
                 }
-                return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
+                return response()->json(['exchangeRate' => $response["rates"]], 200);
                 break;
             case 'currency_converter':
                 $url = self::getCurrencyConverterUrl($request['driver_config']);


236) /var/www/app/Models/ExchangeRateProvider.php:121    [M] ArrayItem

--- Original
+++ New
@@ @@
                 if (array_key_exists("error", $response)) {
                     return respondJson($response['message'], $response["description"]);
                 }
-                return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
+                return response()->json(['exchangeRate' > array_values($response["rates"])], 200);
                 break;
             case 'currency_converter':
                 $url = self::getCurrencyConverterUrl($request['driver_config']);


237) /var/www/app/Models/ExchangeRateProvider.php:122    [M] DecrementInteger

--- Original
+++ New
@@ @@
                 if (array_key_exists("error", $response)) {
                     return respondJson($response['message'], $response["description"]);
                 }
-                return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
+                return response()->json(['exchangeRate' => array_values($response["rates"])], 199);
                 break;
             case 'currency_converter':
                 $url = self::getCurrencyConverterUrl($request['driver_config']);


238) /var/www/app/Models/ExchangeRateProvider.php:122    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 if (array_key_exists("error", $response)) {
                     return respondJson($response['message'], $response["description"]);
                 }
-                return response()->json(['exchangeRate' => array_values($response["rates"])], 200);
+                return response()->json(['exchangeRate' => array_values($response["rates"])], 201);
                 break;
             case 'currency_converter':
                 $url = self::getCurrencyConverterUrl($request['driver_config']);


239) /var/www/app/Models/ExchangeRateProvider.php:128    [M] Concat

--- Original
+++ New
@@ @@
                 break;
             case 'currency_converter':
                 $url = self::getCurrencyConverterUrl($request['driver_config']);
-                $url = $url . "/api/v7/convert?apiKey=" . $request['key'];
+                $url = "/api/v7/convert?apiKey=" . $url . $request['key'];
                 $query = "INR_USD";
                 $url = $url . "&q={$query}" . "&compact=y";
                 $response = Http::get($url)->json();


240) /var/www/app/Models/ExchangeRateProvider.php:128    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 break;
             case 'currency_converter':
                 $url = self::getCurrencyConverterUrl($request['driver_config']);
-                $url = $url . "/api/v7/convert?apiKey=" . $request['key'];
+                $url = "/api/v7/convert?apiKey=" . $request['key'];
                 $query = "INR_USD";
                 $url = $url . "&q={$query}" . "&compact=y";
                 $response = Http::get($url)->json();


241) /var/www/app/Models/ExchangeRateProvider.php:128    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 break;
             case 'currency_converter':
                 $url = self::getCurrencyConverterUrl($request['driver_config']);
-                $url = $url . "/api/v7/convert?apiKey=" . $request['key'];
+                $url = $url . $request['key'];
                 $query = "INR_USD";
                 $url = $url . "&q={$query}" . "&compact=y";
                 $response = Http::get($url)->json();


242) /var/www/app/Models/ExchangeRateProvider.php:128    [M] Concat

--- Original
+++ New
@@ @@
                 break;
             case 'currency_converter':
                 $url = self::getCurrencyConverterUrl($request['driver_config']);
-                $url = $url . "/api/v7/convert?apiKey=" . $request['key'];
+                $url = $url . $request['key'] . "/api/v7/convert?apiKey=";
                 $query = "INR_USD";
                 $url = $url . "&q={$query}" . "&compact=y";
                 $response = Http::get($url)->json();


243) /var/www/app/Models/ExchangeRateProvider.php:128    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 break;
             case 'currency_converter':
                 $url = self::getCurrencyConverterUrl($request['driver_config']);
-                $url = $url . "/api/v7/convert?apiKey=" . $request['key'];
+                $url = $url . "/api/v7/convert?apiKey=";
                 $query = "INR_USD";
                 $url = $url . "&q={$query}" . "&compact=y";
                 $response = Http::get($url)->json();


244) /var/www/app/Models/ExchangeRateProvider.php:131    [M] Concat

--- Original
+++ New
@@ @@
                 $url = self::getCurrencyConverterUrl($request['driver_config']);
                 $url = $url . "/api/v7/convert?apiKey=" . $request['key'];
                 $query = "INR_USD";
-                $url = $url . "&q={$query}" . "&compact=y";
+                $url = "&q={$query}" . $url . "&compact=y";
                 $response = Http::get($url)->json();
                 return response()->json(['exchangeRate' => array_values($response[$query])], 200);
                 break;


245) /var/www/app/Models/ExchangeRateProvider.php:131    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 $url = self::getCurrencyConverterUrl($request['driver_config']);
                 $url = $url . "/api/v7/convert?apiKey=" . $request['key'];
                 $query = "INR_USD";
-                $url = $url . "&q={$query}" . "&compact=y";
+                $url = "&q={$query}" . "&compact=y";
                 $response = Http::get($url)->json();
                 return response()->json(['exchangeRate' => array_values($response[$query])], 200);
                 break;


246) /var/www/app/Models/ExchangeRateProvider.php:131    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 $url = self::getCurrencyConverterUrl($request['driver_config']);
                 $url = $url . "/api/v7/convert?apiKey=" . $request['key'];
                 $query = "INR_USD";
-                $url = $url . "&q={$query}" . "&compact=y";
+                $url = $url . "&compact=y";
                 $response = Http::get($url)->json();
                 return response()->json(['exchangeRate' => array_values($response[$query])], 200);
                 break;


247) /var/www/app/Models/ExchangeRateProvider.php:131    [M] Concat

--- Original
+++ New
@@ @@
                 $url = self::getCurrencyConverterUrl($request['driver_config']);
                 $url = $url . "/api/v7/convert?apiKey=" . $request['key'];
                 $query = "INR_USD";
-                $url = $url . "&q={$query}" . "&compact=y";
+                $url = $url . "&compact=y" . "&q={$query}";
                 $response = Http::get($url)->json();
                 return response()->json(['exchangeRate' => array_values($response[$query])], 200);
                 break;


248) /var/www/app/Models/ExchangeRateProvider.php:131    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
                 $url = self::getCurrencyConverterUrl($request['driver_config']);
                 $url = $url . "/api/v7/convert?apiKey=" . $request['key'];
                 $query = "INR_USD";
-                $url = $url . "&q={$query}" . "&compact=y";
+                $url = $url . "&q={$query}";
                 $response = Http::get($url)->json();
                 return response()->json(['exchangeRate' => array_values($response[$query])], 200);
                 break;


249) /var/www/app/Models/ExchangeRateProvider.php:134    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $query = "INR_USD";
                 $url = $url . "&q={$query}" . "&compact=y";
                 $response = Http::get($url)->json();
-                return response()->json(['exchangeRate' => array_values($response[$query])], 200);
+                return response()->json([], 200);
                 break;
         }
     }


250) /var/www/app/Models/ExchangeRateProvider.php:135    [M] UnwrapArrayValues

--- Original
+++ New
@@ @@
                 $query = "INR_USD";
                 $url = $url . "&q={$query}" . "&compact=y";
                 $response = Http::get($url)->json();
-                return response()->json(['exchangeRate' => array_values($response[$query])], 200);
+                return response()->json(['exchangeRate' => $response[$query]], 200);
                 break;
         }
     }


251) /var/www/app/Models/ExchangeRateProvider.php:135    [M] ArrayItem

--- Original
+++ New
@@ @@
                 $query = "INR_USD";
                 $url = $url . "&q={$query}" . "&compact=y";
                 $response = Http::get($url)->json();
-                return response()->json(['exchangeRate' => array_values($response[$query])], 200);
+                return response()->json(['exchangeRate' > array_values($response[$query])], 200);
                 break;
         }
     }


252) /var/www/app/Models/ExchangeRateProvider.php:136    [M] DecrementInteger

--- Original
+++ New
@@ @@
                 $query = "INR_USD";
                 $url = $url . "&q={$query}" . "&compact=y";
                 $response = Http::get($url)->json();
-                return response()->json(['exchangeRate' => array_values($response[$query])], 200);
+                return response()->json(['exchangeRate' => array_values($response[$query])], 199);
                 break;
         }
     }


253) /var/www/app/Models/ExchangeRateProvider.php:136    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 $query = "INR_USD";
                 $url = $url . "&q={$query}" . "&compact=y";
                 $response = Http::get($url)->json();
-                return response()->json(['exchangeRate' => array_values($response[$query])], 200);
+                return response()->json(['exchangeRate' => array_values($response[$query])], 201);
                 break;
         }
     }


254) /var/www/app/Models/ExchangeRateProvider.php:142    [M] PublicVisibility

--- Original
+++ New
@@ @@
                 break;
         }
     }
-    public static function getCurrencyConverterUrl($data)
+    protected static function getCurrencyConverterUrl($data)
     {
         switch ($data['type']) {
             case 'PREMIUM':


255) /var/www/app/Models/Expense.php:86    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     {
         $media = $this->getFirstMedia('receipts');
         if ($media) {
-            return ['url' => $media->getFullUrl(), 'type' => $media->type];
+            return ['type' => $media->type];
         }
         return null;
     }


256) /var/www/app/Models/Expense.php:87    [M] ArrayItem

--- Original
+++ New
@@ @@
     {
         $media = $this->getFirstMedia('receipts');
         if ($media) {
-            return ['url' => $media->getFullUrl(), 'type' => $media->type];
+            return ['url' > $media->getFullUrl(), 'type' => $media->type];
         }
         return null;
     }


257) /var/www/app/Models/Expense.php:88    [M] ArrayItem

--- Original
+++ New
@@ @@
     {
         $media = $this->getFirstMedia('receipts');
         if ($media) {
-            return ['url' => $media->getFullUrl(), 'type' => $media->type];
+            return ['url' => $media->getFullUrl(), 'type' > $media->type];
         }
         return null;
     }


258) /var/www/app/Models/Expense.php:125    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->whereBetween('expenses.expense_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
     }
-    public function scopeWhereCategoryName($query, $search)
+    protected function scopeWhereCategoryName($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {


259) /var/www/app/Models/Expense.php:127    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCategoryName($query, $search)
     {
-        foreach (explode(' ', $search) as $term) {
+        foreach (array() as $term) {
             $query->whereHas('category', function ($query) use($term) {
                 $query->where('name', 'LIKE', '%' . $term . '%');
             });


260) /var/www/app/Models/Expense.php:128    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereCategoryName($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->whereHas('category', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%');
-            });
+            
         }
     }
     public function scopeWhereNotes($query, $search)


261) /var/www/app/Models/Expense.php:129    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%' . '%');
             });
         }
     }


262) /var/www/app/Models/Expense.php:129    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%');
             });
         }
     }


263) /var/www/app/Models/Expense.php:129    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%');
             });
         }
     }


264) /var/www/app/Models/Expense.php:129    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%' . $term);
             });
         }
     }


265) /var/www/app/Models/Expense.php:129    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term);
             });
         }
     }


266) /var/www/app/Models/Expense.php:129    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('category', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%');
+                
             });
         }
     }


267) /var/www/app/Models/Expense.php:134    [M] PublicVisibility

--- Original
+++ New
@@ @@
             });
         }
     }
-    public function scopeWhereNotes($query, $search)
+    protected function scopeWhereNotes($query, $search)
     {
         $query->where('notes', 'LIKE', '%' . $search . '%');
     }


268) /var/www/app/Models/Expense.php:136    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereNotes($query, $search)
     {
-        $query->where('notes', 'LIKE', '%' . $search . '%');
+        $query->where('notes', 'LIKE', $search . '%' . '%');
     }
     public function scopeWhereCategory($query, $categoryId)
     {


269) /var/www/app/Models/Expense.php:136    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereNotes($query, $search)
     {
-        $query->where('notes', 'LIKE', '%' . $search . '%');
+        $query->where('notes', 'LIKE', $search . '%');
     }
     public function scopeWhereCategory($query, $categoryId)
     {


270) /var/www/app/Models/Expense.php:136    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereNotes($query, $search)
     {
-        $query->where('notes', 'LIKE', '%' . $search . '%');
+        $query->where('notes', 'LIKE', '%' . '%');
     }
     public function scopeWhereCategory($query, $categoryId)
     {


271) /var/www/app/Models/Expense.php:136    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereNotes($query, $search)
     {
-        $query->where('notes', 'LIKE', '%' . $search . '%');
+        $query->where('notes', 'LIKE', '%' . '%' . $search);
     }
     public function scopeWhereCategory($query, $categoryId)
     {


272) /var/www/app/Models/Expense.php:136    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereNotes($query, $search)
     {
-        $query->where('notes', 'LIKE', '%' . $search . '%');
+        $query->where('notes', 'LIKE', '%' . $search);
     }
     public function scopeWhereCategory($query, $categoryId)
     {


273) /var/www/app/Models/Expense.php:136    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereNotes($query, $search)
     {
-        $query->where('notes', 'LIKE', '%' . $search . '%');
+        
     }
     public function scopeWhereCategory($query, $categoryId)
     {


274) /var/www/app/Models/Expense.php:158    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereCategory($filters->get('expense_category_id'));
         }
         if ($filters->get('customer_id')) {
-            $query->whereUser($filters->get('customer_id'));
+            
         }
         if ($filters->get('expense_id')) {
             $query->whereExpense($filters->get('expense_id'));


275) /var/www/app/Models/Expense.php:162    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereUser($filters->get('customer_id'));
         }
         if ($filters->get('expense_id')) {
-            $query->whereExpense($filters->get('expense_id'));
+            
         }
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));


276) /var/www/app/Models/Expense.php:172    [M] Ternary

--- Original
+++ New
@@ @@
             $query->expensesBetween($start, $end);
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
-            $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'expense_date';
+            $field = $filters->get('orderByField') ? 'expense_date' : $filters->get('orderByField');
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
             $query->whereOrder($field, $orderBy);
         }


277) /var/www/app/Models/Expense.php:173    [M] Ternary

--- Original
+++ New
@@ @@
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'expense_date';
-            $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
+            $orderBy = $filters->get('orderBy') ? 'asc' : $filters->get('orderBy');
             $query->whereOrder($field, $orderBy);
         }
         if ($filters->get('search')) {


278) /var/www/app/Models/Expense.php:174    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'expense_date';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
-            $query->whereOrder($field, $orderBy);
+            
         }
         if ($filters->get('search')) {
             $query->whereSearch($filters->get('search'));


279) /var/www/app/Models/Expense.php:182    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
     }
-    public function scopeWhereExpense($query, $expense_id)
+    protected function scopeWhereExpense($query, $expense_id)
     {
         $query->orWhere('id', $expense_id);
     }


280) /var/www/app/Models/Expense.php:184    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereExpense($query, $expense_id)
     {
-        $query->orWhere('id', $expense_id);
+        
     }
     public function scopeWhereSearch($query, $search)
     {


281) /var/www/app/Models/Expense.php:197    [M] PublicVisibility

--- Original
+++ New
@@ @@
             })->orWhere('notes', 'LIKE', '%' . $term . '%');
         }
     }
-    public function scopeWhereOrder($query, $orderByField, $orderBy)
+    protected function scopeWhereOrder($query, $orderByField, $orderBy)
     {
         $query->orderBy($orderByField, $orderBy);
     }


282) /var/www/app/Models/Expense.php:199    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {
-        $query->orderBy($orderByField, $orderBy);
+        
     }
     public function scopeWhereCompany($query)
     {


283) /var/www/app/Models/Expense.php:207    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('expenses.company_id', request()->header('company'));
     }
-    public function scopeWhereCompanyId($query, $company)
+    protected function scopeWhereCompanyId($query, $company)
     {
         $query->where('expenses.company_id', $company);
     }


284) /var/www/app/Models/Expense.php:209    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompanyId($query, $company)
     {
-        $query->where('expenses.company_id', $company);
+        
     }
     public function scopePaginateData($query, $limit)
     {


285) /var/www/app/Models/Expense.php:221    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $query->paginate($limit);
     }
-    public function scopeExpensesAttributes($query)
+    protected function scopeExpensesAttributes($query)
     {
         $query->select(DB::raw('
                 count(*) as expenses_count,


286) /var/www/app/Models/Expense.php:223    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeExpensesAttributes($query)
     {
-        $query->select(DB::raw('
-                count(*) as expenses_count,
-                sum(base_amount) as total_amount,
-                expense_category_id'))->groupBy('expense_category_id');
+        
     }
     public static function createExpense($request)
     {


287) /var/www/app/Models/Expense.php:243    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             ExchangeRateLog::addExchangeRateLog($expense);
         }
         if ($request->hasFile('attachment_receipt')) {
-            $expense->addMediaFromRequest('attachment_receipt')->toMediaCollection('receipts');
+            
         }
         if ($request->customFields) {
             $expense->addCustomFields(json_decode($request->customFields));


288) /var/www/app/Models/Expense.php:247    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $expense->addMediaFromRequest('attachment_receipt')->toMediaCollection('receipts');
         }
         if ($request->customFields) {
-            $expense->addCustomFields(json_decode($request->customFields));
+            
         }
         return $expense;
     }


289) /var/www/app/Models/Expense.php:266    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             ExchangeRateLog::addExchangeRateLog($this);
         }
         if (isset($request->is_attachment_receipt_removed) && (bool) $request->is_attachment_receipt_removed) {
-            $this->clearMediaCollection('receipts');
+            
         }
         if ($request->hasFile('attachment_receipt')) {
             $this->clearMediaCollection('receipts');


290) /var/www/app/Models/Expense.php:269    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->clearMediaCollection('receipts');
         }
         if ($request->hasFile('attachment_receipt')) {
-            $this->clearMediaCollection('receipts');
+            
             $this->addMediaFromRequest('attachment_receipt')->toMediaCollection('receipts');
         }
         if ($request->customFields) {


291) /var/www/app/Models/Expense.php:270    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         if ($request->hasFile('attachment_receipt')) {
             $this->clearMediaCollection('receipts');
-            $this->addMediaFromRequest('attachment_receipt')->toMediaCollection('receipts');
+            
         }
         if ($request->customFields) {
             $this->updateCustomFields(json_decode($request->customFields));


292) /var/www/app/Models/Expense.php:274    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $this->addMediaFromRequest('attachment_receipt')->toMediaCollection('receipts');
         }
         if ($request->customFields) {
-            $this->updateCustomFields(json_decode($request->customFields));
+            
         }
         return true;
     }
 }


293) /var/www/app/Models/ExpenseCategory.php:49    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('company_id', request()->header('company'));
     }
-    public function scopeWhereCategory($query, $category_id)
+    protected function scopeWhereCategory($query, $category_id)
     {
         $query->orWhere('id', $category_id);
     }


294) /var/www/app/Models/ExpenseCategory.php:51    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCategory($query, $category_id)
     {
-        $query->orWhere('id', $category_id);
+        
     }
     public function scopeWhereSearch($query, $search)
     {


295) /var/www/app/Models/ExpenseCategory.php:54    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orWhere('id', $category_id);
     }
-    public function scopeWhereSearch($query, $search)
+    protected function scopeWhereSearch($query, $search)
     {
         $query->where('name', 'LIKE', '%' . $search . '%');
     }


296) /var/www/app/Models/ExpenseCategory.php:56    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', $search . '%' . '%');
     }
     public function scopeApplyFilters($query, array $filters)
     {


297) /var/www/app/Models/ExpenseCategory.php:56    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', $search . '%');
     }
     public function scopeApplyFilters($query, array $filters)
     {


298) /var/www/app/Models/ExpenseCategory.php:56    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', '%' . '%');
     }
     public function scopeApplyFilters($query, array $filters)
     {


299) /var/www/app/Models/ExpenseCategory.php:56    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', '%' . '%' . $search);
     }
     public function scopeApplyFilters($query, array $filters)
     {


300) /var/www/app/Models/ExpenseCategory.php:56    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', '%' . $search);
     }
     public function scopeApplyFilters($query, array $filters)
     {


301) /var/www/app/Models/ExpenseCategory.php:56    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        
     }
     public function scopeApplyFilters($query, array $filters)
     {


302) /var/www/app/Models/ExpenseCategory.php:64    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $filters = collect($filters);
         if ($filters->get('category_id')) {
-            $query->whereCategory($filters->get('category_id'));
+            
         }
         if ($filters->get('company_id')) {
             $query->whereCompany($filters->get('company_id'));


303) /var/www/app/Models/ExpenseCategory.php:68    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereCategory($filters->get('category_id'));
         }
         if ($filters->get('company_id')) {
-            $query->whereCompany($filters->get('company_id'));
+            
         }
         if ($filters->get('search')) {
             $query->whereSearch($filters->get('search'));


304) /var/www/app/Models/ExpenseCategory.php:72    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereCompany($filters->get('company_id'));
         }
         if ($filters->get('search')) {
-            $query->whereSearch($filters->get('search'));
+            
         }
     }
     public function scopePaginateData($query, $limit)


305) /var/www/app/Models/FileDisk.php:28    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->attributes['credentials'] = json_encode($value);
     }
-    public function scopeWhereOrder($query, $orderByField, $orderBy)
+    protected function scopeWhereOrder($query, $orderByField, $orderBy)
     {
         $query->orderBy($orderByField, $orderBy);
     }


306) /var/www/app/Models/FileDisk.php:30    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {
-        $query->orderBy($orderByField, $orderBy);
+        
     }
     public function scopeFileDisksBetween($query, $start, $end)
     {


307) /var/www/app/Models/FileDisk.php:33    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orderBy($orderByField, $orderBy);
     }
-    public function scopeFileDisksBetween($query, $start, $end)
+    protected function scopeFileDisksBetween($query, $start, $end)
     {
         return $query->whereBetween('file_disks.created_at', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
     }


308) /var/www/app/Models/FileDisk.php:37    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeFileDisksBetween($query, $start, $end)
     {
-        return $query->whereBetween('file_disks.created_at', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+        return $query->whereBetween('file_disks.created_at', [$end->format('Y-m-d')]);
     }
     public function scopeWhereSearch($query, $search)
     {


309) /var/www/app/Models/FileDisk.php:41    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->whereBetween('file_disks.created_at', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
     }
-    public function scopeWhereSearch($query, $search)
+    protected function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
             $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');


310) /var/www/app/Models/FileDisk.php:43    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        foreach (explode(' ', $search) as $term) {
+        foreach (array() as $term) {
             $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
         }
     }


311) /var/www/app/Models/FileDisk.php:44    [M] Concat

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
+            $query->where('name', 'LIKE', $term . '%' . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
         }
     }
     public function scopePaginateData($query, $limit)


312) /var/www/app/Models/FileDisk.php:44    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
+            $query->where('name', 'LIKE', $term . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
         }
     }
     public function scopePaginateData($query, $limit)


313) /var/www/app/Models/FileDisk.php:44    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
+            $query->where('name', 'LIKE', '%' . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
         }
     }
     public function scopePaginateData($query, $limit)


314) /var/www/app/Models/FileDisk.php:44    [M] Concat

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
+            $query->where('name', 'LIKE', '%' . '%' . $term)->orWhere('driver', 'LIKE', '%' . $term . '%');
         }
     }
     public function scopePaginateData($query, $limit)


315) /var/www/app/Models/FileDisk.php:44    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
+            $query->where('name', 'LIKE', '%' . $term)->orWhere('driver', 'LIKE', '%' . $term . '%');
         }
     }
     public function scopePaginateData($query, $limit)


316) /var/www/app/Models/FileDisk.php:44    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
+            
         }
     }
     public function scopePaginateData($query, $limit)


317) /var/www/app/Models/FileDisk.php:45    [M] Concat

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
+            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', $term . '%' . '%');
         }
     }
     public function scopePaginateData($query, $limit)


318) /var/www/app/Models/FileDisk.php:45    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
+            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', $term . '%');
         }
     }
     public function scopePaginateData($query, $limit)


319) /var/www/app/Models/FileDisk.php:45    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
+            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . '%');
         }
     }
     public function scopePaginateData($query, $limit)


320) /var/www/app/Models/FileDisk.php:45    [M] Concat

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
+            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . '%' . $term);
         }
     }
     public function scopePaginateData($query, $limit)


321) /var/www/app/Models/FileDisk.php:45    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . $term . '%');
+            $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('driver', 'LIKE', '%' . $term);
         }
     }
     public function scopePaginateData($query, $limit)


322) /var/www/app/Models/FileDisk.php:62    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $filters = collect($filters);
         if ($filters->get('search')) {
-            $query->whereSearch($filters->get('search'));
+            
         }
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));


323) /var/www/app/Models/FileDisk.php:68    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
-            $query->fileDisksBetween($start, $end);
+            
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';


324) /var/www/app/Models/FileDisk.php:72    [M] Ternary

--- Original
+++ New
@@ @@
             $query->fileDisksBetween($start, $end);
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
-            $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
+            $field = $filters->get('orderByField') ? 'sequence_number' : $filters->get('orderByField');
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
             $query->whereOrder($field, $orderBy);
         }


325) /var/www/app/Models/FileDisk.php:73    [M] Ternary

--- Original
+++ New
@@ @@
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
-            $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
+            $orderBy = $filters->get('orderBy') ? 'asc' : $filters->get('orderBy');
             $query->whereOrder($field, $orderBy);
         }
     }


326) /var/www/app/Models/FileDisk.php:74    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
-            $query->whereOrder($field, $orderBy);
+            
         }
     }
     public function setConfig()


327) /var/www/app/Models/FileDisk.php:120    [M] Concat

--- Original
+++ New
@@ @@
         try {
             $root = '';
             if ($disk == 'dropbox') {
-                $root = $credentials['root'] . '/';
+                $root = '/' . $credentials['root'];
             }
             \Storage::disk($prefix . $disk)->put($root . 'crater_temp.text', 'Check Credentials');
             if (\Storage::disk($prefix . $disk)->exists($root . 'crater_temp.text')) {


328) /var/www/app/Models/FileDisk.php:120    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         try {
             $root = '';
             if ($disk == 'dropbox') {
-                $root = $credentials['root'] . '/';
+                $root = '/';
             }
             \Storage::disk($prefix . $disk)->put($root . 'crater_temp.text', 'Check Credentials');
             if (\Storage::disk($prefix . $disk)->exists($root . 'crater_temp.text')) {


329) /var/www/app/Models/FileDisk.php:120    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         try {
             $root = '';
             if ($disk == 'dropbox') {
-                $root = $credentials['root'] . '/';
+                $root = $credentials['root'];
             }
             \Storage::disk($prefix . $disk)->put($root . 'crater_temp.text', 'Check Credentials');
             if (\Storage::disk($prefix . $disk)->exists($root . 'crater_temp.text')) {


330) /var/www/app/Models/FileDisk.php:129    [M] FalseValue

--- Original
+++ New
@@ @@
                 \Storage::disk($prefix . $disk)->delete($root . 'crater_temp.text');
             }
         } catch (\Exception $e) {
-            $exists = false;
+            $exists = true;
         }
         return $exists;
     }


331) /var/www/app/Models/FileDisk.php:138    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public static function createDisk($request)
     {
         if ($request->set_as_default) {
-            self::updateDefaultDisks();
+            
         }
         $disk = self::create(['credentials' => $request->credentials, 'name' => $request->name, 'driver' => $request->driver, 'set_as_default' => $request->set_as_default, 'company_id' => $request->header('company')]);
         return $disk;


332) /var/www/app/Models/FileDisk.php:152    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $disk = self::create(['credentials' => $request->credentials, 'name' => $request->name, 'driver' => $request->driver, 'set_as_default' => $request->set_as_default, 'company_id' => $request->header('company')]);
         return $disk;
     }
-    public static function updateDefaultDisks()
+    protected static function updateDefaultDisks()
     {
         $disks = self::get();
         foreach ($disks as $disk) {


333) /var/www/app/Models/FileDisk.php:156    [M] Foreach_

--- Original
+++ New
@@ @@
     public static function updateDefaultDisks()
     {
         $disks = self::get();
-        foreach ($disks as $disk) {
+        foreach (array() as $disk) {
             $disk->set_as_default = false;
             $disk->save();
         }


334) /var/www/app/Models/FileDisk.php:157    [M] FalseValue

--- Original
+++ New
@@ @@
     {
         $disks = self::get();
         foreach ($disks as $disk) {
-            $disk->set_as_default = false;
+            $disk->set_as_default = true;
             $disk->save();
         }
         return true;


335) /var/www/app/Models/FileDisk.php:158    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $disks = self::get();
         foreach ($disks as $disk) {
             $disk->set_as_default = false;
-            $disk->save();
+            
         }
         return true;
     }


336) /var/www/app/Models/FileDisk.php:161    [M] TrueValue

--- Original
+++ New
@@ @@
             $disk->set_as_default = false;
             $disk->save();
         }
-        return true;
+        return false;
     }
     public function updateDisk($request)
     {


337) /var/www/app/Models/FileDisk.php:174    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $data = ['credentials' => $request->credentials, 'name' => $request->name, 'driver' => $request->driver];
         if (!$this->setAsDefault()) {
             if ($request->set_as_default) {
-                self::updateDefaultDisks();
+                
             }
             $data['set_as_default'] = $request->set_as_default;
         }


338) /var/www/app/Models/FileDisk.php:185    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->update($data);
         return $this;
     }
-    public function setAsDefaultDisk()
+    protected function setAsDefaultDisk()
     {
         self::updateDefaultDisks();
         $this->set_as_default = true;


339) /var/www/app/Models/FileDisk.php:187    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function setAsDefaultDisk()
     {
-        self::updateDefaultDisks();
+        
         $this->set_as_default = true;
         $this->save();
         return $this;


340) /var/www/app/Models/FileDisk.php:189    [M] TrueValue

--- Original
+++ New
@@ @@
     public function setAsDefaultDisk()
     {
         self::updateDefaultDisks();
-        $this->set_as_default = true;
+        $this->set_as_default = false;
         $this->save();
         return $this;
     }


341) /var/www/app/Models/FileDisk.php:190    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         self::updateDefaultDisks();
         $this->set_as_default = true;
-        $this->save();
+        
         return $this;
     }
     public function isSystem()


342) /var/www/app/Models/FileDisk.php:192    [M] This

--- Original
+++ New
@@ @@
         self::updateDefaultDisks();
         $this->set_as_default = true;
         $this->save();
-        return $this;
+        return null;
     }
     public function isSystem()
     {


343) /var/www/app/Models/FileDisk.php:200    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->type === self::DISK_TYPE_SYSTEM;
     }
-    public function isRemote()
+    protected function isRemote()
     {
         return $this->type === self::DISK_TYPE_REMOTE;
     }
 }


344) /var/www/app/Models/FileDisk.php:202    [M] Identical

--- Original
+++ New
@@ @@
     }
     public function isRemote()
     {
-        return $this->type === self::DISK_TYPE_REMOTE;
+        return $this->type !== self::DISK_TYPE_REMOTE;
     }
 }


345) /var/www/app/Models/Invoice.php:70    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Transaction::class);
     }
-    public function emailLogs()
+    protected function emailLogs()
     {
         return $this->morphMany('App\\Models\\EmailLog', 'mailable');
     }


346) /var/www/app/Models/Invoice.php:105    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Customer::class, 'customer_id');
     }
-    public function recurringInvoice()
+    protected function recurringInvoice()
     {
         return $this->belongsTo(RecurringInvoice::class);
     }


347) /var/www/app/Models/Invoice.php:143    [M] FalseValue

--- Original
+++ New
@@ @@
         $allowed = true;
         $status = [self::STATUS_DRAFT, self::STATUS_SENT, self::STATUS_VIEWED, self::STATUS_COMPLETED];
         if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
-            $allowed = false;
+            $allowed = true;
         } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {


348) /var/www/app/Models/Invoice.php:145    [M] FalseValue

--- Original
+++ New
@@ @@
         if ($retrospective_edit == 'disable_on_invoice_sent' && in_array($this->status, $status) && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
-            $allowed = false;
+            $allowed = true;
         } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {
             $allowed = false;
         }


349) /var/www/app/Models/Invoice.php:147    [M] FalseValue

--- Original
+++ New
@@ @@
         } elseif ($retrospective_edit == 'disable_on_invoice_partial_paid' && ($this->paid_status === Invoice::STATUS_PARTIALLY_PAID || $this->paid_status === Invoice::STATUS_PAID)) {
             $allowed = false;
         } elseif ($retrospective_edit == 'disable_on_invoice_paid' && $this->paid_status === Invoice::STATUS_PAID) {
-            $allowed = false;
+            $allowed = true;
         }
         return $allowed;
     }


350) /var/www/app/Models/Invoice.php:195    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('invoices.status', $status);
     }
-    public function scopeWherePaidStatus($query, $status)
+    protected function scopeWherePaidStatus($query, $status)
     {
         return $query->where('invoices.paid_status', $status);
     }


351) /var/www/app/Models/Invoice.php:200    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('invoices.paid_status', $status);
     }
-    public function scopeWhereDueStatus($query, $status)
+    protected function scopeWhereDueStatus($query, $status)
     {
         return $query->whereIn('invoices.paid_status', [self::STATUS_UNPAID, self::STATUS_PARTIALLY_PAID]);
     }


352) /var/www/app/Models/Invoice.php:202    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereDueStatus($query, $status)
     {
-        return $query->whereIn('invoices.paid_status', [self::STATUS_UNPAID, self::STATUS_PARTIALLY_PAID]);
+        return $query->whereIn('invoices.paid_status', [self::STATUS_PARTIALLY_PAID]);
     }
     public function scopeWhereInvoiceNumber($query, $invoiceNumber)
     {


353) /var/www/app/Models/Invoice.php:232    [M] PublicVisibility

--- Original
+++ New
@@ @@
             });
         }
     }
-    public function scopeWhereOrder($query, $orderByField, $orderBy)
+    protected function scopeWhereOrder($query, $orderByField, $orderBy)
     {
         $query->orderBy($orderByField, $orderBy);
     }


354) /var/www/app/Models/Invoice.php:234    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {
-        $query->orderBy($orderByField, $orderBy);
+        
     }
     public function scopeApplyFilters($query, array $filters)
     {


355) /var/www/app/Models/Invoice.php:251    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         if ($filters->get('status')) {
             if ($filters->get('status') == self::STATUS_UNPAID || $filters->get('status') == self::STATUS_PARTIALLY_PAID || $filters->get('status') == self::STATUS_PAID) {
-                $query->wherePaidStatus($filters->get('status'));
+                
             } elseif ($filters->get('status') == 'DUE') {
                 $query->whereDueStatus($filters->get('status'));
             } else {


356) /var/www/app/Models/Invoice.php:253    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             if ($filters->get('status') == self::STATUS_UNPAID || $filters->get('status') == self::STATUS_PARTIALLY_PAID || $filters->get('status') == self::STATUS_PAID) {
                 $query->wherePaidStatus($filters->get('status'));
             } elseif ($filters->get('status') == 'DUE') {
-                $query->whereDueStatus($filters->get('status'));
+                
             } else {
                 $query->whereStatus($filters->get('status'));
             }


357) /var/www/app/Models/Invoice.php:260    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             }
         }
         if ($filters->get('paid_status')) {
-            $query->wherePaidStatus($filters->get('status'));
+            
         }
         if ($filters->get('invoice_id')) {
             $query->whereInvoice($filters->get('invoice_id'));


358) /var/www/app/Models/Invoice.php:264    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->wherePaidStatus($filters->get('status'));
         }
         if ($filters->get('invoice_id')) {
-            $query->whereInvoice($filters->get('invoice_id'));
+            
         }
         if ($filters->get('invoice_number')) {
             $query->whereInvoiceNumber($filters->get('invoice_number'));


359) /var/www/app/Models/Invoice.php:278    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->invoicesBetween($start, $end);
         }
         if ($filters->get('customer_id')) {
-            $query->whereCustomer($filters->get('customer_id'));
+            
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';


360) /var/www/app/Models/Invoice.php:282    [M] Ternary

--- Original
+++ New
@@ @@
             $query->whereCustomer($filters->get('customer_id'));
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
-            $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
+            $field = $filters->get('orderByField') ? 'sequence_number' : $filters->get('orderByField');
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'desc';
             $query->whereOrder($field, $orderBy);
         }


361) /var/www/app/Models/Invoice.php:283    [M] Ternary

--- Original
+++ New
@@ @@
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
-            $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'desc';
+            $orderBy = $filters->get('orderBy') ? 'desc' : $filters->get('orderBy');
             $query->whereOrder($field, $orderBy);
         }
     }


362) /var/www/app/Models/Invoice.php:284    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'desc';
-            $query->whereOrder($field, $orderBy);
+            
         }
     }
     public function scopeWhereInvoice($query, $invoice_id)


363) /var/www/app/Models/Invoice.php:288    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereOrder($field, $orderBy);
         }
     }
-    public function scopeWhereInvoice($query, $invoice_id)
+    protected function scopeWhereInvoice($query, $invoice_id)
     {
         $query->orWhere('id', $invoice_id);
     }


364) /var/www/app/Models/Invoice.php:290    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereInvoice($query, $invoice_id)
     {
-        $query->orWhere('id', $invoice_id);
+        
     }
     public function scopeWhereCompany($query)
     {


365) /var/www/app/Models/Invoice.php:298    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('invoices.company_id', request()->header('company'));
     }
-    public function scopeWhereCompanyId($query, $company)
+    protected function scopeWhereCompanyId($query, $company)
     {
         $query->where('invoices.company_id', $company);
     }


366) /var/www/app/Models/Invoice.php:300    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompanyId($query, $company)
     {
-        $query->where('invoices.company_id', $company);
+        
     }
     public function scopeWhereCustomer($query, $customer_id)
     {


367) /var/www/app/Models/Invoice.php:351    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             self::createTaxes($invoice, $request->taxes);
         }
         if ($request->customFields) {
-            $invoice->addCustomFields($request->customFields);
+            
         }
         $invoice = Invoice::with(['items', 'items.fields', 'items.fields.customField', 'customer', 'taxes'])->find($invoice->id);
         return $invoice;


368) /var/www/app/Models/Invoice.php:391    [M] DecrementInteger

--- Original
+++ New
@@ @@
         if ($oldTotal != $request->total) {
             $oldTotal = (int) round($request->total) - (int) $oldTotal;
         } else {
-            $oldTotal = 0;
+            $oldTotal = -1;
         }
         $data['due_amount'] = $this->due_amount + $oldTotal;
         $data['base_due_amount'] = $data['due_amount'] * $data['exchange_rate'];


369) /var/www/app/Models/Invoice.php:412    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->items->map(function ($item) {
             $fields = $item->fields()->get();
             $fields->map(function ($field) {
-                $field->delete();
+                
             });
         });
         $this->items()->delete();


370) /var/www/app/Models/Invoice.php:426    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             self::createTaxes($this, $request->taxes);
         }
         if ($request->customFields) {
-            $this->updateCustomFields($request->customFields);
+            
         }
         $invoice = Invoice::with(['items', 'items.fields', 'items.fields.customField', 'customer', 'taxes'])->find($this->id);
         return $invoice;


371) /var/www/app/Models/Invoice.php:453    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $data['attach']['data'] = $this->getEmailAttachmentSetting() ? $this->getPDFData() : null;
         return $data;
     }
-    public function preview($data)
+    protected function preview($data)
     {
         $data = $this->sendInvoiceData($data);
         return ['type' => 'preview', 'view' => new SendInvoiceMail($data)];


372) /var/www/app/Models/Invoice.php:457    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function preview($data)
     {
         $data = $this->sendInvoiceData($data);
-        return ['type' => 'preview', 'view' => new SendInvoiceMail($data)];
+        return ['view' => new SendInvoiceMail($data)];
     }
     public function send($data)
     {


373) /var/www/app/Models/Invoice.php:517    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 }
             }
             if (array_key_exists('custom_fields', $invoiceItem) && $invoiceItem['custom_fields']) {
-                $item->addCustomFields($invoiceItem['custom_fields']);
+                
             }
         }
     }


374) /var/www/app/Models/Invoice.php:542    [M] PublicVisibility

--- Original
+++ New
@@ @@
             }
         }
     }
-    public function getPDFData()
+    protected function getPDFData()
     {
         $taxes = collect();
         if ($this->tax_per_item === 'YES') {


375) /var/www/app/Models/Invoice.php:546    [M] Identical

--- Original
+++ New
@@ @@
     public function getPDFData()
     {
         $taxes = collect();
-        if ($this->tax_per_item === 'YES') {
+        if ($this->tax_per_item !== 'YES') {
             foreach ($this->items as $item) {
                 foreach ($item->taxes as $tax) {
                     $found = $taxes->filter(function ($item) use($tax) {


376) /var/www/app/Models/Invoice.php:547    [M] Foreach_

--- Original
+++ New
@@ @@
     {
         $taxes = collect();
         if ($this->tax_per_item === 'YES') {
-            foreach ($this->items as $item) {
+            foreach (array() as $item) {
                 foreach ($item->taxes as $tax) {
                     $found = $taxes->filter(function ($item) use($tax) {
                         return $item->tax_type_id == $tax->tax_type_id;


377) /var/www/app/Models/Invoice.php:548    [M] Foreach_

--- Original
+++ New
@@ @@
         $taxes = collect();
         if ($this->tax_per_item === 'YES') {
             foreach ($this->items as $item) {
-                foreach ($item->taxes as $tax) {
+                foreach (array() as $tax) {
                     $found = $taxes->filter(function ($item) use($tax) {
                         return $item->tax_type_id == $tax->tax_type_id;
                     })->first();


378) /var/www/app/Models/Invoice.php:550    [M] Equal

--- Original
+++ New
@@ @@
             foreach ($this->items as $item) {
                 foreach ($item->taxes as $tax) {
                     $found = $taxes->filter(function ($item) use($tax) {
-                        return $item->tax_type_id == $tax->tax_type_id;
+                        return $item->tax_type_id != $tax->tax_type_id;
                     })->first();
                     if ($found) {
                         $found->amount += $tax->amount;


379) /var/www/app/Models/Invoice.php:554    [M] Assignment

--- Original
+++ New
@@ @@
                         return $item->tax_type_id == $tax->tax_type_id;
                     })->first();
                     if ($found) {
-                        $found->amount += $tax->amount;
+                        $found->amount = $tax->amount;
                     } else {
                         $taxes->push($tax);
                     }


380) /var/www/app/Models/Invoice.php:554    [M] PlusEqual

--- Original
+++ New
@@ @@
                         return $item->tax_type_id == $tax->tax_type_id;
                     })->first();
                     if ($found) {
-                        $found->amount += $tax->amount;
+                        $found->amount -= $tax->amount;
                     } else {
                         $taxes->push($tax);
                     }


381) /var/www/app/Models/Invoice.php:556    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     if ($found) {
                         $found->amount += $tax->amount;
                     } else {
-                        $taxes->push($tax);
+                        
                     }
                 }
             }


382) /var/www/app/Models/Invoice.php:568    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $company = Company::find($this->company_id);
         $locale = CompanySetting::getSetting('language', $company->id);
         $customFields = CustomField::where('model_type', 'Item')->get();
-        App::setLocale($locale);
+        
         $logo = $company->logo_path;
         view()->share(['invoice' => $this, 'customFields' => $customFields, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
         if (request()->has('preview')) {


383) /var/www/app/Models/Invoice.php:572    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $customFields = CustomField::where('model_type', 'Item')->get();
         App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['invoice' => $this, 'customFields' => $customFields, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
+        view()->share(['customFields' => $customFields, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
         if (request()->has('preview')) {
             return view('app.pdf.invoice.' . $invoiceTemplate);
         }


384) /var/www/app/Models/Invoice.php:572    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $customFields = CustomField::where('model_type', 'Item')->get();
         App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['invoice' => $this, 'customFields' => $customFields, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
+        
         if (request()->has('preview')) {
             return view('app.pdf.invoice.' . $invoiceTemplate);
         }


385) /var/www/app/Models/Invoice.php:575    [M] ArrayItem

--- Original
+++ New
@@ @@
         $customFields = CustomField::where('model_type', 'Item')->get();
         App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['invoice' => $this, 'customFields' => $customFields, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
+        view()->share(['invoice' => $this, 'customFields' => $customFields, 'company_address' > $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
         if (request()->has('preview')) {
             return view('app.pdf.invoice.' . $invoiceTemplate);
         }


386) /var/www/app/Models/Invoice.php:576    [M] ArrayItem

--- Original
+++ New
@@ @@
         $customFields = CustomField::where('model_type', 'Item')->get();
         App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['invoice' => $this, 'customFields' => $customFields, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
+        view()->share(['invoice' => $this, 'customFields' => $customFields, 'company_address' => $this->getCompanyAddress(), 'shipping_address' > $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
         if (request()->has('preview')) {
             return view('app.pdf.invoice.' . $invoiceTemplate);
         }


387) /var/www/app/Models/Invoice.php:577    [M] ArrayItem

--- Original
+++ New
@@ @@
         $customFields = CustomField::where('model_type', 'Item')->get();
         App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['invoice' => $this, 'customFields' => $customFields, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
+        view()->share(['invoice' => $this, 'customFields' => $customFields, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' > $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
         if (request()->has('preview')) {
             return view('app.pdf.invoice.' . $invoiceTemplate);
         }


388) /var/www/app/Models/Invoice.php:578    [M] ArrayItem

--- Original
+++ New
@@ @@
         $customFields = CustomField::where('model_type', 'Item')->get();
         App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['invoice' => $this, 'customFields' => $customFields, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
+        view()->share(['invoice' => $this, 'customFields' => $customFields, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' > $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
         if (request()->has('preview')) {
             return view('app.pdf.invoice.' . $invoiceTemplate);
         }


389) /var/www/app/Models/Invoice.php:584    [M] Concat

--- Original
+++ New
@@ @@
         $logo = $company->logo_path;
         view()->share(['invoice' => $this, 'customFields' => $customFields, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
         if (request()->has('preview')) {
-            return view('app.pdf.invoice.' . $invoiceTemplate);
+            return view($invoiceTemplate . 'app.pdf.invoice.');
         }
         return PDF::loadView('app.pdf.invoice.' . $invoiceTemplate);
     }


390) /var/www/app/Models/Invoice.php:584    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $logo = $company->logo_path;
         view()->share(['invoice' => $this, 'customFields' => $customFields, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
         if (request()->has('preview')) {
-            return view('app.pdf.invoice.' . $invoiceTemplate);
+            return view($invoiceTemplate);
         }
         return PDF::loadView('app.pdf.invoice.' . $invoiceTemplate);
     }


391) /var/www/app/Models/Invoice.php:584    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         $logo = $company->logo_path;
         view()->share(['invoice' => $this, 'customFields' => $customFields, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
         if (request()->has('preview')) {
-            return view('app.pdf.invoice.' . $invoiceTemplate);
+            return view('app.pdf.invoice.');
         }
         return PDF::loadView('app.pdf.invoice.' . $invoiceTemplate);
     }


392) /var/www/app/Models/Invoice.php:584    [M] FunctionCall

--- Original
+++ New
@@ @@
         $logo = $company->logo_path;
         view()->share(['invoice' => $this, 'customFields' => $customFields, 'company_address' => $this->getCompanyAddress(), 'shipping_address' => $this->getCustomerShippingAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null, 'taxes' => $taxes]);
         if (request()->has('preview')) {
-            return view('app.pdf.invoice.' . $invoiceTemplate);
+            view('app.pdf.invoice.' . $invoiceTemplate);
+            return null;
         }
         return PDF::loadView('app.pdf.invoice.' . $invoiceTemplate);
     }


393) /var/www/app/Models/Invoice.php:587    [M] Concat

--- Original
+++ New
@@ @@
         if (request()->has('preview')) {
             return view('app.pdf.invoice.' . $invoiceTemplate);
         }
-        return PDF::loadView('app.pdf.invoice.' . $invoiceTemplate);
+        return PDF::loadView($invoiceTemplate . 'app.pdf.invoice.');
     }
     public function getEmailAttachmentSetting()
     {


394) /var/www/app/Models/Invoice.php:587    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         if (request()->has('preview')) {
             return view('app.pdf.invoice.' . $invoiceTemplate);
         }
-        return PDF::loadView('app.pdf.invoice.' . $invoiceTemplate);
+        return PDF::loadView($invoiceTemplate);
     }
     public function getEmailAttachmentSetting()
     {


395) /var/www/app/Models/Invoice.php:587    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
         if (request()->has('preview')) {
             return view('app.pdf.invoice.' . $invoiceTemplate);
         }
-        return PDF::loadView('app.pdf.invoice.' . $invoiceTemplate);
+        return PDF::loadView('app.pdf.invoice.');
     }
     public function getEmailAttachmentSetting()
     {


396) /var/www/app/Models/Invoice.php:598    [M] TrueValue

--- Original
+++ New
@@ @@
         if ($invoiceAsAttachment == 'NO') {
             return false;
         }
-        return true;
+        return false;
     }
     public function getCompanyAddress()
     {


397) /var/www/app/Models/Invoice.php:601    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return true;
     }
-    public function getCompanyAddress()
+    protected function getCompanyAddress()
     {
         if ($this->company && !$this->company->address()->exists()) {
             return false;


398) /var/www/app/Models/Invoice.php:603    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function getCompanyAddress()
     {
-        if ($this->company && !$this->company->address()->exists()) {
+        if ($this->company && $this->company->address()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('invoice_company_address_format', $this->company_id);


399) /var/www/app/Models/Invoice.php:603    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function getCompanyAddress()
     {
-        if ($this->company && !$this->company->address()->exists()) {
+        if ($this->company || !$this->company->address()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('invoice_company_address_format', $this->company_id);


400) /var/www/app/Models/Invoice.php:604    [M] FalseValue

--- Original
+++ New
@@ @@
     public function getCompanyAddress()
     {
         if ($this->company && !$this->company->address()->exists()) {
-            return false;
+            return true;
         }
         $format = CompanySetting::getSetting('invoice_company_address_format', $this->company_id);
         return $this->getFormattedString($format);


401) /var/www/app/Models/Invoice.php:612    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $format = CompanySetting::getSetting('invoice_company_address_format', $this->company_id);
         return $this->getFormattedString($format);
     }
-    public function getCustomerShippingAddress()
+    protected function getCustomerShippingAddress()
     {
         if ($this->customer && !$this->customer->shippingAddress()->exists()) {
             return false;


402) /var/www/app/Models/Invoice.php:614    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function getCustomerShippingAddress()
     {
-        if ($this->customer && !$this->customer->shippingAddress()->exists()) {
+        if ($this->customer && $this->customer->shippingAddress()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('invoice_shipping_address_format', $this->company_id);


403) /var/www/app/Models/Invoice.php:614    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function getCustomerShippingAddress()
     {
-        if ($this->customer && !$this->customer->shippingAddress()->exists()) {
+        if ($this->customer || !$this->customer->shippingAddress()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('invoice_shipping_address_format', $this->company_id);


404) /var/www/app/Models/Invoice.php:615    [M] FalseValue

--- Original
+++ New
@@ @@
     public function getCustomerShippingAddress()
     {
         if ($this->customer && !$this->customer->shippingAddress()->exists()) {
-            return false;
+            return true;
         }
         $format = CompanySetting::getSetting('invoice_shipping_address_format', $this->company_id);
         return $this->getFormattedString($format);


405) /var/www/app/Models/Invoice.php:623    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $format = CompanySetting::getSetting('invoice_shipping_address_format', $this->company_id);
         return $this->getFormattedString($format);
     }
-    public function getCustomerBillingAddress()
+    protected function getCustomerBillingAddress()
     {
         if ($this->customer && !$this->customer->billingAddress()->exists()) {
             return false;


406) /var/www/app/Models/Invoice.php:625    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function getCustomerBillingAddress()
     {
-        if ($this->customer && !$this->customer->billingAddress()->exists()) {
+        if ($this->customer && $this->customer->billingAddress()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('invoice_billing_address_format', $this->company_id);


407) /var/www/app/Models/Invoice.php:625    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function getCustomerBillingAddress()
     {
-        if ($this->customer && !$this->customer->billingAddress()->exists()) {
+        if ($this->customer || !$this->customer->billingAddress()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('invoice_billing_address_format', $this->company_id);


408) /var/www/app/Models/Invoice.php:626    [M] FalseValue

--- Original
+++ New
@@ @@
     public function getCustomerBillingAddress()
     {
         if ($this->customer && !$this->customer->billingAddress()->exists()) {
-            return false;
+            return true;
         }
         $format = CompanySetting::getSetting('invoice_billing_address_format', $this->company_id);
         return $this->getFormattedString($format);


409) /var/www/app/Models/Invoice.php:691    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function changeInvoiceStatus($amount)
     {
         if ($amount < 0) {
-            return ['error' => 'invalid_amount'];
+            return [];
         }
         if ($amount == 0) {
             $this->status = Invoice::STATUS_COMPLETED;


410) /var/www/app/Models/Invoice.php:717    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         foreach ($ids as $id) {
             $invoice = self::find($id);
             if ($invoice->transactions()->exists()) {
-                $invoice->transactions()->delete();
+                
             }
             $invoice->delete();
         }


411) /var/www/app/Models/InvoiceItem.php:75    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->invoicesBetween($start, $end);
         }
     }
-    public function scopeItemAttributes($query)
+    protected function scopeItemAttributes($query)
     {
         $query->select(DB::raw('sum(quantity) as total_quantity, sum(base_total) as total_amount, invoice_items.name'))->groupBy('invoice_items.name');
     }
 }


412) /var/www/app/Models/InvoiceItem.php:77    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeItemAttributes($query)
     {
-        $query->select(DB::raw('sum(quantity) as total_quantity, sum(base_total) as total_amount, invoice_items.name'))->groupBy('invoice_items.name');
+        
     }
 }


413) /var/www/app/Models/Item.php:34    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Company::class);
     }
-    public function creator()
+    protected function creator()
     {
         return $this->belongsTo('Crater\\Models\\User', 'creator_id');
     }


414) /var/www/app/Models/Item.php:54    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('items.price', $price);
     }
-    public function scopeWhereUnit($query, $unit_id)
+    protected function scopeWhereUnit($query, $unit_id)
     {
         return $query->where('items.unit_id', $unit_id);
     }


415) /var/www/app/Models/Item.php:59    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('items.unit_id', $unit_id);
     }
-    public function scopeWhereOrder($query, $orderByField, $orderBy)
+    protected function scopeWhereOrder($query, $orderByField, $orderBy)
     {
         $query->orderBy($orderByField, $orderBy);
     }


416) /var/www/app/Models/Item.php:61    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {
-        $query->orderBy($orderByField, $orderBy);
+        
     }
     public function scopeWhereItem($query, $item_id)
     {


417) /var/www/app/Models/Item.php:64    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orderBy($orderByField, $orderBy);
     }
-    public function scopeWhereItem($query, $item_id)
+    protected function scopeWhereItem($query, $item_id)
     {
         $query->orWhere('id', $item_id);
     }


418) /var/www/app/Models/Item.php:66    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereItem($query, $item_id)
     {
-        $query->orWhere('id', $item_id);
+        
     }
     public function scopeApplyFilters($query, array $filters)
     {


419) /var/www/app/Models/Item.php:82    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->wherePrice($filters->get('price'));
         }
         if ($filters->get('unit_id')) {
-            $query->whereUnit($filters->get('unit_id'));
+            
         }
         if ($filters->get('item_id')) {
             $query->whereItem($filters->get('item_id'));


420) /var/www/app/Models/Item.php:86    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereUnit($filters->get('unit_id'));
         }
         if ($filters->get('item_id')) {
-            $query->whereItem($filters->get('item_id'));
+            
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'name';


421) /var/www/app/Models/Item.php:90    [M] Ternary

--- Original
+++ New
@@ @@
             $query->whereItem($filters->get('item_id'));
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
-            $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'name';
+            $field = $filters->get('orderByField') ? 'name' : $filters->get('orderByField');
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
             $query->whereOrder($field, $orderBy);
         }


422) /var/www/app/Models/Item.php:91    [M] Ternary

--- Original
+++ New
@@ @@
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'name';
-            $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
+            $orderBy = $filters->get('orderBy') ? 'asc' : $filters->get('orderBy');
             $query->whereOrder($field, $orderBy);
         }
     }


423) /var/www/app/Models/Item.php:92    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'name';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
-            $query->whereOrder($field, $orderBy);
+            
         }
     }
     public function scopePaginateData($query, $limit)


424) /var/www/app/Models/Note.php:24    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $filters = collect($filters);
         if ($filters->get('type')) {
-            $query->whereType($filters->get('type'));
+            
         }
         if ($filters->get('search')) {
             $query->whereSearch($filters->get('search'));


425) /var/www/app/Models/Note.php:28    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereType($filters->get('type'));
         }
         if ($filters->get('search')) {
-            $query->whereSearch($filters->get('search'));
+            
         }
     }
     public function scopeWhereSearch($query, $search)


426) /var/www/app/Models/Note.php:32    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
     }
-    public function scopeWhereSearch($query, $search)
+    protected function scopeWhereSearch($query, $search)
     {
         $query->where('name', 'LIKE', '%' . $search . '%');
     }


427) /var/www/app/Models/Note.php:34    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', $search . '%' . '%');
     }
     public function scopeWhereType($query, $type)
     {


428) /var/www/app/Models/Note.php:34    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', $search . '%');
     }
     public function scopeWhereType($query, $type)
     {


429) /var/www/app/Models/Note.php:34    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', '%' . '%');
     }
     public function scopeWhereType($query, $type)
     {


430) /var/www/app/Models/Note.php:34    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', '%' . '%' . $search);
     }
     public function scopeWhereType($query, $type)
     {


431) /var/www/app/Models/Note.php:34    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', '%' . $search);
     }
     public function scopeWhereType($query, $type)
     {


432) /var/www/app/Models/Note.php:34    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        
     }
     public function scopeWhereType($query, $type)
     {


433) /var/www/app/Models/Note.php:37    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('name', 'LIKE', '%' . $search . '%');
     }
-    public function scopeWhereType($query, $type)
+    protected function scopeWhereType($query, $type)
     {
         return $query->where('type', $type);
     }


434) /var/www/app/Models/Payment.php:57    [M] PublicVisibility

--- Original
+++ New
@@ @@
             GeneratePaymentPdfJob::dispatch($payment, true);
         });
     }
-    public function setSettingsAttribute($value)
+    protected function setSettingsAttribute($value)
     {
         if ($value) {
             $this->attributes['settings'] = json_encode($value);


435) /var/www/app/Models/Payment.php:88    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Transaction::class);
     }
-    public function emailLogs()
+    protected function emailLogs()
     {
         return $this->morphMany('App\\Models\\EmailLog', 'mailable');
     }


436) /var/www/app/Models/Payment.php:108    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Invoice::class);
     }
-    public function creator()
+    protected function creator()
     {
         return $this->belongsTo('Crater\\Models\\User', 'creator_id');
     }


437) /var/www/app/Models/Payment.php:176    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         $customFields = $request->customFields;
         if ($customFields) {
-            $payment->addCustomFields($customFields);
+            
         }
         $payment = Payment::with(['customer', 'invoice', 'paymentMethod', 'fields'])->find($payment->id);
         return $payment;


438) /var/www/app/Models/Payment.php:195    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $data = $request->getPaymentPayload();
         if ($request->invoice_id && (!$this->invoice_id || $this->invoice_id !== $request->invoice_id)) {
             $invoice = Invoice::find($request->invoice_id);
-            $invoice->subtractInvoicePayment($request->amount);
+            
         }
         if ($this->invoice_id && (!$request->invoice_id || $this->invoice_id !== $request->invoice_id)) {
             $invoice = Invoice::find($this->invoice_id);


439) /var/www/app/Models/Payment.php:200    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         if ($this->invoice_id && (!$request->invoice_id || $this->invoice_id !== $request->invoice_id)) {
             $invoice = Invoice::find($this->invoice_id);
-            $invoice->addInvoicePayment($this->amount);
+            
         }
         if ($this->invoice_id && $this->invoice_id === $request->invoice_id && $request->amount !== $this->amount) {
             $invoice = Invoice::find($this->invoice_id);


440) /var/www/app/Models/Payment.php:228    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         $customFields = $request->customFields;
         if ($customFields) {
-            $this->updateCustomFields($customFields);
+            
         }
         $payment = Payment::with(['customer', 'invoice', 'paymentMethod'])->find($this->id);
         return $payment;


441) /var/www/app/Models/Payment.php:248    [M] CastInt

--- Original
+++ New
@@ @@
             $payment = Payment::find($id);
             if ($payment->invoice_id != null) {
                 $invoice = Invoice::find($payment->invoice_id);
-                $invoice->due_amount = (int) $invoice->due_amount + (int) $payment->amount;
+                $invoice->due_amount = $invoice->due_amount + (int) $payment->amount;
                 if ($invoice->due_amount == $invoice->total) {
                     $invoice->paid_status = Invoice::STATUS_UNPAID;
                 } else {


442) /var/www/app/Models/Payment.php:248    [M] CastInt

--- Original
+++ New
@@ @@
             $payment = Payment::find($id);
             if ($payment->invoice_id != null) {
                 $invoice = Invoice::find($payment->invoice_id);
-                $invoice->due_amount = (int) $invoice->due_amount + (int) $payment->amount;
+                $invoice->due_amount = (int) $invoice->due_amount + $payment->amount;
                 if ($invoice->due_amount == $invoice->total) {
                     $invoice->paid_status = Invoice::STATUS_UNPAID;
                 } else {


443) /var/www/app/Models/Payment.php:248    [M] Plus

--- Original
+++ New
@@ @@
             $payment = Payment::find($id);
             if ($payment->invoice_id != null) {
                 $invoice = Invoice::find($payment->invoice_id);
-                $invoice->due_amount = (int) $invoice->due_amount + (int) $payment->amount;
+                $invoice->due_amount = (int) $invoice->due_amount - (int) $payment->amount;
                 if ($invoice->due_amount == $invoice->total) {
                     $invoice->paid_status = Invoice::STATUS_UNPAID;
                 } else {


444) /var/www/app/Models/Payment.php:250    [M] Equal

--- Original
+++ New
@@ @@
             if ($payment->invoice_id != null) {
                 $invoice = Invoice::find($payment->invoice_id);
                 $invoice->due_amount = (int) $invoice->due_amount + (int) $payment->amount;
-                if ($invoice->due_amount == $invoice->total) {
+                if ($invoice->due_amount != $invoice->total) {
                     $invoice->paid_status = Invoice::STATUS_UNPAID;
                 } else {
                     $invoice->paid_status = Invoice::STATUS_PARTIALLY_PAID;


445) /var/www/app/Models/Payment.php:257    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                     $invoice->paid_status = Invoice::STATUS_PARTIALLY_PAID;
                 }
                 $invoice->status = $invoice->getPreviousStatus();
-                $invoice->save();
+                
             }
             $payment->delete();
         }


446) /var/www/app/Models/Payment.php:282    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('payments.payment_number', 'LIKE', '%' . $paymentNumber . '%');
     }
-    public function scopePaymentMethod($query, $paymentMethodId)
+    protected function scopePaymentMethod($query, $paymentMethodId)
     {
         return $query->where('payments.payment_method_id', $paymentMethodId);
     }


447) /var/www/app/Models/Payment.php:309    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->paymentNumber($filters->get('payment_number'));
         }
         if ($filters->get('payment_id')) {
-            $query->wherePayment($filters->get('payment_id'));
+            
         }
         if ($filters->get('payment_method_id')) {
             $query->paymentMethod($filters->get('payment_method_id'));


448) /var/www/app/Models/Payment.php:313    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->wherePayment($filters->get('payment_id'));
         }
         if ($filters->get('payment_method_id')) {
-            $query->paymentMethod($filters->get('payment_method_id'));
+            
         }
         if ($filters->get('customer_id')) {
             $query->whereCustomer($filters->get('customer_id'));


449) /var/www/app/Models/Payment.php:317    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->paymentMethod($filters->get('payment_method_id'));
         }
         if ($filters->get('customer_id')) {
-            $query->whereCustomer($filters->get('customer_id'));
+            
         }
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));


450) /var/www/app/Models/Payment.php:323    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
-            $query->paymentsBetween($start, $end);
+            
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';


451) /var/www/app/Models/Payment.php:327    [M] Ternary

--- Original
+++ New
@@ @@
             $query->paymentsBetween($start, $end);
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
-            $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
+            $field = $filters->get('orderByField') ? 'sequence_number' : $filters->get('orderByField');
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'desc';
             $query->whereOrder($field, $orderBy);
         }


452) /var/www/app/Models/Payment.php:328    [M] Ternary

--- Original
+++ New
@@ @@
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
-            $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'desc';
+            $orderBy = $filters->get('orderBy') ? 'desc' : $filters->get('orderBy');
             $query->whereOrder($field, $orderBy);
         }
     }


453) /var/www/app/Models/Payment.php:329    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'sequence_number';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'desc';
-            $query->whereOrder($field, $orderBy);
+            
         }
     }
     public function scopePaymentsBetween($query, $start, $end)


454) /var/www/app/Models/Payment.php:333    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereOrder($field, $orderBy);
         }
     }
-    public function scopePaymentsBetween($query, $start, $end)
+    protected function scopePaymentsBetween($query, $start, $end)
     {
         return $query->whereBetween('payments.payment_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
     }


455) /var/www/app/Models/Payment.php:337    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function scopePaymentsBetween($query, $start, $end)
     {
-        return $query->whereBetween('payments.payment_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+        return $query->whereBetween('payments.payment_date', [$end->format('Y-m-d')]);
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {


456) /var/www/app/Models/Payment.php:341    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->whereBetween('payments.payment_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
     }
-    public function scopeWhereOrder($query, $orderByField, $orderBy)
+    protected function scopeWhereOrder($query, $orderByField, $orderBy)
     {
         $query->orderBy($orderByField, $orderBy);
     }


457) /var/www/app/Models/Payment.php:343    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {
-        $query->orderBy($orderByField, $orderBy);
+        
     }
     public function scopeWherePayment($query, $payment_id)
     {


458) /var/www/app/Models/Payment.php:346    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orderBy($orderByField, $orderBy);
     }
-    public function scopeWherePayment($query, $payment_id)
+    protected function scopeWherePayment($query, $payment_id)
     {
         $query->orWhere('id', $payment_id);
     }


459) /var/www/app/Models/Payment.php:348    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWherePayment($query, $payment_id)
     {
-        $query->orWhere('id', $payment_id);
+        
     }
     public function scopeWhereCompany($query)
     {


460) /var/www/app/Models/Payment.php:361    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('payments.customer_id', $customer_id);
     }
-    public function getPDFData()
+    protected function getPDFData()
     {
         $company = Company::find($this->company_id);
         $locale = CompanySetting::getSetting('language', $company->id);


461) /var/www/app/Models/Payment.php:366    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $company = Company::find($this->company_id);
         $locale = CompanySetting::getSetting('language', $company->id);
-        \App::setLocale($locale);
+        
         $logo = $company->logo_path;
         view()->share(['payment' => $this, 'company_address' => $this->getCompanyAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null]);
         if (request()->has('preview')) {


462) /var/www/app/Models/Payment.php:370    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $locale = CompanySetting::getSetting('language', $company->id);
         \App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['payment' => $this, 'company_address' => $this->getCompanyAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null]);
+        view()->share(['company_address' => $this->getCompanyAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null]);
         if (request()->has('preview')) {
             return view('app.pdf.payment.payment');
         }


463) /var/www/app/Models/Payment.php:370    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $locale = CompanySetting::getSetting('language', $company->id);
         \App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['payment' => $this, 'company_address' => $this->getCompanyAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null]);
+        
         if (request()->has('preview')) {
             return view('app.pdf.payment.payment');
         }


464) /var/www/app/Models/Payment.php:372    [M] ArrayItem

--- Original
+++ New
@@ @@
         $locale = CompanySetting::getSetting('language', $company->id);
         \App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['payment' => $this, 'company_address' => $this->getCompanyAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null]);
+        view()->share(['payment' => $this, 'company_address' > $this->getCompanyAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null]);
         if (request()->has('preview')) {
             return view('app.pdf.payment.payment');
         }


465) /var/www/app/Models/Payment.php:373    [M] ArrayItem

--- Original
+++ New
@@ @@
         $locale = CompanySetting::getSetting('language', $company->id);
         \App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['payment' => $this, 'company_address' => $this->getCompanyAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null]);
+        view()->share(['payment' => $this, 'company_address' => $this->getCompanyAddress(), 'billing_address' > $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null]);
         if (request()->has('preview')) {
             return view('app.pdf.payment.payment');
         }


466) /var/www/app/Models/Payment.php:374    [M] ArrayItem

--- Original
+++ New
@@ @@
         $locale = CompanySetting::getSetting('language', $company->id);
         \App::setLocale($locale);
         $logo = $company->logo_path;
-        view()->share(['payment' => $this, 'company_address' => $this->getCompanyAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null]);
+        view()->share(['payment' => $this, 'company_address' => $this->getCompanyAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' > $this->getNotes(), 'logo' => $logo ?? null]);
         if (request()->has('preview')) {
             return view('app.pdf.payment.payment');
         }


467) /var/www/app/Models/Payment.php:379    [M] FunctionCall

--- Original
+++ New
@@ @@
         $logo = $company->logo_path;
         view()->share(['payment' => $this, 'company_address' => $this->getCompanyAddress(), 'billing_address' => $this->getCustomerBillingAddress(), 'notes' => $this->getNotes(), 'logo' => $logo ?? null]);
         if (request()->has('preview')) {
-            return view('app.pdf.payment.payment');
+            view('app.pdf.payment.payment');
+            return null;
         }
         return PDF::loadView('app.pdf.payment.payment');
     }


468) /var/www/app/Models/Payment.php:385    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return PDF::loadView('app.pdf.payment.payment');
     }
-    public function getCompanyAddress()
+    protected function getCompanyAddress()
     {
         if ($this->company && !$this->company->address()->exists()) {
             return false;


469) /var/www/app/Models/Payment.php:387    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function getCompanyAddress()
     {
-        if ($this->company && !$this->company->address()->exists()) {
+        if ($this->company && $this->company->address()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('payment_company_address_format', $this->company_id);


470) /var/www/app/Models/Payment.php:387    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function getCompanyAddress()
     {
-        if ($this->company && !$this->company->address()->exists()) {
+        if ($this->company || !$this->company->address()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('payment_company_address_format', $this->company_id);


471) /var/www/app/Models/Payment.php:388    [M] FalseValue

--- Original
+++ New
@@ @@
     public function getCompanyAddress()
     {
         if ($this->company && !$this->company->address()->exists()) {
-            return false;
+            return true;
         }
         $format = CompanySetting::getSetting('payment_company_address_format', $this->company_id);
         return $this->getFormattedString($format);


472) /var/www/app/Models/Payment.php:396    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $format = CompanySetting::getSetting('payment_company_address_format', $this->company_id);
         return $this->getFormattedString($format);
     }
-    public function getCustomerBillingAddress()
+    protected function getCustomerBillingAddress()
     {
         if ($this->customer && !$this->customer->billingAddress()->exists()) {
             return false;


473) /var/www/app/Models/Payment.php:398    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function getCustomerBillingAddress()
     {
-        if ($this->customer && !$this->customer->billingAddress()->exists()) {
+        if ($this->customer && $this->customer->billingAddress()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('payment_from_customer_address_format', $this->company_id);


474) /var/www/app/Models/Payment.php:398    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public function getCustomerBillingAddress()
     {
-        if ($this->customer && !$this->customer->billingAddress()->exists()) {
+        if ($this->customer || !$this->customer->billingAddress()->exists()) {
             return false;
         }
         $format = CompanySetting::getSetting('payment_from_customer_address_format', $this->company_id);


475) /var/www/app/Models/Payment.php:399    [M] FalseValue

--- Original
+++ New
@@ @@
     public function getCustomerBillingAddress()
     {
         if ($this->customer && !$this->customer->billingAddress()->exists()) {
-            return false;
+            return true;
         }
         $format = CompanySetting::getSetting('payment_from_customer_address_format', $this->company_id);
         return $this->getFormattedString($format);


476) /var/www/app/Models/Payment.php:415    [M] TrueValue

--- Original
+++ New
@@ @@
         if ($paymentAsAttachment == 'NO') {
             return false;
         }
-        return true;
+        return false;
     }
     public function getNotes()
     {


477) /var/www/app/Models/Payment.php:442    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return ['{PAYMENT_DATE}' => $this->formattedPaymentDate, '{PAYMENT_MODE}' => $this->paymentMethod ? $this->paymentMethod->name : null, '{PAYMENT_NUMBER}' => $this->payment_number, '{PAYMENT_AMOUNT}' => $this->reference_number];
     }
-    public static function generatePayment($transaction)
+    protected static function generatePayment($transaction)
     {
         $invoice = Invoice::find($transaction->invoice_id);
         $serial = (new SerialNumberFormatter())->setModel(new Payment())->setCompany($invoice->company_id)->setCustomer($invoice->customer_id)->setNextNumbers();


478) /var/www/app/Models/Payment.php:459    [M] Multiplication

--- Original
+++ New
@@ @@
         $data['payment_method_id'] = request()->payment_method_id;
         $data['customer_id'] = $invoice->customer_id;
         $data['exchange_rate'] = $invoice->exchange_rate;
-        $data['base_amount'] = $data['amount'] * $data['exchange_rate'];
+        $data['base_amount'] = $data['amount'] / $data['exchange_rate'];
         $data['currency_id'] = $invoice->currency_id;
         $data['company_id'] = $invoice->company_id;
         $data['transaction_id'] = $transaction->id;


479) /var/www/app/Models/Payment.php:468    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $payment->unique_hash = Hashids::connection(Payment::class)->encode($payment->id);
         $payment->sequence_number = $serial->nextSequenceNumber;
         $payment->customer_sequence_number = $serial->nextCustomerSequenceNumber;
-        $payment->save();
+        
         $invoice->subtractInvoicePayment($invoice->total);
         return $payment;
     }
 }


480) /var/www/app/Models/Payment.php:470    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $payment->sequence_number = $serial->nextSequenceNumber;
         $payment->customer_sequence_number = $serial->nextCustomerSequenceNumber;
         $payment->save();
-        $invoice->subtractInvoicePayment($invoice->total);
+        
         return $payment;
     }
 }


481) /var/www/app/Models/PaymentMethod.php:24    [M] PublicVisibility

--- Original
+++ New
@@ @@
     public const TYPE_GENERAL = 'GENERAL';
     public const TYPE_MODULE = 'MODULE';
     protected $casts = ['settings' => 'array', 'use_test_env' => 'boolean'];
-    public function setSettingsAttribute($value)
+    protected function setSettingsAttribute($value)
     {
         $this->attributes['settings'] = json_encode($value);
     }


482) /var/www/app/Models/PaymentMethod.php:44    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Company::class);
     }
-    public function scopeWhereCompanyId($query, $id)
+    protected function scopeWhereCompanyId($query, $id)
     {
         $query->where('company_id', $id);
     }


483) /var/www/app/Models/PaymentMethod.php:46    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompanyId($query, $id)
     {
-        $query->where('company_id', $id);
+        
     }
     public function scopeWhereCompany($query)
     {


484) /var/www/app/Models/PaymentMethod.php:54    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('company_id', request()->header('company'));
     }
-    public function scopeWherePaymentMethod($query, $payment_id)
+    protected function scopeWherePaymentMethod($query, $payment_id)
     {
         $query->orWhere('id', $payment_id);
     }


485) /var/www/app/Models/PaymentMethod.php:56    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWherePaymentMethod($query, $payment_id)
     {
-        $query->orWhere('id', $payment_id);
+        
     }
     public function scopeWhereSearch($query, $search)
     {


486) /var/www/app/Models/PaymentMethod.php:59    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orWhere('id', $payment_id);
     }
-    public function scopeWhereSearch($query, $search)
+    protected function scopeWhereSearch($query, $search)
     {
         $query->where('name', 'LIKE', '%' . $search . '%');
     }


487) /var/www/app/Models/PaymentMethod.php:61    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', $search . '%' . '%');
     }
     public function scopeApplyFilters($query, array $filters)
     {


488) /var/www/app/Models/PaymentMethod.php:61    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', $search . '%');
     }
     public function scopeApplyFilters($query, array $filters)
     {


489) /var/www/app/Models/PaymentMethod.php:61    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', '%' . '%');
     }
     public function scopeApplyFilters($query, array $filters)
     {


490) /var/www/app/Models/PaymentMethod.php:61    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', '%' . '%' . $search);
     }
     public function scopeApplyFilters($query, array $filters)
     {


491) /var/www/app/Models/PaymentMethod.php:61    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', '%' . $search);
     }
     public function scopeApplyFilters($query, array $filters)
     {


492) /var/www/app/Models/PaymentMethod.php:61    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        
     }
     public function scopeApplyFilters($query, array $filters)
     {


493) /var/www/app/Models/PaymentMethod.php:69    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $filters = collect($filters);
         if ($filters->get('method_id')) {
-            $query->wherePaymentMethod($filters->get('method_id'));
+            
         }
         if ($filters->get('company_id')) {
             $query->whereCompany($filters->get('company_id'));


494) /var/www/app/Models/PaymentMethod.php:73    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->wherePaymentMethod($filters->get('method_id'));
         }
         if ($filters->get('company_id')) {
-            $query->whereCompany($filters->get('company_id'));
+            
         }
         if ($filters->get('search')) {
             $query->whereSearch($filters->get('search'));


495) /var/www/app/Models/PaymentMethod.php:77    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereCompany($filters->get('company_id'));
         }
         if ($filters->get('search')) {
-            $query->whereSearch($filters->get('search'));
+            
         }
     }
     public function scopePaginateData($query, $limit)


496) /var/www/app/Models/PaymentMethod.php:99    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $paymentMethod = self::create($data);
         return $paymentMethod;
     }
-    public static function getSettings($id)
+    protected static function getSettings($id)
     {
         $settings = PaymentMethod::find($id)->settings;
         return $settings;
     }
 }


497) /var/www/app/Models/RecurringInvoice.php:124    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $query->paginate($limit);
     }
-    public function scopeWhereOrder($query, $orderByField, $orderBy)
+    protected function scopeWhereOrder($query, $orderByField, $orderBy)
     {
         $query->orderBy($orderByField, $orderBy);
     }


498) /var/www/app/Models/RecurringInvoice.php:126    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {
-        $query->orderBy($orderByField, $orderBy);
+        
     }
     public function scopeWhereStatus($query, $status)
     {


499) /var/www/app/Models/RecurringInvoice.php:129    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orderBy($orderByField, $orderBy);
     }
-    public function scopeWhereStatus($query, $status)
+    protected function scopeWhereStatus($query, $status)
     {
         return $query->where('recurring_invoices.status', $status);
     }


500) /var/www/app/Models/RecurringInvoice.php:134    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('recurring_invoices.status', $status);
     }
-    public function scopeWhereCustomer($query, $customer_id)
+    protected function scopeWhereCustomer($query, $customer_id)
     {
         $query->where('customer_id', $customer_id);
     }


501) /var/www/app/Models/RecurringInvoice.php:136    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCustomer($query, $customer_id)
     {
-        $query->where('customer_id', $customer_id);
+        
     }
     public function scopeRecurringInvoicesStartBetween($query, $start, $end)
     {


502) /var/www/app/Models/RecurringInvoice.php:139    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('customer_id', $customer_id);
     }
-    public function scopeRecurringInvoicesStartBetween($query, $start, $end)
+    protected function scopeRecurringInvoicesStartBetween($query, $start, $end)
     {
         return $query->whereBetween('starts_at', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
     }


503) /var/www/app/Models/RecurringInvoice.php:143    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeRecurringInvoicesStartBetween($query, $start, $end)
     {
-        return $query->whereBetween('starts_at', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+        return $query->whereBetween('starts_at', [$end->format('Y-m-d')]);
     }
     public function scopeWhereSearch($query, $search)
     {


504) /var/www/app/Models/RecurringInvoice.php:147    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->whereBetween('starts_at', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
     }
-    public function scopeWhereSearch($query, $search)
+    protected function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {


505) /var/www/app/Models/RecurringInvoice.php:149    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        foreach (explode(' ', $search) as $term) {
+        foreach (array() as $term) {
             $query->whereHas('customer', function ($query) use($term) {
                 $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });


506) /var/www/app/Models/RecurringInvoice.php:150    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
-            });
+            
         }
     }
     public function scopeApplyFilters($query, array $filters)


507) /var/www/app/Models/RecurringInvoice.php:151    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%' . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


508) /var/www/app/Models/RecurringInvoice.php:151    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


509) /var/www/app/Models/RecurringInvoice.php:151    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


510) /var/www/app/Models/RecurringInvoice.php:151    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%' . $term)->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


511) /var/www/app/Models/RecurringInvoice.php:151    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term)->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


512) /var/www/app/Models/RecurringInvoice.php:151    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                
             });
         }
     }


513) /var/www/app/Models/RecurringInvoice.php:152    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', $term . '%' . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


514) /var/www/app/Models/RecurringInvoice.php:152    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


515) /var/www/app/Models/RecurringInvoice.php:152    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


516) /var/www/app/Models/RecurringInvoice.php:152    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . '%' . $term)->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


517) /var/www/app/Models/RecurringInvoice.php:152    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term)->orWhere('company_name', 'LIKE', '%' . $term . '%');
             });
         }
     }


518) /var/www/app/Models/RecurringInvoice.php:153    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', $term . '%' . '%');
             });
         }
     }


519) /var/www/app/Models/RecurringInvoice.php:153    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', $term . '%');
             });
         }
     }


520) /var/www/app/Models/RecurringInvoice.php:153    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . '%');
             });
         }
     }


521) /var/www/app/Models/RecurringInvoice.php:153    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . '%' . $term);
             });
         }
     }


522) /var/www/app/Models/RecurringInvoice.php:153    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->whereHas('customer', function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('contact_name', 'LIKE', '%' . $term . '%')->orWhere('company_name', 'LIKE', '%' . $term);
             });
         }
     }


523) /var/www/app/Models/RecurringInvoice.php:163    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $filters = collect($filters);
         if ($filters->get('status') && $filters->get('status') !== 'ALL') {
-            $query->whereStatus($filters->get('status'));
+            
         }
         if ($filters->get('search')) {
             $query->whereSearch($filters->get('search'));


524) /var/www/app/Models/RecurringInvoice.php:167    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereStatus($filters->get('status'));
         }
         if ($filters->get('search')) {
-            $query->whereSearch($filters->get('search'));
+            
         }
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));


525) /var/www/app/Models/RecurringInvoice.php:173    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
-            $query->recurringInvoicesStartBetween($start, $end);
+            
         }
         if ($filters->get('customer_id')) {
             $query->whereCustomer($filters->get('customer_id'));


526) /var/www/app/Models/RecurringInvoice.php:177    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->recurringInvoicesStartBetween($start, $end);
         }
         if ($filters->get('customer_id')) {
-            $query->whereCustomer($filters->get('customer_id'));
+            
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'created_at';


527) /var/www/app/Models/RecurringInvoice.php:181    [M] Ternary

--- Original
+++ New
@@ @@
             $query->whereCustomer($filters->get('customer_id'));
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
-            $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'created_at';
+            $field = $filters->get('orderByField') ? 'created_at' : $filters->get('orderByField');
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
             $query->whereOrder($field, $orderBy);
         }


528) /var/www/app/Models/RecurringInvoice.php:182    [M] Ternary

--- Original
+++ New
@@ @@
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'created_at';
-            $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
+            $orderBy = $filters->get('orderBy') ? 'asc' : $filters->get('orderBy');
             $query->whereOrder($field, $orderBy);
         }
     }


529) /var/www/app/Models/RecurringInvoice.php:183    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'created_at';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
-            $query->whereOrder($field, $orderBy);
+            
         }
     }
     public static function createFromRequest(RecurringInvoiceRequest $request)


530) /var/www/app/Models/RecurringInvoice.php:200    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         }
         self::createItems($recurringInvoice, $request->items);
         if ($request->has('taxes') && !empty($request->taxes)) {
-            self::createTaxes($recurringInvoice, $request->taxes);
+            
         }
         if ($request->customFields) {
             $recurringInvoice->addCustomFields($request->customFields);


531) /var/www/app/Models/RecurringInvoice.php:204    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             self::createTaxes($recurringInvoice, $request->taxes);
         }
         if ($request->customFields) {
-            $recurringInvoice->addCustomFields($request->customFields);
+            
         }
         return $recurringInvoice;
     }


532) /var/www/app/Models/RecurringInvoice.php:227    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         self::createItems($this, $request->items);
         $this->taxes()->delete();
         if ($request->has('taxes') && !empty($request->taxes)) {
-            self::createTaxes($this, $request->taxes);
+            
         }
         if ($request->customFields) {
             $this->updateCustomFields($request->customFields);


533) /var/www/app/Models/RecurringInvoice.php:231    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             self::createTaxes($this, $request->taxes);
         }
         if ($request->customFields) {
-            $this->updateCustomFields($request->customFields);
+            
         }
         return $this;
     }


534) /var/www/app/Models/RecurringInvoice.php:243    [M] Foreach_

--- Original
+++ New
@@ @@
             $invoiceItem['company_id'] = $recurringInvoice->company_id;
             $item = $recurringInvoice->items()->create($invoiceItem);
             if (array_key_exists('taxes', $invoiceItem) && $invoiceItem['taxes']) {
-                foreach ($invoiceItem['taxes'] as $tax) {
+                foreach (array() as $tax) {
                     $tax['company_id'] = $recurringInvoice->company_id;
                     if (gettype($tax['amount']) !== "NULL") {
                         $item->taxes()->create($tax);


535) /var/www/app/Models/RecurringInvoice.php:245    [M] NotIdentical

--- Original
+++ New
@@ @@
             if (array_key_exists('taxes', $invoiceItem) && $invoiceItem['taxes']) {
                 foreach ($invoiceItem['taxes'] as $tax) {
                     $tax['company_id'] = $recurringInvoice->company_id;
-                    if (gettype($tax['amount']) !== "NULL") {
+                    if (gettype($tax['amount']) === "NULL") {
                         $item->taxes()->create($tax);
                     }
                 }


536) /var/www/app/Models/RecurringInvoice.php:246    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 foreach ($invoiceItem['taxes'] as $tax) {
                     $tax['company_id'] = $recurringInvoice->company_id;
                     if (gettype($tax['amount']) !== "NULL") {
-                        $item->taxes()->create($tax);
+                        
                     }
                 }
             }


537) /var/www/app/Models/RecurringInvoice.php:253    [M] PublicVisibility

--- Original
+++ New
@@ @@
             }
         }
     }
-    public static function createTaxes($recurringInvoice, $taxes)
+    protected static function createTaxes($recurringInvoice, $taxes)
     {
         foreach ($taxes as $tax) {
             $tax['company_id'] = $recurringInvoice->company_id;


538) /var/www/app/Models/RecurringInvoice.php:255    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public static function createTaxes($recurringInvoice, $taxes)
     {
-        foreach ($taxes as $tax) {
+        foreach (array() as $tax) {
             $tax['company_id'] = $recurringInvoice->company_id;
             if (gettype($tax['amount']) !== "NULL") {
                 $recurringInvoice->taxes()->create($tax);


539) /var/www/app/Models/RecurringInvoice.php:258    [M] NotIdentical

--- Original
+++ New
@@ @@
     {
         foreach ($taxes as $tax) {
             $tax['company_id'] = $recurringInvoice->company_id;
-            if (gettype($tax['amount']) !== "NULL") {
+            if (gettype($tax['amount']) === "NULL") {
                 $recurringInvoice->taxes()->create($tax);
             }
         }


540) /var/www/app/Models/RecurringInvoice.php:259    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         foreach ($taxes as $tax) {
             $tax['company_id'] = $recurringInvoice->company_id;
             if (gettype($tax['amount']) !== "NULL") {
-                $recurringInvoice->taxes()->create($tax);
+                
             }
         }
     }


541) /var/www/app/Models/RecurringInvoice.php:264    [M] PublicVisibility

--- Original
+++ New
@@ @@
             }
         }
     }
-    public function generateInvoice()
+    protected function generateInvoice()
     {
         if (Carbon::now()->lessThan($this->starts_at)) {
             return;


542) /var/www/app/Models/RecurringInvoice.php:270    [M] Equal

--- Original
+++ New
@@ @@
         if (Carbon::now()->lessThan($this->starts_at)) {
             return;
         }
-        if ($this->limit_by == 'DATE') {
+        if ($this->limit_by != 'DATE') {
             $startDate = Carbon::today()->format('Y-m-d');
             $endDate = $this->limit_date;
             if ($endDate >= $startDate) {


543) /var/www/app/Models/RecurringInvoice.php:275    [M] GreaterThanOrEqualTo

--- Original
+++ New
@@ @@
         if ($this->limit_by == 'DATE') {
             $startDate = Carbon::today()->format('Y-m-d');
             $endDate = $this->limit_date;
-            if ($endDate >= $startDate) {
+            if ($endDate > $startDate) {
                 $this->createInvoice();
                 $this->updateNextInvoiceDate();
             } else {


544) /var/www/app/Models/RecurringInvoice.php:275    [M] GreaterThanOrEqualToNegotiation

--- Original
+++ New
@@ @@
         if ($this->limit_by == 'DATE') {
             $startDate = Carbon::today()->format('Y-m-d');
             $endDate = $this->limit_date;
-            if ($endDate >= $startDate) {
+            if ($endDate < $startDate) {
                 $this->createInvoice();
                 $this->updateNextInvoiceDate();
             } else {


545) /var/www/app/Models/RecurringInvoice.php:276    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $startDate = Carbon::today()->format('Y-m-d');
             $endDate = $this->limit_date;
             if ($endDate >= $startDate) {
-                $this->createInvoice();
+                
                 $this->updateNextInvoiceDate();
             } else {
                 $this->markStatusAsCompleted();


546) /var/www/app/Models/RecurringInvoice.php:278    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $endDate = $this->limit_date;
             if ($endDate >= $startDate) {
                 $this->createInvoice();
-                $this->updateNextInvoiceDate();
+                
             } else {
                 $this->markStatusAsCompleted();
             }


547) /var/www/app/Models/RecurringInvoice.php:280    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $this->createInvoice();
                 $this->updateNextInvoiceDate();
             } else {
-                $this->markStatusAsCompleted();
+                
             }
         } elseif ($this->limit_by == 'COUNT') {
             $invoiceCount = Invoice::where('recurring_invoice_id', $this->id)->count();


548) /var/www/app/Models/RecurringInvoice.php:282    [M] Equal

--- Original
+++ New
@@ @@
             } else {
                 $this->markStatusAsCompleted();
             }
-        } elseif ($this->limit_by == 'COUNT') {
+        } elseif ($this->limit_by != 'COUNT') {
             $invoiceCount = Invoice::where('recurring_invoice_id', $this->id)->count();
             if ($invoiceCount < $this->limit_count) {
                 $this->createInvoice();


549) /var/www/app/Models/RecurringInvoice.php:285    [M] LessThan

--- Original
+++ New
@@ @@
             }
         } elseif ($this->limit_by == 'COUNT') {
             $invoiceCount = Invoice::where('recurring_invoice_id', $this->id)->count();
-            if ($invoiceCount < $this->limit_count) {
+            if ($invoiceCount <= $this->limit_count) {
                 $this->createInvoice();
                 $this->updateNextInvoiceDate();
             } else {


550) /var/www/app/Models/RecurringInvoice.php:285    [M] LessThanNegotiation

--- Original
+++ New
@@ @@
             }
         } elseif ($this->limit_by == 'COUNT') {
             $invoiceCount = Invoice::where('recurring_invoice_id', $this->id)->count();
-            if ($invoiceCount < $this->limit_count) {
+            if ($invoiceCount >= $this->limit_count) {
                 $this->createInvoice();
                 $this->updateNextInvoiceDate();
             } else {


551) /var/www/app/Models/RecurringInvoice.php:286    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         } elseif ($this->limit_by == 'COUNT') {
             $invoiceCount = Invoice::where('recurring_invoice_id', $this->id)->count();
             if ($invoiceCount < $this->limit_count) {
-                $this->createInvoice();
+                
                 $this->updateNextInvoiceDate();
             } else {
                 $this->markStatusAsCompleted();


552) /var/www/app/Models/RecurringInvoice.php:288    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $invoiceCount = Invoice::where('recurring_invoice_id', $this->id)->count();
             if ($invoiceCount < $this->limit_count) {
                 $this->createInvoice();
-                $this->updateNextInvoiceDate();
+                
             } else {
                 $this->markStatusAsCompleted();
             }


553) /var/www/app/Models/RecurringInvoice.php:290    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $this->createInvoice();
                 $this->updateNextInvoiceDate();
             } else {
-                $this->markStatusAsCompleted();
+                
             }
         } else {
             $this->createInvoice();


554) /var/www/app/Models/RecurringInvoice.php:293    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $this->markStatusAsCompleted();
             }
         } else {
-            $this->createInvoice();
+            
             $this->updateNextInvoiceDate();
         }
     }


555) /var/www/app/Models/RecurringInvoice.php:295    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             }
         } else {
             $this->createInvoice();
-            $this->updateNextInvoiceDate();
+            
         }
     }
     public function createInvoice()


556) /var/www/app/Models/RecurringInvoice.php:299    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $this->updateNextInvoiceDate();
         }
     }
-    public function createInvoice()
+    protected function createInvoice()
     {
         //get invoice_number
         $serial = (new SerialNumberFormatter())->setModel(new Invoice())->setCompany($this->company_id)->setCustomer($this->customer_id)->setNextNumbers();


557) /var/www/app/Models/RecurringInvoice.php:310    [M] LogicalNot

--- Original
+++ New
@@ @@
         //get invoice_number
         $serial = (new SerialNumberFormatter())->setModel(new Invoice())->setCompany($this->company_id)->setCustomer($this->customer_id)->setNextNumbers();
         $days = CompanySetting::getSetting('invoice_due_date_days', $this->company_id);
-        if (!$days || $days == "null") {
+        if ($days || $days == "null") {
             $days = 7;
         }
         $newInvoice['creator_id'] = $this->creator_id;


558) /var/www/app/Models/RecurringInvoice.php:310    [M] AssignmentEqual

--- Original
+++ New
@@ @@
         //get invoice_number
         $serial = (new SerialNumberFormatter())->setModel(new Invoice())->setCompany($this->company_id)->setCustomer($this->customer_id)->setNextNumbers();
         $days = CompanySetting::getSetting('invoice_due_date_days', $this->company_id);
-        if (!$days || $days == "null") {
+        if (!$days || ($days = "null")) {
             $days = 7;
         }
         $newInvoice['creator_id'] = $this->creator_id;


559) /var/www/app/Models/RecurringInvoice.php:310    [M] Equal

--- Original
+++ New
@@ @@
         //get invoice_number
         $serial = (new SerialNumberFormatter())->setModel(new Invoice())->setCompany($this->company_id)->setCustomer($this->customer_id)->setNextNumbers();
         $days = CompanySetting::getSetting('invoice_due_date_days', $this->company_id);
-        if (!$days || $days == "null") {
+        if (!$days || $days != "null") {
             $days = 7;
         }
         $newInvoice['creator_id'] = $this->creator_id;


560) /var/www/app/Models/RecurringInvoice.php:310    [M] LogicalOr

--- Original
+++ New
@@ @@
         //get invoice_number
         $serial = (new SerialNumberFormatter())->setModel(new Invoice())->setCompany($this->company_id)->setCustomer($this->customer_id)->setNextNumbers();
         $days = CompanySetting::getSetting('invoice_due_date_days', $this->company_id);
-        if (!$days || $days == "null") {
+        if (!$days && $days == "null") {
             $days = 7;
         }
         $newInvoice['creator_id'] = $this->creator_id;


561) /var/www/app/Models/RecurringInvoice.php:311    [M] DecrementInteger

--- Original
+++ New
@@ @@
         $serial = (new SerialNumberFormatter())->setModel(new Invoice())->setCompany($this->company_id)->setCustomer($this->customer_id)->setNextNumbers();
         $days = CompanySetting::getSetting('invoice_due_date_days', $this->company_id);
         if (!$days || $days == "null") {
-            $days = 7;
+            $days = 6;
         }
         $newInvoice['creator_id'] = $this->creator_id;
         $newInvoice['invoice_date'] = Carbon::today()->format('Y-m-d');


562) /var/www/app/Models/RecurringInvoice.php:311    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $serial = (new SerialNumberFormatter())->setModel(new Invoice())->setCompany($this->company_id)->setCustomer($this->customer_id)->setNextNumbers();
         $days = CompanySetting::getSetting('invoice_due_date_days', $this->company_id);
         if (!$days || $days == "null") {
-            $days = 7;
+            $days = 8;
         }
         $newInvoice['creator_id'] = $this->creator_id;
         $newInvoice['invoice_date'] = Carbon::today()->format('Y-m-d');


563) /var/www/app/Models/RecurringInvoice.php:340    [M] Multiplication

--- Original
+++ New
@@ @@
         $newInvoice['invoice_number'] = $serial->getNextNumber();
         $newInvoice['sequence_number'] = $serial->nextSequenceNumber;
         $newInvoice['customer_sequence_number'] = $serial->nextCustomerSequenceNumber;
-        $newInvoice['base_due_amount'] = $this->exchange_rate * $this->due_amount;
+        $newInvoice['base_due_amount'] = $this->exchange_rate / $this->due_amount;
         $newInvoice['base_discount_val'] = $this->exchange_rate * $this->discount_val;
         $newInvoice['base_sub_total'] = $this->exchange_rate * $this->sub_total;
         $newInvoice['base_tax'] = $this->exchange_rate * $this->tax;


564) /var/www/app/Models/RecurringInvoice.php:341    [M] Multiplication

--- Original
+++ New
@@ @@
         $newInvoice['sequence_number'] = $serial->nextSequenceNumber;
         $newInvoice['customer_sequence_number'] = $serial->nextCustomerSequenceNumber;
         $newInvoice['base_due_amount'] = $this->exchange_rate * $this->due_amount;
-        $newInvoice['base_discount_val'] = $this->exchange_rate * $this->discount_val;
+        $newInvoice['base_discount_val'] = $this->exchange_rate / $this->discount_val;
         $newInvoice['base_sub_total'] = $this->exchange_rate * $this->sub_total;
         $newInvoice['base_tax'] = $this->exchange_rate * $this->tax;
         $newInvoice['base_total'] = $this->exchange_rate * $this->total;


565) /var/www/app/Models/RecurringInvoice.php:342    [M] Multiplication

--- Original
+++ New
@@ @@
         $newInvoice['customer_sequence_number'] = $serial->nextCustomerSequenceNumber;
         $newInvoice['base_due_amount'] = $this->exchange_rate * $this->due_amount;
         $newInvoice['base_discount_val'] = $this->exchange_rate * $this->discount_val;
-        $newInvoice['base_sub_total'] = $this->exchange_rate * $this->sub_total;
+        $newInvoice['base_sub_total'] = $this->exchange_rate / $this->sub_total;
         $newInvoice['base_tax'] = $this->exchange_rate * $this->tax;
         $newInvoice['base_total'] = $this->exchange_rate * $this->total;
         $invoice = Invoice::create($newInvoice);


566) /var/www/app/Models/RecurringInvoice.php:343    [M] Multiplication

--- Original
+++ New
@@ @@
         $newInvoice['base_due_amount'] = $this->exchange_rate * $this->due_amount;
         $newInvoice['base_discount_val'] = $this->exchange_rate * $this->discount_val;
         $newInvoice['base_sub_total'] = $this->exchange_rate * $this->sub_total;
-        $newInvoice['base_tax'] = $this->exchange_rate * $this->tax;
+        $newInvoice['base_tax'] = $this->exchange_rate / $this->tax;
         $newInvoice['base_total'] = $this->exchange_rate * $this->total;
         $invoice = Invoice::create($newInvoice);
         $invoice->unique_hash = Hashids::connection(Invoice::class)->encode($invoice->id);


567) /var/www/app/Models/RecurringInvoice.php:344    [M] Multiplication

--- Original
+++ New
@@ @@
         $newInvoice['base_discount_val'] = $this->exchange_rate * $this->discount_val;
         $newInvoice['base_sub_total'] = $this->exchange_rate * $this->sub_total;
         $newInvoice['base_tax'] = $this->exchange_rate * $this->tax;
-        $newInvoice['base_total'] = $this->exchange_rate * $this->total;
+        $newInvoice['base_total'] = $this->exchange_rate / $this->total;
         $invoice = Invoice::create($newInvoice);
         $invoice->unique_hash = Hashids::connection(Invoice::class)->encode($invoice->id);
         $invoice->save();


568) /var/www/app/Models/RecurringInvoice.php:347    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $newInvoice['base_total'] = $this->exchange_rate * $this->total;
         $invoice = Invoice::create($newInvoice);
         $invoice->unique_hash = Hashids::connection(Invoice::class)->encode($invoice->id);
-        $invoice->save();
+        
         $this->load('items.taxes');
         Invoice::createItems($invoice, $this->items->toArray());
         if ($this->taxes()->exists()) {


569) /var/www/app/Models/RecurringInvoice.php:349    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $invoice = Invoice::create($newInvoice);
         $invoice->unique_hash = Hashids::connection(Invoice::class)->encode($invoice->id);
         $invoice->save();
-        $this->load('items.taxes');
+        
         Invoice::createItems($invoice, $this->items->toArray());
         if ($this->taxes()->exists()) {
             Invoice::createTaxes($invoice, $this->taxes->toArray());


570) /var/www/app/Models/RecurringInvoice.php:350    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $invoice->unique_hash = Hashids::connection(Invoice::class)->encode($invoice->id);
         $invoice->save();
         $this->load('items.taxes');
-        Invoice::createItems($invoice, $this->items->toArray());
+        
         if ($this->taxes()->exists()) {
             Invoice::createTaxes($invoice, $this->taxes->toArray());
         }


571) /var/www/app/Models/RecurringInvoice.php:353    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->load('items.taxes');
         Invoice::createItems($invoice, $this->items->toArray());
         if ($this->taxes()->exists()) {
-            Invoice::createTaxes($invoice, $this->taxes->toArray());
+            
         }
         if ($this->fields()->exists()) {
             $customField = [];


572) /var/www/app/Models/RecurringInvoice.php:359    [M] Foreach_

--- Original
+++ New
@@ @@
         }
         if ($this->fields()->exists()) {
             $customField = [];
-            foreach ($this->fields as $data) {
+            foreach (array() as $data) {
                 $customField[] = ['id' => $data->custom_field_id, 'value' => $data->defaultAnswer];
             }
             $invoice->addCustomFields($customField);


573) /var/www/app/Models/RecurringInvoice.php:360    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         if ($this->fields()->exists()) {
             $customField = [];
             foreach ($this->fields as $data) {
-                $customField[] = ['id' => $data->custom_field_id, 'value' => $data->defaultAnswer];
+                $customField[] = ['value' => $data->defaultAnswer];
             }
             $invoice->addCustomFields($customField);
         }


574) /var/www/app/Models/RecurringInvoice.php:361    [M] ArrayItem

--- Original
+++ New
@@ @@
         if ($this->fields()->exists()) {
             $customField = [];
             foreach ($this->fields as $data) {
-                $customField[] = ['id' => $data->custom_field_id, 'value' => $data->defaultAnswer];
+                $customField[] = ['id' > $data->custom_field_id, 'value' => $data->defaultAnswer];
             }
             $invoice->addCustomFields($customField);
         }


575) /var/www/app/Models/RecurringInvoice.php:362    [M] ArrayItem

--- Original
+++ New
@@ @@
         if ($this->fields()->exists()) {
             $customField = [];
             foreach ($this->fields as $data) {
-                $customField[] = ['id' => $data->custom_field_id, 'value' => $data->defaultAnswer];
+                $customField[] = ['id' => $data->custom_field_id, 'value' > $data->defaultAnswer];
             }
             $invoice->addCustomFields($customField);
         }


576) /var/www/app/Models/RecurringInvoice.php:366    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             foreach ($this->fields as $data) {
                 $customField[] = ['id' => $data->custom_field_id, 'value' => $data->defaultAnswer];
             }
-            $invoice->addCustomFields($customField);
+            
         }
         //send automatically
         if ($this->send_automatically == true) {


577) /var/www/app/Models/RecurringInvoice.php:370    [M] TrueValue

--- Original
+++ New
@@ @@
             $invoice->addCustomFields($customField);
         }
         //send automatically
-        if ($this->send_automatically == true) {
+        if ($this->send_automatically == false) {
             $data = ['body' => CompanySetting::getSetting('invoice_mail_body', $this->company_id), 'from' => config('mail.from.address'), 'to' => $this->customer->email, 'subject' => 'New Invoice', 'invoice' => $invoice->toArray(), 'customer' => $invoice->customer->toArray(), 'company' => Company::find($invoice->company_id)];
             $invoice->send($data);
         }


578) /var/www/app/Models/RecurringInvoice.php:370    [M] Equal

--- Original
+++ New
@@ @@
             $invoice->addCustomFields($customField);
         }
         //send automatically
-        if ($this->send_automatically == true) {
+        if ($this->send_automatically != true) {
             $data = ['body' => CompanySetting::getSetting('invoice_mail_body', $this->company_id), 'from' => config('mail.from.address'), 'to' => $this->customer->email, 'subject' => 'New Invoice', 'invoice' => $invoice->toArray(), 'customer' => $invoice->customer->toArray(), 'company' => Company::find($invoice->company_id)];
             $invoice->send($data);
         }


579) /var/www/app/Models/RecurringInvoice.php:371    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         }
         //send automatically
         if ($this->send_automatically == true) {
-            $data = ['body' => CompanySetting::getSetting('invoice_mail_body', $this->company_id), 'from' => config('mail.from.address'), 'to' => $this->customer->email, 'subject' => 'New Invoice', 'invoice' => $invoice->toArray(), 'customer' => $invoice->customer->toArray(), 'company' => Company::find($invoice->company_id)];
+            $data = ['from' => config('mail.from.address'), 'to' => $this->customer->email, 'subject' => 'New Invoice', 'invoice' => $invoice->toArray(), 'customer' => $invoice->customer->toArray(), 'company' => Company::find($invoice->company_id)];
             $invoice->send($data);
         }
     }


580) /var/www/app/Models/RecurringInvoice.php:373    [M] ArrayItem

--- Original
+++ New
@@ @@
         }
         //send automatically
         if ($this->send_automatically == true) {
-            $data = ['body' => CompanySetting::getSetting('invoice_mail_body', $this->company_id), 'from' => config('mail.from.address'), 'to' => $this->customer->email, 'subject' => 'New Invoice', 'invoice' => $invoice->toArray(), 'customer' => $invoice->customer->toArray(), 'company' => Company::find($invoice->company_id)];
+            $data = ['body' => CompanySetting::getSetting('invoice_mail_body', $this->company_id), 'from' > config('mail.from.address'), 'to' => $this->customer->email, 'subject' => 'New Invoice', 'invoice' => $invoice->toArray(), 'customer' => $invoice->customer->toArray(), 'company' => Company::find($invoice->company_id)];
             $invoice->send($data);
         }
     }


581) /var/www/app/Models/RecurringInvoice.php:374    [M] ArrayItem

--- Original
+++ New
@@ @@
         }
         //send automatically
         if ($this->send_automatically == true) {
-            $data = ['body' => CompanySetting::getSetting('invoice_mail_body', $this->company_id), 'from' => config('mail.from.address'), 'to' => $this->customer->email, 'subject' => 'New Invoice', 'invoice' => $invoice->toArray(), 'customer' => $invoice->customer->toArray(), 'company' => Company::find($invoice->company_id)];
+            $data = ['body' => CompanySetting::getSetting('invoice_mail_body', $this->company_id), 'from' => config('mail.from.address'), 'to' > $this->customer->email, 'subject' => 'New Invoice', 'invoice' => $invoice->toArray(), 'customer' => $invoice->customer->toArray(), 'company' => Company::find($invoice->company_id)];
             $invoice->send($data);
         }
     }


582) /var/www/app/Models/RecurringInvoice.php:376    [M] ArrayItem

--- Original
+++ New
@@ @@
         }
         //send automatically
         if ($this->send_automatically == true) {
-            $data = ['body' => CompanySetting::getSetting('invoice_mail_body', $this->company_id), 'from' => config('mail.from.address'), 'to' => $this->customer->email, 'subject' => 'New Invoice', 'invoice' => $invoice->toArray(), 'customer' => $invoice->customer->toArray(), 'company' => Company::find($invoice->company_id)];
+            $data = ['body' => CompanySetting::getSetting('invoice_mail_body', $this->company_id), 'from' => config('mail.from.address'), 'to' => $this->customer->email, 'subject' => 'New Invoice', 'invoice' > $invoice->toArray(), 'customer' => $invoice->customer->toArray(), 'company' => Company::find($invoice->company_id)];
             $invoice->send($data);
         }
     }


583) /var/www/app/Models/RecurringInvoice.php:377    [M] ArrayItem

--- Original
+++ New
@@ @@
         }
         //send automatically
         if ($this->send_automatically == true) {
-            $data = ['body' => CompanySetting::getSetting('invoice_mail_body', $this->company_id), 'from' => config('mail.from.address'), 'to' => $this->customer->email, 'subject' => 'New Invoice', 'invoice' => $invoice->toArray(), 'customer' => $invoice->customer->toArray(), 'company' => Company::find($invoice->company_id)];
+            $data = ['body' => CompanySetting::getSetting('invoice_mail_body', $this->company_id), 'from' => config('mail.from.address'), 'to' => $this->customer->email, 'subject' => 'New Invoice', 'invoice' => $invoice->toArray(), 'customer' > $invoice->customer->toArray(), 'company' => Company::find($invoice->company_id)];
             $invoice->send($data);
         }
     }


584) /var/www/app/Models/RecurringInvoice.php:381    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         //send automatically
         if ($this->send_automatically == true) {
             $data = ['body' => CompanySetting::getSetting('invoice_mail_body', $this->company_id), 'from' => config('mail.from.address'), 'to' => $this->customer->email, 'subject' => 'New Invoice', 'invoice' => $invoice->toArray(), 'customer' => $invoice->customer->toArray(), 'company' => Company::find($invoice->company_id)];
-            $invoice->send($data);
+            
         }
     }
     public function markStatusAsCompleted()


585) /var/www/app/Models/RecurringInvoice.php:385    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $invoice->send($data);
         }
     }
-    public function markStatusAsCompleted()
+    protected function markStatusAsCompleted()
     {
         if ($this->status == $this->status) {
             $this->status = self::COMPLETED;


586) /var/www/app/Models/RecurringInvoice.php:387    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function markStatusAsCompleted()
     {
-        if ($this->status == $this->status) {
+        if ($this->status != $this->status) {
             $this->status = self::COMPLETED;
             $this->save();
         }


587) /var/www/app/Models/RecurringInvoice.php:389    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         if ($this->status == $this->status) {
             $this->status = self::COMPLETED;
-            $this->save();
+            
         }
     }
     public static function getNextInvoiceDate($frequency, $starts_at)


588) /var/www/app/Models/RecurringInvoice.php:400    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $cron = new Cron\CronExpression($frequency);
         return $cron->getNextRunDate($starts_at)->format('Y-m-d H:i:s');
     }
-    public function updateNextInvoiceDate()
+    protected function updateNextInvoiceDate()
     {
         $nextInvoiceAt = self::getNextInvoiceDate($this->frequency, $this->starts_at);
         $this->next_invoice_at = $nextInvoiceAt;


589) /var/www/app/Models/RecurringInvoice.php:405    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $nextInvoiceAt = self::getNextInvoiceDate($this->frequency, $this->starts_at);
         $this->next_invoice_at = $nextInvoiceAt;
-        $this->save();
+        
     }
     public static function deleteRecurringInvoice($ids)
     {


590) /var/www/app/Models/RecurringInvoice.php:414    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         foreach ($ids as $id) {
             $recurringInvoice = self::find($id);
             if ($recurringInvoice->invoices()->exists()) {
-                $recurringInvoice->invoices()->update(['recurring_invoice_id' => null]);
+                $recurringInvoice->invoices()->update([]);
             }
             if ($recurringInvoice->items()->exists()) {
                 $recurringInvoice->items()->delete();


591) /var/www/app/Models/RecurringInvoice.php:414    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         foreach ($ids as $id) {
             $recurringInvoice = self::find($id);
             if ($recurringInvoice->invoices()->exists()) {
-                $recurringInvoice->invoices()->update(['recurring_invoice_id' => null]);
+                
             }
             if ($recurringInvoice->items()->exists()) {
                 $recurringInvoice->items()->delete();


592) /var/www/app/Models/RecurringInvoice.php:418    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $recurringInvoice->invoices()->update(['recurring_invoice_id' => null]);
             }
             if ($recurringInvoice->items()->exists()) {
-                $recurringInvoice->items()->delete();
+                
             }
             if ($recurringInvoice->taxes()->exists()) {
                 $recurringInvoice->taxes()->delete();


593) /var/www/app/Models/RecurringInvoice.php:422    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $recurringInvoice->items()->delete();
             }
             if ($recurringInvoice->taxes()->exists()) {
-                $recurringInvoice->taxes()->delete();
+                
             }
             $recurringInvoice->delete();
         }


594) /var/www/app/Models/Setting.php:31    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $set->value = $setting;
         $set->save();
     }
-    public static function setSettings($settings)
+    protected static function setSettings($settings)
     {
         foreach ($settings as $key => $value) {
             self::updateOrCreate(['option' => $key], ['option' => $key, 'value' => $value]);


595) /var/www/app/Models/Setting.php:33    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public static function setSettings($settings)
     {
-        foreach ($settings as $key => $value) {
+        foreach (array() as $key => $value) {
             self::updateOrCreate(['option' => $key], ['option' => $key, 'value' => $value]);
         }
     }


596) /var/www/app/Models/Setting.php:34    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public static function setSettings($settings)
     {
         foreach ($settings as $key => $value) {
-            self::updateOrCreate(['option' => $key], ['option' => $key, 'value' => $value]);
+            
         }
     }
     public static function getSetting($key)


597) /var/www/app/Models/Setting.php:35    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public static function setSettings($settings)
     {
         foreach ($settings as $key => $value) {
-            self::updateOrCreate(['option' => $key], ['option' => $key, 'value' => $value]);
+            self::updateOrCreate([], ['option' => $key, 'value' => $value]);
         }
     }
     public static function getSetting($key)


598) /var/www/app/Models/Setting.php:38    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public static function setSettings($settings)
     {
         foreach ($settings as $key => $value) {
-            self::updateOrCreate(['option' => $key], ['option' => $key, 'value' => $value]);
+            self::updateOrCreate(['option' => $key], ['value' => $value]);
         }
     }
     public static function getSetting($key)


599) /var/www/app/Models/Setting.php:57    [M] PublicVisibility

--- Original
+++ New
@@ @@
             return null;
         }
     }
-    public static function getSettings($settings)
+    protected static function getSettings($settings)
     {
         return static::whereIn('option', $settings)->get()->mapWithKeys(function ($item) {
             return [$item['option'] => $item['value']];


600) /var/www/app/Models/Setting.php:61    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public static function getSettings($settings)
     {
         return static::whereIn('option', $settings)->get()->mapWithKeys(function ($item) {
-            return [$item['option'] => $item['value']];
+            return [];
         });
     }
 }


601) /var/www/app/Models/Tax.php:63    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Item::class);
     }
-    public function scopeWhereCompany($query, $company_id)
+    protected function scopeWhereCompany($query, $company_id)
     {
         $query->where('company_id', $company_id);
     }


602) /var/www/app/Models/Tax.php:65    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereCompany($query, $company_id)
     {
-        $query->where('company_id', $company_id);
+        
     }
     public function scopeTaxAttributes($query)
     {


603) /var/www/app/Models/Tax.php:68    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('company_id', $company_id);
     }
-    public function scopeTaxAttributes($query)
+    protected function scopeTaxAttributes($query)
     {
         $query->select(DB::raw('sum(base_amount) as total_tax_amount, tax_type_id'))->groupBy('tax_type_id');
     }


604) /var/www/app/Models/Tax.php:70    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeTaxAttributes($query)
     {
-        $query->select(DB::raw('sum(base_amount) as total_tax_amount, tax_type_id'))->groupBy('tax_type_id');
+        
     }
     public function scopeInvoicesBetween($query, $start, $end)
     {


605) /var/www/app/Models/Tax.php:75    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->select(DB::raw('sum(base_amount) as total_tax_amount, tax_type_id'))->groupBy('tax_type_id');
     }
-    public function scopeInvoicesBetween($query, $start, $end)
+    protected function scopeInvoicesBetween($query, $start, $end)
     {
         $query->whereHas('invoice', function ($query) use($start, $end) {
             $query->where('paid_status', Invoice::STATUS_PAID)->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);


606) /var/www/app/Models/Tax.php:77    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeInvoicesBetween($query, $start, $end)
     {
-        $query->whereHas('invoice', function ($query) use($start, $end) {
-            $query->where('paid_status', Invoice::STATUS_PAID)->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
-        })->orWhereHas('invoiceItem.invoice', function ($query) use($start, $end) {
-            $query->where('paid_status', Invoice::STATUS_PAID)->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
-        });
+        
     }
     public function scopeWhereInvoicesFilters($query, array $filters)
     {


607) /var/www/app/Models/Tax.php:78    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function scopeInvoicesBetween($query, $start, $end)
     {
         $query->whereHas('invoice', function ($query) use($start, $end) {
-            $query->where('paid_status', Invoice::STATUS_PAID)->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+            
         })->orWhereHas('invoiceItem.invoice', function ($query) use($start, $end) {
             $query->where('paid_status', Invoice::STATUS_PAID)->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
         });


608) /var/www/app/Models/Tax.php:81    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function scopeInvoicesBetween($query, $start, $end)
     {
         $query->whereHas('invoice', function ($query) use($start, $end) {
-            $query->where('paid_status', Invoice::STATUS_PAID)->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+            $query->where('paid_status', Invoice::STATUS_PAID)->whereBetween('invoice_date', [$end->format('Y-m-d')]);
         })->orWhereHas('invoiceItem.invoice', function ($query) use($start, $end) {
             $query->where('paid_status', Invoice::STATUS_PAID)->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
         });


609) /var/www/app/Models/Tax.php:85    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $query->whereHas('invoice', function ($query) use($start, $end) {
             $query->where('paid_status', Invoice::STATUS_PAID)->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
         })->orWhereHas('invoiceItem.invoice', function ($query) use($start, $end) {
-            $query->where('paid_status', Invoice::STATUS_PAID)->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+            
         });
     }
     public function scopeWhereInvoicesFilters($query, array $filters)


610) /var/www/app/Models/Tax.php:88    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $query->whereHas('invoice', function ($query) use($start, $end) {
             $query->where('paid_status', Invoice::STATUS_PAID)->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
         })->orWhereHas('invoiceItem.invoice', function ($query) use($start, $end) {
-            $query->where('paid_status', Invoice::STATUS_PAID)->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+            $query->where('paid_status', Invoice::STATUS_PAID)->whereBetween('invoice_date', [$end->format('Y-m-d')]);
         });
     }
     public function scopeWhereInvoicesFilters($query, array $filters)


611) /var/www/app/Models/Tax.php:93    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->where('paid_status', Invoice::STATUS_PAID)->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
         });
     }
-    public function scopeWhereInvoicesFilters($query, array $filters)
+    protected function scopeWhereInvoicesFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('from_date') && $filters->get('to_date')) {


612) /var/www/app/Models/Tax.php:97    [M] LogicalAnd

--- Original
+++ New
@@ @@
     public function scopeWhereInvoicesFilters($query, array $filters)
     {
         $filters = collect($filters);
-        if ($filters->get('from_date') && $filters->get('to_date')) {
+        if ($filters->get('from_date') || $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
             $query->invoicesBetween($start, $end);


613) /var/www/app/Models/Tax.php:101    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
-            $query->invoicesBetween($start, $end);
+            
         }
     }
 }


614) /var/www/app/Models/TaxType.php:39    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('company_id', request()->header('company'));
     }
-    public function scopeWhereTaxType($query, $tax_type_id)
+    protected function scopeWhereTaxType($query, $tax_type_id)
     {
         $query->orWhere('id', $tax_type_id);
     }


615) /var/www/app/Models/TaxType.php:41    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereTaxType($query, $tax_type_id)
     {
-        $query->orWhere('id', $tax_type_id);
+        
     }
     public function scopeApplyFilters($query, array $filters)
     {


616) /var/www/app/Models/TaxType.php:49    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $filters = collect($filters);
         if ($filters->get('tax_type_id')) {
-            $query->whereTaxType($filters->get('tax_type_id'));
+            
         }
         if ($filters->get('company_id')) {
             $query->whereCompany($filters->get('company_id'));


617) /var/www/app/Models/TaxType.php:53    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereTaxType($filters->get('tax_type_id'));
         }
         if ($filters->get('company_id')) {
-            $query->whereCompany($filters->get('company_id'));
+            
         }
         if ($filters->get('search')) {
             $query->whereSearch($filters->get('search'));


618) /var/www/app/Models/TaxType.php:57    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereCompany($filters->get('company_id'));
         }
         if ($filters->get('search')) {
-            $query->whereSearch($filters->get('search'));
+            
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'payment_number';


619) /var/www/app/Models/TaxType.php:61    [M] Ternary

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
-            $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'payment_number';
+            $field = $filters->get('orderByField') ? 'payment_number' : $filters->get('orderByField');
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
             $query->whereOrder($field, $orderBy);
         }


620) /var/www/app/Models/TaxType.php:62    [M] Ternary

--- Original
+++ New
@@ @@
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'payment_number';
-            $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
+            $orderBy = $filters->get('orderBy') ? 'asc' : $filters->get('orderBy');
             $query->whereOrder($field, $orderBy);
         }
     }


621) /var/www/app/Models/TaxType.php:63    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'payment_number';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
-            $query->whereOrder($field, $orderBy);
+            
         }
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)


622) /var/www/app/Models/TaxType.php:67    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereOrder($field, $orderBy);
         }
     }
-    public function scopeWhereOrder($query, $orderByField, $orderBy)
+    protected function scopeWhereOrder($query, $orderByField, $orderBy)
     {
         $query->orderBy($orderByField, $orderBy);
     }


623) /var/www/app/Models/TaxType.php:69    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {
-        $query->orderBy($orderByField, $orderBy);
+        
     }
     public function scopeWhereSearch($query, $search)
     {


624) /var/www/app/Models/TaxType.php:72    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orderBy($orderByField, $orderBy);
     }
-    public function scopeWhereSearch($query, $search)
+    protected function scopeWhereSearch($query, $search)
     {
         $query->where('name', 'LIKE', '%' . $search . '%');
     }


625) /var/www/app/Models/TaxType.php:74    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', $search . '%' . '%');
     }
     public function scopePaginateData($query, $limit)
     {


626) /var/www/app/Models/TaxType.php:74    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', $search . '%');
     }
     public function scopePaginateData($query, $limit)
     {


627) /var/www/app/Models/TaxType.php:74    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', '%' . '%');
     }
     public function scopePaginateData($query, $limit)
     {


628) /var/www/app/Models/TaxType.php:74    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', '%' . '%' . $search);
     }
     public function scopePaginateData($query, $limit)
     {


629) /var/www/app/Models/TaxType.php:74    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        $query->where('name', 'LIKE', '%' . $search);
     }
     public function scopePaginateData($query, $limit)
     {


630) /var/www/app/Models/TaxType.php:74    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        $query->where('name', 'LIKE', '%' . $search . '%');
+        
     }
     public function scopePaginateData($query, $limit)
     {


631) /var/www/app/Models/Unit.php:29    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->where('company_id', request()->header('company'));
     }
-    public function scopeWhereUnit($query, $unit_id)
+    protected function scopeWhereUnit($query, $unit_id)
     {
         $query->orWhere('id', $unit_id);
     }


632) /var/www/app/Models/Unit.php:31    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereUnit($query, $unit_id)
     {
-        $query->orWhere('id', $unit_id);
+        
     }
     public function scopeWhereSearch($query, $search)
     {


633) /var/www/app/Models/Unit.php:34    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orWhere('id', $unit_id);
     }
-    public function scopeWhereSearch($query, $search)
+    protected function scopeWhereSearch($query, $search)
     {
         return $query->where('name', 'LIKE', '%' . $search . '%');
     }


634) /var/www/app/Models/Unit.php:36    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        return $query->where('name', 'LIKE', '%' . $search . '%');
+        return $query->where('name', 'LIKE', $search . '%' . '%');
     }
     public function scopeApplyFilters($query, array $filters)
     {


635) /var/www/app/Models/Unit.php:36    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        return $query->where('name', 'LIKE', '%' . $search . '%');
+        return $query->where('name', 'LIKE', $search . '%');
     }
     public function scopeApplyFilters($query, array $filters)
     {


636) /var/www/app/Models/Unit.php:36    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        return $query->where('name', 'LIKE', '%' . $search . '%');
+        return $query->where('name', 'LIKE', '%' . '%');
     }
     public function scopeApplyFilters($query, array $filters)
     {


637) /var/www/app/Models/Unit.php:36    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        return $query->where('name', 'LIKE', '%' . $search . '%');
+        return $query->where('name', 'LIKE', '%' . '%' . $search);
     }
     public function scopeApplyFilters($query, array $filters)
     {


638) /var/www/app/Models/Unit.php:36    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        return $query->where('name', 'LIKE', '%' . $search . '%');
+        return $query->where('name', 'LIKE', '%' . $search);
     }
     public function scopeApplyFilters($query, array $filters)
     {


639) /var/www/app/Models/Unit.php:44    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $filters = collect($filters);
         if ($filters->get('search')) {
-            $query->whereSearch($filters->get('search'));
+            
         }
         if ($filters->get('unit_id')) {
             $query->whereUnit($filters->get('unit_id'));


640) /var/www/app/Models/Unit.php:48    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
         if ($filters->get('unit_id')) {
-            $query->whereUnit($filters->get('unit_id'));
+            
         }
         if ($filters->get('company_id')) {
             $query->whereCompany($filters->get('company_id'));


641) /var/www/app/Models/Unit.php:52    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereUnit($filters->get('unit_id'));
         }
         if ($filters->get('company_id')) {
-            $query->whereCompany($filters->get('company_id'));
+            
         }
         return $query;
     }


642) /var/www/app/Models/User.php:62    [M] PublicVisibility

--- Original
+++ New
@@ @@
      * @param  string  $username
      * @return \App\User
      */
-    public function findForPassport($username)
+    protected function findForPassport($username)
     {
         return $this->where('email', $username)->first();
     }


643) /var/www/app/Models/User.php:74    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $this->attributes['password'] = bcrypt($value);
         }
     }
-    public function isSuperAdminOrAdmin()
+    protected function isSuperAdminOrAdmin()
     {
         return $this->role == 'super admin' || $this->role == 'admin';
     }


644) /var/www/app/Models/User.php:76    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function isSuperAdminOrAdmin()
     {
-        return $this->role == 'super admin' || $this->role == 'admin';
+        return $this->role != 'super admin' || $this->role == 'admin';
     }
     public static function login($request)
     {


645) /var/www/app/Models/User.php:76    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function isSuperAdminOrAdmin()
     {
-        return $this->role == 'super admin' || $this->role == 'admin';
+        return $this->role == 'super admin' || $this->role != 'admin';
     }
     public static function login($request)
     {


646) /var/www/app/Models/User.php:76    [M] LogicalOr

--- Original
+++ New
@@ @@
     }
     public function isSuperAdminOrAdmin()
     {
-        return $this->role == 'super admin' || $this->role == 'admin';
+        return $this->role == 'super admin' && $this->role == 'admin';
     }
     public static function login($request)
     {


647) /var/www/app/Models/User.php:79    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->role == 'super admin' || $this->role == 'admin';
     }
-    public static function login($request)
+    protected static function login($request)
     {
         $remember = $request->remember;
         $email = $request->email;


648) /var/www/app/Models/User.php:85    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $remember = $request->remember;
         $email = $request->email;
         $password = $request->password;
-        return \Auth::attempt(['email' => $email, 'password' => $password], $remember);
+        return \Auth::attempt(['password' => $password], $remember);
     }
     public function getFormattedCreatedAtAttribute($value)
     {


649) /var/www/app/Models/User.php:95    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $dateFormat = CompanySetting::getSetting('carbon_date_format', request()->header('company'));
         return Carbon::parse($this->created_at)->format($dateFormat);
     }
-    public function estimates()
+    protected function estimates()
     {
         return $this->hasMany(Estimate::class, 'creator_id');
     }


650) /var/www/app/Models/User.php:100    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Estimate::class, 'creator_id');
     }
-    public function customers()
+    protected function customers()
     {
         return $this->hasMany(Customer::class, 'creator_id');
     }


651) /var/www/app/Models/User.php:105    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Customer::class, 'creator_id');
     }
-    public function recurringInvoices()
+    protected function recurringInvoices()
     {
         return $this->hasMany(RecurringInvoice::class, 'creator_id');
     }


652) /var/www/app/Models/User.php:115    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsTo(Currency::class, 'currency_id');
     }
-    public function creator()
+    protected function creator()
     {
         return $this->belongsTo('Crater\\Models\\User', 'creator_id');
     }


653) /var/www/app/Models/User.php:125    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->belongsToMany(Company::class, 'user_company', 'user_id', 'company_id');
     }
-    public function expenses()
+    protected function expenses()
     {
         return $this->hasMany(Expense::class, 'creator_id');
     }


654) /var/www/app/Models/User.php:130    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Expense::class, 'creator_id');
     }
-    public function payments()
+    protected function payments()
     {
         return $this->hasMany(Payment::class, 'creator_id');
     }


655) /var/www/app/Models/User.php:135    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Payment::class, 'creator_id');
     }
-    public function invoices()
+    protected function invoices()
     {
         return $this->hasMany(Invoice::class, 'creator_id');
     }


656) /var/www/app/Models/User.php:140    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Invoice::class, 'creator_id');
     }
-    public function items()
+    protected function items()
     {
         return $this->hasMany(Item::class, 'creator_id');
     }


657) /var/www/app/Models/User.php:150    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(UserSetting::class, 'user_id');
     }
-    public function addresses()
+    protected function addresses()
     {
         return $this->hasMany(Address::class);
     }


658) /var/www/app/Models/User.php:155    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasMany(Address::class);
     }
-    public function billingAddress()
+    protected function billingAddress()
     {
         return $this->hasOne(Address::class)->where('type', Address::BILLING_TYPE);
     }


659) /var/www/app/Models/User.php:160    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->hasOne(Address::class)->where('type', Address::BILLING_TYPE);
     }
-    public function shippingAddress()
+    protected function shippingAddress()
     {
         return $this->hasOne(Address::class)->where('type', Address::SHIPPING_TYPE);
     }


660) /var/www/app/Models/User.php:170    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
      */
     public function sendPasswordResetNotification($token)
     {
-        $this->notify(new MailResetPasswordNotification($token));
+        
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {


661) /var/www/app/Models/User.php:173    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $this->notify(new MailResetPasswordNotification($token));
     }
-    public function scopeWhereOrder($query, $orderByField, $orderBy)
+    protected function scopeWhereOrder($query, $orderByField, $orderBy)
     {
         $query->orderBy($orderByField, $orderBy);
     }


662) /var/www/app/Models/User.php:175    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereOrder($query, $orderByField, $orderBy)
     {
-        $query->orderBy($orderByField, $orderBy);
+        
     }
     public function scopeWhereSearch($query, $search)
     {


663) /var/www/app/Models/User.php:178    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orderBy($orderByField, $orderBy);
     }
-    public function scopeWhereSearch($query, $search)
+    protected function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {


664) /var/www/app/Models/User.php:180    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSearch($query, $search)
     {
-        foreach (explode(' ', $search) as $term) {
+        foreach (array() as $term) {
             $query->where(function ($query) use($term) {
                 $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });


665) /var/www/app/Models/User.php:181    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function scopeWhereSearch($query, $search)
     {
         foreach (explode(' ', $search) as $term) {
-            $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
-            });
+            
         }
     }
     public function scopeWhereContactName($query, $contactName)


666) /var/www/app/Models/User.php:182    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%' . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


667) /var/www/app/Models/User.php:182    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


668) /var/www/app/Models/User.php:182    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


669) /var/www/app/Models/User.php:182    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . '%' . $term)->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


670) /var/www/app/Models/User.php:182    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term)->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


671) /var/www/app/Models/User.php:182    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                
             });
         }
     }


672) /var/www/app/Models/User.php:183    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', $term . '%' . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


673) /var/www/app/Models/User.php:183    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


674) /var/www/app/Models/User.php:183    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


675) /var/www/app/Models/User.php:183    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . '%' . $term)->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


676) /var/www/app/Models/User.php:183    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term)->orWhere('phone', 'LIKE', '%' . $term . '%');
             });
         }
     }


677) /var/www/app/Models/User.php:184    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', $term . '%' . '%');
             });
         }
     }


678) /var/www/app/Models/User.php:184    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', $term . '%');
             });
         }
     }


679) /var/www/app/Models/User.php:184    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . '%');
             });
         }
     }


680) /var/www/app/Models/User.php:184    [M] Concat

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . '%' . $term);
             });
         }
     }


681) /var/www/app/Models/User.php:184    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     {
         foreach (explode(' ', $search) as $term) {
             $query->where(function ($query) use($term) {
-                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term . '%');
+                $query->where('name', 'LIKE', '%' . $term . '%')->orWhere('email', 'LIKE', '%' . $term . '%')->orWhere('phone', 'LIKE', '%' . $term);
             });
         }
     }


682) /var/www/app/Models/User.php:189    [M] PublicVisibility

--- Original
+++ New
@@ @@
             });
         }
     }
-    public function scopeWhereContactName($query, $contactName)
+    protected function scopeWhereContactName($query, $contactName)
     {
         return $query->where('contact_name', 'LIKE', '%' . $contactName . '%');
     }


683) /var/www/app/Models/User.php:191    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereContactName($query, $contactName)
     {
-        return $query->where('contact_name', 'LIKE', '%' . $contactName . '%');
+        return $query->where('contact_name', 'LIKE', $contactName . '%' . '%');
     }
     public function scopeWhereDisplayName($query, $displayName)
     {


684) /var/www/app/Models/User.php:191    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereContactName($query, $contactName)
     {
-        return $query->where('contact_name', 'LIKE', '%' . $contactName . '%');
+        return $query->where('contact_name', 'LIKE', $contactName . '%');
     }
     public function scopeWhereDisplayName($query, $displayName)
     {


685) /var/www/app/Models/User.php:191    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereContactName($query, $contactName)
     {
-        return $query->where('contact_name', 'LIKE', '%' . $contactName . '%');
+        return $query->where('contact_name', 'LIKE', '%' . '%');
     }
     public function scopeWhereDisplayName($query, $displayName)
     {


686) /var/www/app/Models/User.php:191    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereContactName($query, $contactName)
     {
-        return $query->where('contact_name', 'LIKE', '%' . $contactName . '%');
+        return $query->where('contact_name', 'LIKE', '%' . '%' . $contactName);
     }
     public function scopeWhereDisplayName($query, $displayName)
     {


687) /var/www/app/Models/User.php:191    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereContactName($query, $contactName)
     {
-        return $query->where('contact_name', 'LIKE', '%' . $contactName . '%');
+        return $query->where('contact_name', 'LIKE', '%' . $contactName);
     }
     public function scopeWhereDisplayName($query, $displayName)
     {


688) /var/www/app/Models/User.php:194    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('contact_name', 'LIKE', '%' . $contactName . '%');
     }
-    public function scopeWhereDisplayName($query, $displayName)
+    protected function scopeWhereDisplayName($query, $displayName)
     {
         return $query->where('name', 'LIKE', '%' . $displayName . '%');
     }


689) /var/www/app/Models/User.php:196    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereDisplayName($query, $displayName)
     {
-        return $query->where('name', 'LIKE', '%' . $displayName . '%');
+        return $query->where('name', 'LIKE', $displayName . '%' . '%');
     }
     public function scopeWherePhone($query, $phone)
     {


690) /var/www/app/Models/User.php:196    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereDisplayName($query, $displayName)
     {
-        return $query->where('name', 'LIKE', '%' . $displayName . '%');
+        return $query->where('name', 'LIKE', $displayName . '%');
     }
     public function scopeWherePhone($query, $phone)
     {


691) /var/www/app/Models/User.php:196    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereDisplayName($query, $displayName)
     {
-        return $query->where('name', 'LIKE', '%' . $displayName . '%');
+        return $query->where('name', 'LIKE', '%' . '%');
     }
     public function scopeWherePhone($query, $phone)
     {


692) /var/www/app/Models/User.php:196    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereDisplayName($query, $displayName)
     {
-        return $query->where('name', 'LIKE', '%' . $displayName . '%');
+        return $query->where('name', 'LIKE', '%' . '%' . $displayName);
     }
     public function scopeWherePhone($query, $phone)
     {


693) /var/www/app/Models/User.php:196    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereDisplayName($query, $displayName)
     {
-        return $query->where('name', 'LIKE', '%' . $displayName . '%');
+        return $query->where('name', 'LIKE', '%' . $displayName);
     }
     public function scopeWherePhone($query, $phone)
     {


694) /var/www/app/Models/User.php:199    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('name', 'LIKE', '%' . $displayName . '%');
     }
-    public function scopeWherePhone($query, $phone)
+    protected function scopeWherePhone($query, $phone)
     {
         return $query->where('phone', 'LIKE', '%' . $phone . '%');
     }


695) /var/www/app/Models/User.php:201    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWherePhone($query, $phone)
     {
-        return $query->where('phone', 'LIKE', '%' . $phone . '%');
+        return $query->where('phone', 'LIKE', $phone . '%' . '%');
     }
     public function scopeWhereEmail($query, $email)
     {


696) /var/www/app/Models/User.php:201    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWherePhone($query, $phone)
     {
-        return $query->where('phone', 'LIKE', '%' . $phone . '%');
+        return $query->where('phone', 'LIKE', $phone . '%');
     }
     public function scopeWhereEmail($query, $email)
     {


697) /var/www/app/Models/User.php:201    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWherePhone($query, $phone)
     {
-        return $query->where('phone', 'LIKE', '%' . $phone . '%');
+        return $query->where('phone', 'LIKE', '%' . '%');
     }
     public function scopeWhereEmail($query, $email)
     {


698) /var/www/app/Models/User.php:201    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWherePhone($query, $phone)
     {
-        return $query->where('phone', 'LIKE', '%' . $phone . '%');
+        return $query->where('phone', 'LIKE', '%' . '%' . $phone);
     }
     public function scopeWhereEmail($query, $email)
     {


699) /var/www/app/Models/User.php:201    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWherePhone($query, $phone)
     {
-        return $query->where('phone', 'LIKE', '%' . $phone . '%');
+        return $query->where('phone', 'LIKE', '%' . $phone);
     }
     public function scopeWhereEmail($query, $email)
     {


700) /var/www/app/Models/User.php:204    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('phone', 'LIKE', '%' . $phone . '%');
     }
-    public function scopeWhereEmail($query, $email)
+    protected function scopeWhereEmail($query, $email)
     {
         return $query->where('email', 'LIKE', '%' . $email . '%');
     }


701) /var/www/app/Models/User.php:206    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereEmail($query, $email)
     {
-        return $query->where('email', 'LIKE', '%' . $email . '%');
+        return $query->where('email', 'LIKE', $email . '%' . '%');
     }
     public function scopePaginateData($query, $limit)
     {


702) /var/www/app/Models/User.php:206    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereEmail($query, $email)
     {
-        return $query->where('email', 'LIKE', '%' . $email . '%');
+        return $query->where('email', 'LIKE', $email . '%');
     }
     public function scopePaginateData($query, $limit)
     {


703) /var/www/app/Models/User.php:206    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereEmail($query, $email)
     {
-        return $query->where('email', 'LIKE', '%' . $email . '%');
+        return $query->where('email', 'LIKE', '%' . '%');
     }
     public function scopePaginateData($query, $limit)
     {


704) /var/www/app/Models/User.php:206    [M] Concat

--- Original
+++ New
@@ @@
     }
     public function scopeWhereEmail($query, $email)
     {
-        return $query->where('email', 'LIKE', '%' . $email . '%');
+        return $query->where('email', 'LIKE', '%' . '%' . $email);
     }
     public function scopePaginateData($query, $limit)
     {


705) /var/www/app/Models/User.php:206    [M] ConcatOperandRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereEmail($query, $email)
     {
-        return $query->where('email', 'LIKE', '%' . $email . '%');
+        return $query->where('email', 'LIKE', '%' . $email);
     }
     public function scopePaginateData($query, $limit)
     {


706) /var/www/app/Models/User.php:209    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $query->where('email', 'LIKE', '%' . $email . '%');
     }
-    public function scopePaginateData($query, $limit)
+    protected function scopePaginateData($query, $limit)
     {
         if ($limit == 'all') {
             return $query->get();


707) /var/www/app/Models/User.php:211    [M] AssignmentEqual

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit = 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


708) /var/www/app/Models/User.php:211    [M] Equal

--- Original
+++ New
@@ @@
     }
     public function scopePaginateData($query, $limit)
     {
-        if ($limit == 'all') {
+        if ($limit != 'all') {
             return $query->get();
         }
         return $query->paginate($limit);


709) /var/www/app/Models/User.php:223    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $filters = collect($filters);
         if ($filters->get('search')) {
-            $query->whereSearch($filters->get('search'));
+            
         }
         if ($filters->get('display_name')) {
             $query->whereDisplayName($filters->get('display_name'));


710) /var/www/app/Models/User.php:227    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereSearch($filters->get('search'));
         }
         if ($filters->get('display_name')) {
-            $query->whereDisplayName($filters->get('display_name'));
+            
         }
         if ($filters->get('email')) {
             $query->whereEmail($filters->get('email'));


711) /var/www/app/Models/User.php:231    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereDisplayName($filters->get('display_name'));
         }
         if ($filters->get('email')) {
-            $query->whereEmail($filters->get('email'));
+            
         }
         if ($filters->get('phone')) {
             $query->wherePhone($filters->get('phone'));


712) /var/www/app/Models/User.php:235    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $query->whereEmail($filters->get('email'));
         }
         if ($filters->get('phone')) {
-            $query->wherePhone($filters->get('phone'));
+            
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'name';


713) /var/www/app/Models/User.php:239    [M] Ternary

--- Original
+++ New
@@ @@
             $query->wherePhone($filters->get('phone'));
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
-            $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'name';
+            $field = $filters->get('orderByField') ? 'name' : $filters->get('orderByField');
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
             $query->whereOrder($field, $orderBy);
         }


714) /var/www/app/Models/User.php:240    [M] Ternary

--- Original
+++ New
@@ @@
         }
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'name';
-            $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
+            $orderBy = $filters->get('orderBy') ? 'asc' : $filters->get('orderBy');
             $query->whereOrder($field, $orderBy);
         }
     }


715) /var/www/app/Models/User.php:241    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('orderByField') || $filters->get('orderBy')) {
             $field = $filters->get('orderByField') ? $filters->get('orderByField') : 'name';
             $orderBy = $filters->get('orderBy') ? $filters->get('orderBy') : 'asc';
-            $query->whereOrder($field, $orderBy);
+            
         }
     }
     public function scopeWhereSuperAdmin($query)


716) /var/www/app/Models/User.php:245    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->whereOrder($field, $orderBy);
         }
     }
-    public function scopeWhereSuperAdmin($query)
+    protected function scopeWhereSuperAdmin($query)
     {
         $query->orWhere('role', 'super admin');
     }


717) /var/www/app/Models/User.php:247    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeWhereSuperAdmin($query)
     {
-        $query->orWhere('role', 'super admin');
+        
     }
     public function scopeApplyInvoiceFilters($query, array $filters)
     {


718) /var/www/app/Models/User.php:250    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         $query->orWhere('role', 'super admin');
     }
-    public function scopeApplyInvoiceFilters($query, array $filters)
+    protected function scopeApplyInvoiceFilters($query, array $filters)
     {
         $filters = collect($filters);
         if ($filters->get('from_date') && $filters->get('to_date')) {


719) /var/www/app/Models/User.php:254    [M] LogicalAnd

--- Original
+++ New
@@ @@
     public function scopeApplyInvoiceFilters($query, array $filters)
     {
         $filters = collect($filters);
-        if ($filters->get('from_date') && $filters->get('to_date')) {
+        if ($filters->get('from_date') || $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
             $query->invoicesBetween($start, $end);


720) /var/www/app/Models/User.php:257    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         if ($filters->get('from_date') && $filters->get('to_date')) {
             $start = Carbon::createFromFormat('Y-m-d', $filters->get('from_date'));
             $end = Carbon::createFromFormat('Y-m-d', $filters->get('to_date'));
-            $query->invoicesBetween($start, $end);
+            
         }
     }
     public function scopeInvoicesBetween($query, $start, $end)


721) /var/www/app/Models/User.php:261    [M] PublicVisibility

--- Original
+++ New
@@ @@
             $query->invoicesBetween($start, $end);
         }
     }
-    public function scopeInvoicesBetween($query, $start, $end)
+    protected function scopeInvoicesBetween($query, $start, $end)
     {
         $query->whereHas('invoices', function ($query) use($start, $end) {
             $query->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);


722) /var/www/app/Models/User.php:263    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function scopeInvoicesBetween($query, $start, $end)
     {
-        $query->whereHas('invoices', function ($query) use($start, $end) {
-            $query->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
-        });
+        
     }
     public function getAvatarAttribute()
     {


723) /var/www/app/Models/User.php:264    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     public function scopeInvoicesBetween($query, $start, $end)
     {
         $query->whereHas('invoices', function ($query) use($start, $end) {
-            $query->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+            
         });
     }
     public function getAvatarAttribute()


724) /var/www/app/Models/User.php:266    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function scopeInvoicesBetween($query, $start, $end)
     {
         $query->whereHas('invoices', function ($query) use($start, $end) {
-            $query->whereBetween('invoice_date', [$start->format('Y-m-d'), $end->format('Y-m-d')]);
+            $query->whereBetween('invoice_date', [$end->format('Y-m-d')]);
         });
     }
     public function getAvatarAttribute()


725) /var/www/app/Models/User.php:276    [M] FunctionCall

--- Original
+++ New
@@ @@
     {
         $avatar = $this->getMedia('admin_avatar')->first();
         if ($avatar) {
-            return asset($avatar->getUrl());
+            asset($avatar->getUrl());
+            return null;
         }
         return 0;
     }


726) /var/www/app/Models/User.php:304    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $companies = $this->companies()->pluck('company_id')->toArray();
         return in_array($company_id, $companies);
     }
-    public function getAllSettings()
+    protected function getAllSettings()
     {
         return $this->settings()->get()->mapWithKeys(function ($item) {
             return [$item['key'] => $item['value']];


727) /var/www/app/Models/User.php:307    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function getAllSettings()
     {
         return $this->settings()->get()->mapWithKeys(function ($item) {
-            return [$item['key'] => $item['value']];
+            return [];
         });
     }
     public function getSettings($settings)


728) /var/www/app/Models/User.php:311    [M] PublicVisibility

--- Original
+++ New
@@ @@
             return [$item['key'] => $item['value']];
         });
     }
-    public function getSettings($settings)
+    protected function getSettings($settings)
     {
         return $this->settings()->whereIn('key', $settings)->get()->mapWithKeys(function ($item) {
             return [$item['key'] => $item['value']];


729) /var/www/app/Models/User.php:314    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function getSettings($settings)
     {
         return $this->settings()->whereIn('key', $settings)->get()->mapWithKeys(function ($item) {
-            return [$item['key'] => $item['value']];
+            return [];
         });
     }
     public function isOwner()


730) /var/www/app/Models/User.php:327    [M] Equal

--- Original
+++ New
@@ @@
                 return true;
             }
         } else {
-            return $this->role == 'super admin' || $this->role == 'admin';
+            return $this->role != 'super admin' || $this->role == 'admin';
         }
         return false;
     }


731) /var/www/app/Models/User.php:327    [M] Equal

--- Original
+++ New
@@ @@
                 return true;
             }
         } else {
-            return $this->role == 'super admin' || $this->role == 'admin';
+            return $this->role == 'super admin' || $this->role != 'admin';
         }
         return false;
     }


732) /var/www/app/Models/User.php:327    [M] LogicalOr

--- Original
+++ New
@@ @@
                 return true;
             }
         } else {
-            return $this->role == 'super admin' || $this->role == 'admin';
+            return $this->role == 'super admin' && $this->role == 'admin';
         }
         return false;
     }


733) /var/www/app/Models/User.php:353    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $user;
     }
-    public function updateFromRequest(UserRequest $request)
+    protected function updateFromRequest(UserRequest $request)
     {
         $this->update($request->getUserPayload());
         $companies = collect($request->companies);


734) /var/www/app/Models/User.php:355    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     }
     public function updateFromRequest(UserRequest $request)
     {
-        $this->update($request->getUserPayload());
+        
         $companies = collect($request->companies);
         $this->companies()->sync($companies->pluck('id'));
         foreach ($companies as $company) {


735) /var/www/app/Models/User.php:358    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     {
         $this->update($request->getUserPayload());
         $companies = collect($request->companies);
-        $this->companies()->sync($companies->pluck('id'));
+        
         foreach ($companies as $company) {
             BouncerFacade::scope()->to($company['id']);
             BouncerFacade::sync($this)->roles([$company['role']]);


736) /var/www/app/Models/User.php:360    [M] Foreach_

--- Original
+++ New
@@ @@
         $this->update($request->getUserPayload());
         $companies = collect($request->companies);
         $this->companies()->sync($companies->pluck('id'));
-        foreach ($companies as $company) {
+        foreach (array() as $company) {
             BouncerFacade::scope()->to($company['id']);
             BouncerFacade::sync($this)->roles([$company['role']]);
         }


737) /var/www/app/Models/User.php:361    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $companies = collect($request->companies);
         $this->companies()->sync($companies->pluck('id'));
         foreach ($companies as $company) {
-            BouncerFacade::scope()->to($company['id']);
+            
             BouncerFacade::sync($this)->roles([$company['role']]);
         }
         return $this;


738) /var/www/app/Models/User.php:363    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         $this->companies()->sync($companies->pluck('id'));
         foreach ($companies as $company) {
             BouncerFacade::scope()->to($company['id']);
-            BouncerFacade::sync($this)->roles([$company['role']]);
+            BouncerFacade::sync($this)->roles([]);
         }
         return $this;
     }


739) /var/www/app/Models/User.php:363    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         $this->companies()->sync($companies->pluck('id'));
         foreach ($companies as $company) {
             BouncerFacade::scope()->to($company['id']);
-            BouncerFacade::sync($this)->roles([$company['role']]);
+            
         }
         return $this;
     }


740) /var/www/app/Models/User.php:366    [M] This

--- Original
+++ New
@@ @@
             BouncerFacade::scope()->to($company['id']);
             BouncerFacade::sync($this)->roles([$company['role']]);
         }
-        return $this;
+        return null;
     }
     public function checkAccess($data)
     {


741) /var/www/app/Models/User.php:369    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return $this;
     }
-    public function checkAccess($data)
+    protected function checkAccess($data)
     {
         if ($this->isOwner()) {
             return true;


742) /var/www/app/Models/User.php:372    [M] TrueValue

--- Original
+++ New
@@ @@
     public function checkAccess($data)
     {
         if ($this->isOwner()) {
-            return true;
+            return false;
         }
         if (!$data->data['owner_only'] && empty($data->data['ability'])) {
             return true;


743) /var/www/app/Models/User.php:375    [M] LogicalNot

--- Original
+++ New
@@ @@
         if ($this->isOwner()) {
             return true;
         }
-        if (!$data->data['owner_only'] && empty($data->data['ability'])) {
+        if ($data->data['owner_only'] && empty($data->data['ability'])) {
             return true;
         }
         if (!$data->data['owner_only'] && !empty($data->data['ability']) && !empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {


744) /var/www/app/Models/User.php:375    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if ($this->isOwner()) {
             return true;
         }
-        if (!$data->data['owner_only'] && empty($data->data['ability'])) {
+        if (!$data->data['owner_only'] || empty($data->data['ability'])) {
             return true;
         }
         if (!$data->data['owner_only'] && !empty($data->data['ability']) && !empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {


745) /var/www/app/Models/User.php:376    [M] TrueValue

--- Original
+++ New
@@ @@
             return true;
         }
         if (!$data->data['owner_only'] && empty($data->data['ability'])) {
-            return true;
+            return false;
         }
         if (!$data->data['owner_only'] && !empty($data->data['ability']) && !empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {
             return true;


746) /var/www/app/Models/User.php:379    [M] LogicalNot

--- Original
+++ New
@@ @@
         if (!$data->data['owner_only'] && empty($data->data['ability'])) {
             return true;
         }
-        if (!$data->data['owner_only'] && !empty($data->data['ability']) && !empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {
+        if ($data->data['owner_only'] && !empty($data->data['ability']) && !empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {
             return true;
         }
         if (!$data->data['owner_only'] && $this->can($data->data['ability'])) {


747) /var/www/app/Models/User.php:379    [M] LogicalNot

--- Original
+++ New
@@ @@
         if (!$data->data['owner_only'] && empty($data->data['ability'])) {
             return true;
         }
-        if (!$data->data['owner_only'] && !empty($data->data['ability']) && !empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {
+        if (!$data->data['owner_only'] && empty($data->data['ability']) && !empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {
             return true;
         }
         if (!$data->data['owner_only'] && $this->can($data->data['ability'])) {


748) /var/www/app/Models/User.php:379    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if (!$data->data['owner_only'] && empty($data->data['ability'])) {
             return true;
         }
-        if (!$data->data['owner_only'] && !empty($data->data['ability']) && !empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {
+        if ((!$data->data['owner_only'] || !empty($data->data['ability'])) && !empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {
             return true;
         }
         if (!$data->data['owner_only'] && $this->can($data->data['ability'])) {


749) /var/www/app/Models/User.php:379    [M] LogicalNot

--- Original
+++ New
@@ @@
         if (!$data->data['owner_only'] && empty($data->data['ability'])) {
             return true;
         }
-        if (!$data->data['owner_only'] && !empty($data->data['ability']) && !empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {
+        if (!$data->data['owner_only'] && !empty($data->data['ability']) && empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {
             return true;
         }
         if (!$data->data['owner_only'] && $this->can($data->data['ability'])) {


750) /var/www/app/Models/User.php:379    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if (!$data->data['owner_only'] && empty($data->data['ability'])) {
             return true;
         }
-        if (!$data->data['owner_only'] && !empty($data->data['ability']) && !empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {
+        if ((!$data->data['owner_only'] && !empty($data->data['ability']) || !empty($data->data['model'])) && $this->can($data->data['ability'], $data->data['model'])) {
             return true;
         }
         if (!$data->data['owner_only'] && $this->can($data->data['ability'])) {


751) /var/www/app/Models/User.php:379    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if (!$data->data['owner_only'] && empty($data->data['ability'])) {
             return true;
         }
-        if (!$data->data['owner_only'] && !empty($data->data['ability']) && !empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {
+        if (!$data->data['owner_only'] && !empty($data->data['ability']) && !empty($data->data['model']) || $this->can($data->data['ability'], $data->data['model'])) {
             return true;
         }
         if (!$data->data['owner_only'] && $this->can($data->data['ability'])) {


752) /var/www/app/Models/User.php:380    [M] TrueValue

--- Original
+++ New
@@ @@
             return true;
         }
         if (!$data->data['owner_only'] && !empty($data->data['ability']) && !empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {
-            return true;
+            return false;
         }
         if (!$data->data['owner_only'] && $this->can($data->data['ability'])) {
             return true;


753) /var/www/app/Models/User.php:383    [M] LogicalNot

--- Original
+++ New
@@ @@
         if (!$data->data['owner_only'] && !empty($data->data['ability']) && !empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {
             return true;
         }
-        if (!$data->data['owner_only'] && $this->can($data->data['ability'])) {
+        if ($data->data['owner_only'] && $this->can($data->data['ability'])) {
             return true;
         }
         return false;


754) /var/www/app/Models/User.php:383    [M] LogicalAnd

--- Original
+++ New
@@ @@
         if (!$data->data['owner_only'] && !empty($data->data['ability']) && !empty($data->data['model']) && $this->can($data->data['ability'], $data->data['model'])) {
             return true;
         }
-        if (!$data->data['owner_only'] && $this->can($data->data['ability'])) {
+        if (!$data->data['owner_only'] || $this->can($data->data['ability'])) {
             return true;
         }
         return false;


755) /var/www/app/Models/User.php:384    [M] TrueValue

--- Original
+++ New
@@ @@
             return true;
         }
         if (!$data->data['owner_only'] && $this->can($data->data['ability'])) {
-            return true;
+            return false;
         }
         return false;
     }


756) /var/www/app/Models/User.php:387    [M] FalseValue

--- Original
+++ New
@@ @@
         if (!$data->data['owner_only'] && $this->can($data->data['ability'])) {
             return true;
         }
-        return false;
+        return true;
     }
     public static function deleteUsers($ids)
     {


757) /var/www/app/Models/User.php:390    [M] PublicVisibility

--- Original
+++ New
@@ @@
         }
         return false;
     }
-    public static function deleteUsers($ids)
+    protected static function deleteUsers($ids)
     {
         foreach ($ids as $id) {
             $user = self::find($id);


758) /var/www/app/Models/User.php:392    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public static function deleteUsers($ids)
     {
-        foreach ($ids as $id) {
+        foreach (array() as $id) {
             $user = self::find($id);
             if ($user->invoices()->exists()) {
                 $user->invoices()->update(['creator_id' => null]);


759) /var/www/app/Models/User.php:396    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         foreach ($ids as $id) {
             $user = self::find($id);
             if ($user->invoices()->exists()) {
-                $user->invoices()->update(['creator_id' => null]);
+                $user->invoices()->update([]);
             }
             if ($user->estimates()->exists()) {
                 $user->estimates()->update(['creator_id' => null]);


760) /var/www/app/Models/User.php:396    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
         foreach ($ids as $id) {
             $user = self::find($id);
             if ($user->invoices()->exists()) {
-                $user->invoices()->update(['creator_id' => null]);
+                
             }
             if ($user->estimates()->exists()) {
                 $user->estimates()->update(['creator_id' => null]);


761) /var/www/app/Models/User.php:400    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $user->invoices()->update(['creator_id' => null]);
             }
             if ($user->estimates()->exists()) {
-                $user->estimates()->update(['creator_id' => null]);
+                $user->estimates()->update([]);
             }
             if ($user->customers()->exists()) {
                 $user->customers()->update(['creator_id' => null]);


762) /var/www/app/Models/User.php:400    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $user->invoices()->update(['creator_id' => null]);
             }
             if ($user->estimates()->exists()) {
-                $user->estimates()->update(['creator_id' => null]);
+                
             }
             if ($user->customers()->exists()) {
                 $user->customers()->update(['creator_id' => null]);


763) /var/www/app/Models/User.php:404    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $user->estimates()->update(['creator_id' => null]);
             }
             if ($user->customers()->exists()) {
-                $user->customers()->update(['creator_id' => null]);
+                $user->customers()->update([]);
             }
             if ($user->recurringInvoices()->exists()) {
                 $user->recurringInvoices()->update(['creator_id' => null]);


764) /var/www/app/Models/User.php:404    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $user->estimates()->update(['creator_id' => null]);
             }
             if ($user->customers()->exists()) {
-                $user->customers()->update(['creator_id' => null]);
+                
             }
             if ($user->recurringInvoices()->exists()) {
                 $user->recurringInvoices()->update(['creator_id' => null]);


765) /var/www/app/Models/User.php:408    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $user->customers()->update(['creator_id' => null]);
             }
             if ($user->recurringInvoices()->exists()) {
-                $user->recurringInvoices()->update(['creator_id' => null]);
+                $user->recurringInvoices()->update([]);
             }
             if ($user->expenses()->exists()) {
                 $user->expenses()->update(['creator_id' => null]);


766) /var/www/app/Models/User.php:408    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $user->customers()->update(['creator_id' => null]);
             }
             if ($user->recurringInvoices()->exists()) {
-                $user->recurringInvoices()->update(['creator_id' => null]);
+                
             }
             if ($user->expenses()->exists()) {
                 $user->expenses()->update(['creator_id' => null]);


767) /var/www/app/Models/User.php:412    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $user->recurringInvoices()->update(['creator_id' => null]);
             }
             if ($user->expenses()->exists()) {
-                $user->expenses()->update(['creator_id' => null]);
+                $user->expenses()->update([]);
             }
             if ($user->payments()->exists()) {
                 $user->payments()->update(['creator_id' => null]);


768) /var/www/app/Models/User.php:412    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $user->recurringInvoices()->update(['creator_id' => null]);
             }
             if ($user->expenses()->exists()) {
-                $user->expenses()->update(['creator_id' => null]);
+                
             }
             if ($user->payments()->exists()) {
                 $user->payments()->update(['creator_id' => null]);


769) /var/www/app/Models/User.php:416    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $user->expenses()->update(['creator_id' => null]);
             }
             if ($user->payments()->exists()) {
-                $user->payments()->update(['creator_id' => null]);
+                $user->payments()->update([]);
             }
             if ($user->items()->exists()) {
                 $user->items()->update(['creator_id' => null]);


770) /var/www/app/Models/User.php:416    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $user->expenses()->update(['creator_id' => null]);
             }
             if ($user->payments()->exists()) {
-                $user->payments()->update(['creator_id' => null]);
+                
             }
             if ($user->items()->exists()) {
                 $user->items()->update(['creator_id' => null]);


771) /var/www/app/Models/User.php:420    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                 $user->payments()->update(['creator_id' => null]);
             }
             if ($user->items()->exists()) {
-                $user->items()->update(['creator_id' => null]);
+                $user->items()->update([]);
             }
             if ($user->settings()->exists()) {
                 $user->settings()->delete();


772) /var/www/app/Models/User.php:420    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $user->payments()->update(['creator_id' => null]);
             }
             if ($user->items()->exists()) {
-                $user->items()->update(['creator_id' => null]);
+                
             }
             if ($user->settings()->exists()) {
                 $user->settings()->delete();


773) /var/www/app/Models/User.php:424    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
                 $user->items()->update(['creator_id' => null]);
             }
             if ($user->settings()->exists()) {
-                $user->settings()->delete();
+                
             }
             $user->delete();
         }


774) /var/www/app/Models/User.php:427    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             if ($user->settings()->exists()) {
                 $user->settings()->delete();
             }
-            $user->delete();
+            
         }
         return true;
     }
 }


775) /var/www/app/Models/User.php:430    [M] TrueValue

--- Original
+++ New
@@ @@
             }
             $user->delete();
         }
-        return true;
+        return false;
     }
 }


776) /var/www/app/Models/UserSetting.php:14    [M] PublicVisibility

--- Original
+++ New
@@ @@
 {
     use HasFactory;
     protected $guarded = ['id'];
-    public function user()
+    protected function user()
     {
         return $this->belongsTo(User::class);
     }
 }
